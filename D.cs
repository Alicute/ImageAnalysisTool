
// D:\Download\SSE_Optimization_Demo\Wrapper.exe
// Wrapper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// Global type: <Module>
// Entry point: Demo.Program.Main
// Architecture: x64
// Runtime: v4.0.30319
// Hash algorithm: SHA1

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Security;
using System.Security.Permissions;
using System.Windows.Forms;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: AssemblyTitle("Demo")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Demo")]
[assembly: AssemblyCopyright("Copyright Â© Microsoft 2017")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("b6351fa3-1cde-48d1-bce9-ee19600b4666")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: TargetFramework(".NETFramework,Version=v4.7.2", FrameworkDisplayName = ".NET Framework 4.7.2")]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("1.0.0.0")]
[module: UnverifiableCode]
namespace Wrapper.Properties
{
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	internal class Resources
	{
		private static ResourceManager resourceMan;

		private static CultureInfo resourceCulture;

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static ResourceManager ResourceManager
		{
			get
			{
				if (resourceMan == null)
				{
					resourceMan = new ResourceManager("Wrapper.Properties.Resources", typeof(Resources).Assembly);
				}
				return resourceMan;
			}
		}

		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static CultureInfo Culture
		{
			get
			{
				return resourceCulture;
			}
			set
			{
				resourceCulture = value;
			}
		}

		internal Resources()
		{
		}
	}
	[CompilerGenerated]
	[GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.10.0.0")]
	internal sealed class Settings : ApplicationSettingsBase
	{
		private static Settings defaultInstance = (Settings)SettingsBase.Synchronized(new Settings());

		public static Settings Default => defaultInstance;
	}
}
namespace Demo
{
	public class FrmInfo : Form
	{
		public struct RGBQUAD
		{
			public byte Blue;

			public byte Green;

			public byte Red;

			public byte Alpha;
		}

		private struct IM_SingleShape
		{
			public int Label;

			public int Area;

			public unsafe Point* Pt;
		}

		private struct IM_Rectangle
		{
			public int Left;

			public int Top;

			public int Right;

			public int Bottom;
		}

		private struct IM_Circle
		{
			public PointF Center;

			public float Radius;
		}

		private struct IM_HullPoints
		{
			public int Flag;

			public int Amount;

			public unsafe Point* Pt;
		}

		private struct IM_RotatedRect
		{
			public PointF Center;

			public float Width;

			public float Height;

			public float Angle;
		}

		private struct IM_Moments
		{
			public double m00;

			public double m10;

			public double m01;

			public double m20;

			public double m11;

			public double m02;

			public double m30;

			public double m21;

			public double m12;

			public double m03;

			public double mu20;

			public double mu11;

			public double mu02;

			public double mu30;

			public double mu21;

			public double mu12;

			public double mu03;

			public double nu20;

			public double nu11;

			public double nu02;

			public double nu30;

			public double nu21;

			public double nu12;

			public double nu03;
		}

		private struct IM_ShapeProperties
		{
			public PointF Center;

			public IM_Circle MinEnclosingCircle;

			public IM_Circle MaxDisclosingCircle;

			public IM_Rectangle BoundRect;

			public IM_RotatedRect MinAreaRect;

			public IM_HullPoints Hull;

			public IM_Moments Moments;

			public int Area;

			public float Convexity;

			public float InertiaRaio;

			public float Circularity;

			public float Rectangularity;

			public float Compactness;
		}

		private struct IM_ShapeSets
		{
			public int Flag;

			public int Amount;

			public unsafe IM_SingleShape* Sets;

			public unsafe IM_ShapeProperties* Properties;
		}

		private Canvas canvas;

		private ToolStripStatusLabel TimeUse;

		private bool Locked;

		private unsafe int* Labels = null;

		private IM_ShapeSets PS;

		private IContainer components;

		private Panel Panel;

		private PictureBox PicShow;

		private GroupBox GpConnected;

		private RadioButton Connected8;

		private RadioButton Connected4;

		private ListView ListResult;

		private ColumnHeader No;

		private ColumnHeader Area;

		private ColumnHeader BoundRect;

		private ColumnHeader MinAreaRect;

		private ColumnHeader MinClosingCircle;

		private ColumnHeader Convexity;

		private ColumnHeader InertiaRaio;

		private ColumnHeader Circularity;

		private ColumnHeader Rectangularity;

		private ColumnHeader Compactness;

		private ColumnHeader MaxDisclosingCircle;

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern void IM_GetRotatedRect_Corners(IM_RotatedRect Box, PointF* Corners);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetConnectedComponents(byte* Src, int* Labels, int Width, int Height, int Stride, ref int Amount, int ConnectedArea);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetShapePropertiesFromLabels(int* Labels, int Width, int Height, int Amount, ref IM_ShapeSets PS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_DeleteObject(IntPtr Object);

		public unsafe FrmInfo()
		{
			InitializeComponent();
		}

		private unsafe void ConvertGraytoRGB(Canvas Src, PictureBox Pic)
		{
			Bitmap bitmap = (Bitmap)Pic.Image;
			if (bitmap == null || bitmap.Width != Src.Width || bitmap.Height != Src.Height)
			{
				bitmap = (Bitmap)(Pic.Image = new Bitmap(Src.Width, Src.Height, PixelFormat.Format24bppRgb));
			}
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			for (int i = 0; i < Src.Height; i++)
			{
				byte* ptr = Src.ImageData + i * Src.Stride;
				byte* ptr2 = (byte*)(void*)bitmapData.Scan0 + i * bitmapData.Stride;
				for (int j = 0; j < Src.Width; j++)
				{
					*ptr2 = (ptr2[1] = (ptr2[2] = ptr[j]));
					ptr2 += 3;
				}
			}
			bitmap.UnlockBits(bitmapData);
			Pic.Refresh();
		}

		public unsafe FrmInfo(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			ConvertGraytoRGB(Parent, PicShow);
		}

		private void GetWindowsPalette(ref RGBQUAD[] Palette)
		{
			Palette[0].Red = 0;
			Palette[0].Green = 0;
			Palette[0].Blue = 0;
			Palette[0].Alpha = byte.MaxValue;
			Palette[1].Red = 128;
			Palette[1].Green = 0;
			Palette[1].Blue = 0;
			Palette[1].Alpha = byte.MaxValue;
			Palette[2].Red = 0;
			Palette[2].Green = 128;
			Palette[2].Blue = 0;
			Palette[2].Alpha = byte.MaxValue;
			Palette[3].Red = 128;
			Palette[3].Green = 128;
			Palette[3].Blue = 0;
			Palette[3].Alpha = byte.MaxValue;
			Palette[4].Red = 0;
			Palette[4].Green = 0;
			Palette[4].Blue = 128;
			Palette[4].Alpha = byte.MaxValue;
			Palette[5].Red = 128;
			Palette[5].Green = 0;
			Palette[5].Blue = 128;
			Palette[5].Alpha = byte.MaxValue;
			Palette[6].Red = 0;
			Palette[6].Green = 128;
			Palette[6].Blue = 128;
			Palette[6].Alpha = byte.MaxValue;
			Palette[7].Red = 212;
			Palette[7].Green = 128;
			Palette[7].Blue = 90;
			Palette[7].Alpha = byte.MaxValue;
			Palette[8].Red = 192;
			Palette[8].Green = 220;
			Palette[8].Blue = 192;
			Palette[8].Alpha = byte.MaxValue;
			Palette[9].Red = 166;
			Palette[9].Green = 202;
			Palette[9].Blue = 240;
			Palette[9].Alpha = byte.MaxValue;
			Palette[10].Red = 42;
			Palette[10].Green = 63;
			Palette[10].Blue = 170;
			Palette[10].Alpha = byte.MaxValue;
			Palette[11].Red = 42;
			Palette[11].Green = 63;
			Palette[11].Blue = byte.MaxValue;
			Palette[11].Alpha = byte.MaxValue;
			Palette[12].Red = 42;
			Palette[12].Green = 95;
			Palette[12].Blue = 0;
			Palette[12].Alpha = byte.MaxValue;
			Palette[13].Red = 42;
			Palette[13].Green = 95;
			Palette[13].Blue = 85;
			Palette[13].Alpha = byte.MaxValue;
			Palette[14].Red = 42;
			Palette[14].Green = 95;
			Palette[14].Blue = 170;
			Palette[14].Alpha = byte.MaxValue;
			Palette[15].Red = 42;
			Palette[15].Green = 95;
			Palette[15].Blue = byte.MaxValue;
			Palette[15].Alpha = byte.MaxValue;
			Palette[16].Red = 42;
			Palette[16].Green = 127;
			Palette[16].Blue = 0;
			Palette[16].Alpha = byte.MaxValue;
			Palette[17].Red = 42;
			Palette[17].Green = 127;
			Palette[17].Blue = 85;
			Palette[17].Alpha = byte.MaxValue;
			Palette[18].Red = 42;
			Palette[18].Green = 127;
			Palette[18].Blue = 170;
			Palette[18].Alpha = byte.MaxValue;
			Palette[19].Red = 42;
			Palette[19].Green = 127;
			Palette[19].Blue = byte.MaxValue;
			Palette[19].Alpha = byte.MaxValue;
			Palette[20].Red = 42;
			Palette[20].Green = 159;
			Palette[20].Blue = 0;
			Palette[20].Alpha = byte.MaxValue;
			Palette[21].Red = 42;
			Palette[21].Green = 159;
			Palette[21].Blue = 85;
			Palette[21].Alpha = byte.MaxValue;
			Palette[22].Red = 42;
			Palette[22].Green = 159;
			Palette[22].Blue = 170;
			Palette[22].Alpha = byte.MaxValue;
			Palette[23].Red = 42;
			Palette[23].Green = 159;
			Palette[23].Blue = byte.MaxValue;
			Palette[23].Alpha = byte.MaxValue;
			Palette[24].Red = 42;
			Palette[24].Green = 191;
			Palette[24].Blue = 0;
			Palette[24].Alpha = byte.MaxValue;
			Palette[25].Red = 42;
			Palette[25].Green = 191;
			Palette[25].Blue = 85;
			Palette[25].Alpha = byte.MaxValue;
			Palette[26].Red = 42;
			Palette[26].Green = 191;
			Palette[26].Blue = 170;
			Palette[26].Alpha = byte.MaxValue;
			Palette[27].Red = 42;
			Palette[27].Green = 191;
			Palette[27].Blue = byte.MaxValue;
			Palette[27].Alpha = byte.MaxValue;
			Palette[28].Red = 42;
			Palette[28].Green = 223;
			Palette[28].Blue = 0;
			Palette[28].Alpha = byte.MaxValue;
			Palette[29].Red = 42;
			Palette[29].Green = 223;
			Palette[29].Blue = 85;
			Palette[29].Alpha = byte.MaxValue;
			Palette[30].Red = 42;
			Palette[30].Green = 223;
			Palette[30].Blue = 170;
			Palette[30].Alpha = byte.MaxValue;
			Palette[31].Red = 42;
			Palette[31].Green = 223;
			Palette[31].Blue = byte.MaxValue;
			Palette[31].Alpha = byte.MaxValue;
			Palette[32].Red = 42;
			Palette[32].Green = byte.MaxValue;
			Palette[32].Blue = 0;
			Palette[32].Alpha = byte.MaxValue;
			Palette[33].Red = 42;
			Palette[33].Green = byte.MaxValue;
			Palette[33].Blue = 85;
			Palette[33].Alpha = byte.MaxValue;
			Palette[34].Red = 42;
			Palette[34].Green = byte.MaxValue;
			Palette[34].Blue = 170;
			Palette[34].Alpha = byte.MaxValue;
			Palette[35].Red = 42;
			Palette[35].Green = byte.MaxValue;
			Palette[35].Blue = byte.MaxValue;
			Palette[35].Alpha = byte.MaxValue;
			Palette[36].Red = 85;
			Palette[36].Green = 0;
			Palette[36].Blue = 0;
			Palette[36].Alpha = byte.MaxValue;
			Palette[37].Red = 85;
			Palette[37].Green = 0;
			Palette[37].Blue = 85;
			Palette[37].Alpha = byte.MaxValue;
			Palette[38].Red = 85;
			Palette[38].Green = 0;
			Palette[38].Blue = 170;
			Palette[38].Alpha = byte.MaxValue;
			Palette[39].Red = 85;
			Palette[39].Green = 0;
			Palette[39].Blue = byte.MaxValue;
			Palette[39].Alpha = byte.MaxValue;
			Palette[40].Red = 85;
			Palette[40].Green = 31;
			Palette[40].Blue = 0;
			Palette[40].Alpha = byte.MaxValue;
			Palette[41].Red = 85;
			Palette[41].Green = 31;
			Palette[41].Blue = 85;
			Palette[41].Alpha = byte.MaxValue;
			Palette[42].Red = 85;
			Palette[42].Green = 31;
			Palette[42].Blue = 170;
			Palette[42].Alpha = byte.MaxValue;
			Palette[43].Red = 85;
			Palette[43].Green = 31;
			Palette[43].Blue = byte.MaxValue;
			Palette[43].Alpha = byte.MaxValue;
			Palette[44].Red = 85;
			Palette[44].Green = 63;
			Palette[44].Blue = 0;
			Palette[44].Alpha = byte.MaxValue;
			Palette[45].Red = 85;
			Palette[45].Green = 63;
			Palette[45].Blue = 85;
			Palette[45].Alpha = byte.MaxValue;
			Palette[46].Red = 85;
			Palette[46].Green = 63;
			Palette[46].Blue = 170;
			Palette[46].Alpha = byte.MaxValue;
			Palette[47].Red = 85;
			Palette[47].Green = 63;
			Palette[47].Blue = byte.MaxValue;
			Palette[47].Alpha = byte.MaxValue;
			Palette[48].Red = 85;
			Palette[48].Green = 95;
			Palette[48].Blue = 0;
			Palette[48].Alpha = byte.MaxValue;
			Palette[49].Red = 85;
			Palette[49].Green = 95;
			Palette[49].Blue = 85;
			Palette[49].Alpha = byte.MaxValue;
			Palette[50].Red = 85;
			Palette[50].Green = 95;
			Palette[50].Blue = 170;
			Palette[50].Alpha = byte.MaxValue;
			Palette[51].Red = 85;
			Palette[51].Green = 95;
			Palette[51].Blue = byte.MaxValue;
			Palette[51].Alpha = byte.MaxValue;
			Palette[52].Red = 85;
			Palette[52].Green = 127;
			Palette[52].Blue = 0;
			Palette[52].Alpha = byte.MaxValue;
			Palette[53].Red = 85;
			Palette[53].Green = 127;
			Palette[53].Blue = 85;
			Palette[53].Alpha = byte.MaxValue;
			Palette[54].Red = 85;
			Palette[54].Green = 127;
			Palette[54].Blue = 170;
			Palette[54].Alpha = byte.MaxValue;
			Palette[55].Red = 85;
			Palette[55].Green = 127;
			Palette[55].Blue = byte.MaxValue;
			Palette[55].Alpha = byte.MaxValue;
			Palette[56].Red = 85;
			Palette[56].Green = 159;
			Palette[56].Blue = 0;
			Palette[56].Alpha = byte.MaxValue;
			Palette[57].Red = 85;
			Palette[57].Green = 159;
			Palette[57].Blue = 85;
			Palette[57].Alpha = byte.MaxValue;
			Palette[58].Red = 85;
			Palette[58].Green = 159;
			Palette[58].Blue = 170;
			Palette[58].Alpha = byte.MaxValue;
			Palette[59].Red = 85;
			Palette[59].Green = 159;
			Palette[59].Blue = byte.MaxValue;
			Palette[59].Alpha = byte.MaxValue;
			Palette[60].Red = 85;
			Palette[60].Green = 191;
			Palette[60].Blue = 0;
			Palette[60].Alpha = byte.MaxValue;
			Palette[61].Red = 85;
			Palette[61].Green = 191;
			Palette[61].Blue = 85;
			Palette[61].Alpha = byte.MaxValue;
			Palette[62].Red = 85;
			Palette[62].Green = 191;
			Palette[62].Blue = 170;
			Palette[62].Alpha = byte.MaxValue;
			Palette[63].Red = 85;
			Palette[63].Green = 191;
			Palette[63].Blue = byte.MaxValue;
			Palette[63].Alpha = byte.MaxValue;
			Palette[64].Red = 85;
			Palette[64].Green = 223;
			Palette[64].Blue = 0;
			Palette[64].Alpha = byte.MaxValue;
			Palette[65].Red = 85;
			Palette[65].Green = 223;
			Palette[65].Blue = 85;
			Palette[65].Alpha = byte.MaxValue;
			Palette[66].Red = 85;
			Palette[66].Green = 223;
			Palette[66].Blue = 170;
			Palette[66].Alpha = byte.MaxValue;
			Palette[67].Red = 85;
			Palette[67].Green = 223;
			Palette[67].Blue = byte.MaxValue;
			Palette[67].Alpha = byte.MaxValue;
			Palette[68].Red = 85;
			Palette[68].Green = byte.MaxValue;
			Palette[68].Blue = 0;
			Palette[68].Alpha = byte.MaxValue;
			Palette[69].Red = 85;
			Palette[69].Green = byte.MaxValue;
			Palette[69].Blue = 85;
			Palette[69].Alpha = byte.MaxValue;
			Palette[70].Red = 85;
			Palette[70].Green = byte.MaxValue;
			Palette[70].Blue = 170;
			Palette[70].Alpha = byte.MaxValue;
			Palette[71].Red = 85;
			Palette[71].Green = byte.MaxValue;
			Palette[71].Blue = byte.MaxValue;
			Palette[71].Alpha = byte.MaxValue;
			Palette[72].Red = 127;
			Palette[72].Green = 0;
			Palette[72].Blue = 0;
			Palette[72].Alpha = byte.MaxValue;
			Palette[73].Red = 127;
			Palette[73].Green = 0;
			Palette[73].Blue = 85;
			Palette[73].Alpha = byte.MaxValue;
			Palette[74].Red = 127;
			Palette[74].Green = 0;
			Palette[74].Blue = 170;
			Palette[74].Alpha = byte.MaxValue;
			Palette[75].Red = 127;
			Palette[75].Green = 0;
			Palette[75].Blue = byte.MaxValue;
			Palette[75].Alpha = byte.MaxValue;
			Palette[76].Red = 127;
			Palette[76].Green = 31;
			Palette[76].Blue = 0;
			Palette[76].Alpha = byte.MaxValue;
			Palette[77].Red = 127;
			Palette[77].Green = 31;
			Palette[77].Blue = 85;
			Palette[77].Alpha = byte.MaxValue;
			Palette[78].Red = 127;
			Palette[78].Green = 31;
			Palette[78].Blue = 170;
			Palette[78].Alpha = byte.MaxValue;
			Palette[79].Red = 127;
			Palette[79].Green = 31;
			Palette[79].Blue = byte.MaxValue;
			Palette[79].Alpha = byte.MaxValue;
			Palette[80].Red = 127;
			Palette[80].Green = 63;
			Palette[80].Blue = 0;
			Palette[80].Alpha = byte.MaxValue;
			Palette[81].Red = 127;
			Palette[81].Green = 63;
			Palette[81].Blue = 85;
			Palette[81].Alpha = byte.MaxValue;
			Palette[82].Red = 127;
			Palette[82].Green = 63;
			Palette[82].Blue = 170;
			Palette[82].Alpha = byte.MaxValue;
			Palette[83].Red = 127;
			Palette[83].Green = 63;
			Palette[83].Blue = byte.MaxValue;
			Palette[83].Alpha = byte.MaxValue;
			Palette[84].Red = 127;
			Palette[84].Green = 95;
			Palette[84].Blue = 0;
			Palette[84].Alpha = byte.MaxValue;
			Palette[85].Red = 127;
			Palette[85].Green = 95;
			Palette[85].Blue = 85;
			Palette[85].Alpha = byte.MaxValue;
			Palette[86].Red = 127;
			Palette[86].Green = 95;
			Palette[86].Blue = 170;
			Palette[86].Alpha = byte.MaxValue;
			Palette[87].Red = 127;
			Palette[87].Green = 95;
			Palette[87].Blue = byte.MaxValue;
			Palette[87].Alpha = byte.MaxValue;
			Palette[88].Red = 127;
			Palette[88].Green = 127;
			Palette[88].Blue = 0;
			Palette[88].Alpha = byte.MaxValue;
			Palette[89].Red = 127;
			Palette[89].Green = 127;
			Palette[89].Blue = 85;
			Palette[89].Alpha = byte.MaxValue;
			Palette[90].Red = 127;
			Palette[90].Green = 127;
			Palette[90].Blue = 170;
			Palette[90].Alpha = byte.MaxValue;
			Palette[91].Red = 127;
			Palette[91].Green = 127;
			Palette[91].Blue = byte.MaxValue;
			Palette[91].Alpha = byte.MaxValue;
			Palette[92].Red = 127;
			Palette[92].Green = 159;
			Palette[92].Blue = 0;
			Palette[92].Alpha = byte.MaxValue;
			Palette[93].Red = 127;
			Palette[93].Green = 159;
			Palette[93].Blue = 85;
			Palette[93].Alpha = byte.MaxValue;
			Palette[94].Red = 127;
			Palette[94].Green = 159;
			Palette[94].Blue = 170;
			Palette[94].Alpha = byte.MaxValue;
			Palette[95].Red = 127;
			Palette[95].Green = 159;
			Palette[95].Blue = byte.MaxValue;
			Palette[95].Alpha = byte.MaxValue;
			Palette[96].Red = 127;
			Palette[96].Green = 191;
			Palette[96].Blue = 0;
			Palette[96].Alpha = byte.MaxValue;
			Palette[97].Red = 127;
			Palette[97].Green = 191;
			Palette[97].Blue = 85;
			Palette[97].Alpha = byte.MaxValue;
			Palette[98].Red = 127;
			Palette[98].Green = 191;
			Palette[98].Blue = 170;
			Palette[98].Alpha = byte.MaxValue;
			Palette[99].Red = 127;
			Palette[99].Green = 191;
			Palette[99].Blue = byte.MaxValue;
			Palette[99].Alpha = byte.MaxValue;
			Palette[100].Red = 127;
			Palette[100].Green = 223;
			Palette[100].Blue = 0;
			Palette[100].Alpha = byte.MaxValue;
			Palette[101].Red = 127;
			Palette[101].Green = 223;
			Palette[101].Blue = 85;
			Palette[101].Alpha = byte.MaxValue;
			Palette[102].Red = 127;
			Palette[102].Green = 223;
			Palette[102].Blue = 170;
			Palette[102].Alpha = byte.MaxValue;
			Palette[103].Red = 127;
			Palette[103].Green = 223;
			Palette[103].Blue = byte.MaxValue;
			Palette[103].Alpha = byte.MaxValue;
			Palette[104].Red = 127;
			Palette[104].Green = byte.MaxValue;
			Palette[104].Blue = 0;
			Palette[104].Alpha = byte.MaxValue;
			Palette[105].Red = 127;
			Palette[105].Green = byte.MaxValue;
			Palette[105].Blue = 85;
			Palette[105].Alpha = byte.MaxValue;
			Palette[106].Red = 127;
			Palette[106].Green = byte.MaxValue;
			Palette[106].Blue = 170;
			Palette[106].Alpha = byte.MaxValue;
			Palette[107].Red = 127;
			Palette[107].Green = byte.MaxValue;
			Palette[107].Blue = byte.MaxValue;
			Palette[107].Alpha = byte.MaxValue;
			Palette[108].Red = 170;
			Palette[108].Green = 0;
			Palette[108].Blue = 0;
			Palette[108].Alpha = byte.MaxValue;
			Palette[109].Red = 170;
			Palette[109].Green = 0;
			Palette[109].Blue = 85;
			Palette[109].Alpha = byte.MaxValue;
			Palette[110].Red = 170;
			Palette[110].Green = 0;
			Palette[110].Blue = 170;
			Palette[110].Alpha = byte.MaxValue;
			Palette[111].Red = 170;
			Palette[111].Green = 0;
			Palette[111].Blue = byte.MaxValue;
			Palette[111].Alpha = byte.MaxValue;
			Palette[112].Red = 170;
			Palette[112].Green = 31;
			Palette[112].Blue = 0;
			Palette[112].Alpha = byte.MaxValue;
			Palette[113].Red = 170;
			Palette[113].Green = 31;
			Palette[113].Blue = 85;
			Palette[113].Alpha = byte.MaxValue;
			Palette[114].Red = 170;
			Palette[114].Green = 31;
			Palette[114].Blue = 170;
			Palette[114].Alpha = byte.MaxValue;
			Palette[115].Red = 170;
			Palette[115].Green = 31;
			Palette[115].Blue = byte.MaxValue;
			Palette[115].Alpha = byte.MaxValue;
			Palette[116].Red = 170;
			Palette[116].Green = 63;
			Palette[116].Blue = 0;
			Palette[116].Alpha = byte.MaxValue;
			Palette[117].Red = 170;
			Palette[117].Green = 63;
			Palette[117].Blue = 85;
			Palette[117].Alpha = byte.MaxValue;
			Palette[118].Red = 170;
			Palette[118].Green = 63;
			Palette[118].Blue = 170;
			Palette[118].Alpha = byte.MaxValue;
			Palette[119].Red = 170;
			Palette[119].Green = 63;
			Palette[119].Blue = byte.MaxValue;
			Palette[119].Alpha = byte.MaxValue;
			Palette[120].Red = 170;
			Palette[120].Green = 95;
			Palette[120].Blue = 0;
			Palette[120].Alpha = byte.MaxValue;
			Palette[121].Red = 170;
			Palette[121].Green = 95;
			Palette[121].Blue = 85;
			Palette[121].Alpha = byte.MaxValue;
			Palette[122].Red = 170;
			Palette[122].Green = 95;
			Palette[122].Blue = 170;
			Palette[122].Alpha = byte.MaxValue;
			Palette[123].Red = 170;
			Palette[123].Green = 95;
			Palette[123].Blue = byte.MaxValue;
			Palette[123].Alpha = byte.MaxValue;
			Palette[124].Red = 170;
			Palette[124].Green = 127;
			Palette[124].Blue = 0;
			Palette[124].Alpha = byte.MaxValue;
			Palette[125].Red = 170;
			Palette[125].Green = 127;
			Palette[125].Blue = 85;
			Palette[125].Alpha = byte.MaxValue;
			Palette[126].Red = 170;
			Palette[126].Green = 127;
			Palette[126].Blue = 170;
			Palette[126].Alpha = byte.MaxValue;
			Palette[127].Red = 170;
			Palette[127].Green = 127;
			Palette[127].Blue = byte.MaxValue;
			Palette[127].Alpha = byte.MaxValue;
			Palette[128].Red = 170;
			Palette[128].Green = 159;
			Palette[128].Blue = 0;
			Palette[128].Alpha = byte.MaxValue;
			Palette[129].Red = 170;
			Palette[129].Green = 159;
			Palette[129].Blue = 85;
			Palette[129].Alpha = byte.MaxValue;
			Palette[130].Red = 170;
			Palette[130].Green = 159;
			Palette[130].Blue = 170;
			Palette[130].Alpha = byte.MaxValue;
			Palette[131].Red = 170;
			Palette[131].Green = 159;
			Palette[131].Blue = byte.MaxValue;
			Palette[131].Alpha = byte.MaxValue;
			Palette[132].Red = 170;
			Palette[132].Green = 191;
			Palette[132].Blue = 0;
			Palette[132].Alpha = byte.MaxValue;
			Palette[133].Red = 170;
			Palette[133].Green = 191;
			Palette[133].Blue = 85;
			Palette[133].Alpha = byte.MaxValue;
			Palette[134].Red = 170;
			Palette[134].Green = 191;
			Palette[134].Blue = 170;
			Palette[134].Alpha = byte.MaxValue;
			Palette[135].Red = 170;
			Palette[135].Green = 191;
			Palette[135].Blue = byte.MaxValue;
			Palette[135].Alpha = byte.MaxValue;
			Palette[136].Red = 170;
			Palette[136].Green = 223;
			Palette[136].Blue = 0;
			Palette[136].Alpha = byte.MaxValue;
			Palette[137].Red = 170;
			Palette[137].Green = 223;
			Palette[137].Blue = 85;
			Palette[137].Alpha = byte.MaxValue;
			Palette[138].Red = 170;
			Palette[138].Green = 223;
			Palette[138].Blue = 170;
			Palette[138].Alpha = byte.MaxValue;
			Palette[139].Red = 170;
			Palette[139].Green = 223;
			Palette[139].Blue = byte.MaxValue;
			Palette[139].Alpha = byte.MaxValue;
			Palette[140].Red = 170;
			Palette[140].Green = byte.MaxValue;
			Palette[140].Blue = 0;
			Palette[140].Alpha = byte.MaxValue;
			Palette[141].Red = 170;
			Palette[141].Green = byte.MaxValue;
			Palette[141].Blue = 85;
			Palette[141].Alpha = byte.MaxValue;
			Palette[142].Red = 170;
			Palette[142].Green = byte.MaxValue;
			Palette[142].Blue = 170;
			Palette[142].Alpha = byte.MaxValue;
			Palette[143].Red = 170;
			Palette[143].Green = byte.MaxValue;
			Palette[143].Blue = byte.MaxValue;
			Palette[143].Alpha = byte.MaxValue;
			Palette[144].Red = 212;
			Palette[144].Green = 0;
			Palette[144].Blue = 0;
			Palette[144].Alpha = byte.MaxValue;
			Palette[145].Red = 212;
			Palette[145].Green = 0;
			Palette[145].Blue = 85;
			Palette[145].Alpha = byte.MaxValue;
			Palette[146].Red = 212;
			Palette[146].Green = 0;
			Palette[146].Blue = 170;
			Palette[146].Alpha = byte.MaxValue;
			Palette[147].Red = 212;
			Palette[147].Green = 0;
			Palette[147].Blue = byte.MaxValue;
			Palette[147].Alpha = byte.MaxValue;
			Palette[148].Red = 212;
			Palette[148].Green = 31;
			Palette[148].Blue = 0;
			Palette[148].Alpha = byte.MaxValue;
			Palette[149].Red = 212;
			Palette[149].Green = 31;
			Palette[149].Blue = 85;
			Palette[149].Alpha = byte.MaxValue;
			Palette[150].Red = 212;
			Palette[150].Green = 31;
			Palette[150].Blue = 170;
			Palette[150].Alpha = byte.MaxValue;
			Palette[151].Red = 212;
			Palette[151].Green = 31;
			Palette[151].Blue = byte.MaxValue;
			Palette[151].Alpha = byte.MaxValue;
			Palette[152].Red = 212;
			Palette[152].Green = 63;
			Palette[152].Blue = 0;
			Palette[152].Alpha = byte.MaxValue;
			Palette[153].Red = 212;
			Palette[153].Green = 63;
			Palette[153].Blue = 85;
			Palette[153].Alpha = byte.MaxValue;
			Palette[154].Red = 212;
			Palette[154].Green = 63;
			Palette[154].Blue = 170;
			Palette[154].Alpha = byte.MaxValue;
			Palette[155].Red = 212;
			Palette[155].Green = 63;
			Palette[155].Blue = byte.MaxValue;
			Palette[155].Alpha = byte.MaxValue;
			Palette[156].Red = 212;
			Palette[156].Green = 95;
			Palette[156].Blue = 0;
			Palette[156].Alpha = byte.MaxValue;
			Palette[157].Red = 212;
			Palette[157].Green = 95;
			Palette[157].Blue = 85;
			Palette[157].Alpha = byte.MaxValue;
			Palette[158].Red = 212;
			Palette[158].Green = 95;
			Palette[158].Blue = 170;
			Palette[158].Alpha = byte.MaxValue;
			Palette[159].Red = 212;
			Palette[159].Green = 95;
			Palette[159].Blue = byte.MaxValue;
			Palette[159].Alpha = byte.MaxValue;
			Palette[160].Red = 212;
			Palette[160].Green = 127;
			Palette[160].Blue = 0;
			Palette[160].Alpha = byte.MaxValue;
			Palette[161].Red = 212;
			Palette[161].Green = 127;
			Palette[161].Blue = 85;
			Palette[161].Alpha = byte.MaxValue;
			Palette[162].Red = 212;
			Palette[162].Green = 127;
			Palette[162].Blue = 170;
			Palette[162].Alpha = byte.MaxValue;
			Palette[163].Red = 212;
			Palette[163].Green = 127;
			Palette[163].Blue = byte.MaxValue;
			Palette[163].Alpha = byte.MaxValue;
			Palette[164].Red = 212;
			Palette[164].Green = 159;
			Palette[164].Blue = 0;
			Palette[164].Alpha = byte.MaxValue;
			Palette[165].Red = 212;
			Palette[165].Green = 159;
			Palette[165].Blue = 85;
			Palette[165].Alpha = byte.MaxValue;
			Palette[166].Red = 212;
			Palette[166].Green = 159;
			Palette[166].Blue = 170;
			Palette[166].Alpha = byte.MaxValue;
			Palette[167].Red = 212;
			Palette[167].Green = 159;
			Palette[167].Blue = byte.MaxValue;
			Palette[167].Alpha = byte.MaxValue;
			Palette[168].Red = 212;
			Palette[168].Green = 191;
			Palette[168].Blue = 0;
			Palette[168].Alpha = byte.MaxValue;
			Palette[169].Red = 212;
			Palette[169].Green = 191;
			Palette[169].Blue = 85;
			Palette[169].Alpha = byte.MaxValue;
			Palette[170].Red = 212;
			Palette[170].Green = 191;
			Palette[170].Blue = 170;
			Palette[170].Alpha = byte.MaxValue;
			Palette[171].Red = 212;
			Palette[171].Green = 191;
			Palette[171].Blue = byte.MaxValue;
			Palette[171].Alpha = byte.MaxValue;
			Palette[172].Red = 212;
			Palette[172].Green = 223;
			Palette[172].Blue = 0;
			Palette[172].Alpha = byte.MaxValue;
			Palette[173].Red = 212;
			Palette[173].Green = 223;
			Palette[173].Blue = 85;
			Palette[173].Alpha = byte.MaxValue;
			Palette[174].Red = 212;
			Palette[174].Green = 223;
			Palette[174].Blue = 170;
			Palette[174].Alpha = byte.MaxValue;
			Palette[175].Red = 212;
			Palette[175].Green = 223;
			Palette[175].Blue = byte.MaxValue;
			Palette[175].Alpha = byte.MaxValue;
			Palette[176].Red = 212;
			Palette[176].Green = byte.MaxValue;
			Palette[176].Blue = 0;
			Palette[176].Alpha = byte.MaxValue;
			Palette[177].Red = 212;
			Palette[177].Green = byte.MaxValue;
			Palette[177].Blue = 85;
			Palette[177].Alpha = byte.MaxValue;
			Palette[178].Red = 212;
			Palette[178].Green = byte.MaxValue;
			Palette[178].Blue = 170;
			Palette[178].Alpha = byte.MaxValue;
			Palette[179].Red = 212;
			Palette[179].Green = byte.MaxValue;
			Palette[179].Blue = byte.MaxValue;
			Palette[179].Alpha = byte.MaxValue;
			Palette[180].Red = byte.MaxValue;
			Palette[180].Green = 0;
			Palette[180].Blue = 85;
			Palette[180].Alpha = byte.MaxValue;
			Palette[181].Red = byte.MaxValue;
			Palette[181].Green = 0;
			Palette[181].Blue = 170;
			Palette[181].Alpha = byte.MaxValue;
			Palette[182].Red = byte.MaxValue;
			Palette[182].Green = 31;
			Palette[182].Blue = 0;
			Palette[182].Alpha = byte.MaxValue;
			Palette[183].Red = byte.MaxValue;
			Palette[183].Green = 31;
			Palette[183].Blue = 85;
			Palette[183].Alpha = byte.MaxValue;
			Palette[184].Red = byte.MaxValue;
			Palette[184].Green = 31;
			Palette[184].Blue = 170;
			Palette[184].Alpha = byte.MaxValue;
			Palette[185].Red = byte.MaxValue;
			Palette[185].Green = 31;
			Palette[185].Blue = byte.MaxValue;
			Palette[185].Alpha = byte.MaxValue;
			Palette[186].Red = byte.MaxValue;
			Palette[186].Green = 63;
			Palette[186].Blue = 0;
			Palette[186].Alpha = byte.MaxValue;
			Palette[187].Red = byte.MaxValue;
			Palette[187].Green = 63;
			Palette[187].Blue = 85;
			Palette[187].Alpha = byte.MaxValue;
			Palette[188].Red = byte.MaxValue;
			Palette[188].Green = 63;
			Palette[188].Blue = 170;
			Palette[188].Alpha = byte.MaxValue;
			Palette[189].Red = byte.MaxValue;
			Palette[189].Green = 63;
			Palette[189].Blue = byte.MaxValue;
			Palette[189].Alpha = byte.MaxValue;
			Palette[190].Red = byte.MaxValue;
			Palette[190].Green = 95;
			Palette[190].Blue = 0;
			Palette[190].Alpha = byte.MaxValue;
			Palette[191].Red = byte.MaxValue;
			Palette[191].Green = 95;
			Palette[191].Blue = 85;
			Palette[191].Alpha = byte.MaxValue;
			Palette[192].Red = byte.MaxValue;
			Palette[192].Green = 95;
			Palette[192].Blue = 170;
			Palette[192].Alpha = byte.MaxValue;
			Palette[193].Red = byte.MaxValue;
			Palette[193].Green = 95;
			Palette[193].Blue = byte.MaxValue;
			Palette[193].Alpha = byte.MaxValue;
			Palette[194].Red = byte.MaxValue;
			Palette[194].Green = 127;
			Palette[194].Blue = 0;
			Palette[194].Alpha = byte.MaxValue;
			Palette[195].Red = byte.MaxValue;
			Palette[195].Green = 127;
			Palette[195].Blue = 85;
			Palette[195].Alpha = byte.MaxValue;
			Palette[196].Red = byte.MaxValue;
			Palette[196].Green = 127;
			Palette[196].Blue = 170;
			Palette[196].Alpha = byte.MaxValue;
			Palette[197].Red = byte.MaxValue;
			Palette[197].Green = 127;
			Palette[197].Blue = byte.MaxValue;
			Palette[197].Alpha = byte.MaxValue;
			Palette[198].Red = byte.MaxValue;
			Palette[198].Green = 159;
			Palette[198].Blue = 0;
			Palette[198].Alpha = byte.MaxValue;
			Palette[199].Red = byte.MaxValue;
			Palette[199].Green = 159;
			Palette[199].Blue = 85;
			Palette[199].Alpha = byte.MaxValue;
			Palette[200].Red = byte.MaxValue;
			Palette[200].Green = 159;
			Palette[200].Blue = 170;
			Palette[200].Alpha = byte.MaxValue;
			Palette[201].Red = byte.MaxValue;
			Palette[201].Green = 159;
			Palette[201].Blue = byte.MaxValue;
			Palette[201].Alpha = byte.MaxValue;
			Palette[202].Red = byte.MaxValue;
			Palette[202].Green = 191;
			Palette[202].Blue = 0;
			Palette[202].Alpha = byte.MaxValue;
			Palette[203].Red = byte.MaxValue;
			Palette[203].Green = 191;
			Palette[203].Blue = 85;
			Palette[203].Alpha = byte.MaxValue;
			Palette[204].Red = byte.MaxValue;
			Palette[204].Green = 191;
			Palette[204].Blue = 170;
			Palette[204].Alpha = byte.MaxValue;
			Palette[205].Red = byte.MaxValue;
			Palette[205].Green = 191;
			Palette[205].Blue = byte.MaxValue;
			Palette[205].Alpha = byte.MaxValue;
			Palette[206].Red = byte.MaxValue;
			Palette[206].Green = 223;
			Palette[206].Blue = 0;
			Palette[206].Alpha = byte.MaxValue;
			Palette[207].Red = byte.MaxValue;
			Palette[207].Green = 223;
			Palette[207].Blue = 85;
			Palette[207].Alpha = byte.MaxValue;
			Palette[208].Red = byte.MaxValue;
			Palette[208].Green = 223;
			Palette[208].Blue = 170;
			Palette[208].Alpha = byte.MaxValue;
			Palette[209].Red = byte.MaxValue;
			Palette[209].Green = 223;
			Palette[209].Blue = byte.MaxValue;
			Palette[209].Alpha = byte.MaxValue;
			Palette[210].Red = byte.MaxValue;
			Palette[210].Green = byte.MaxValue;
			Palette[210].Blue = 85;
			Palette[210].Alpha = byte.MaxValue;
			Palette[211].Red = byte.MaxValue;
			Palette[211].Green = byte.MaxValue;
			Palette[211].Blue = 170;
			Palette[211].Alpha = byte.MaxValue;
			Palette[212].Red = 204;
			Palette[212].Green = 204;
			Palette[212].Blue = byte.MaxValue;
			Palette[212].Alpha = byte.MaxValue;
			Palette[213].Red = byte.MaxValue;
			Palette[213].Green = 204;
			Palette[213].Blue = byte.MaxValue;
			Palette[213].Alpha = byte.MaxValue;
			Palette[214].Red = 51;
			Palette[214].Green = byte.MaxValue;
			Palette[214].Blue = byte.MaxValue;
			Palette[214].Alpha = byte.MaxValue;
			Palette[215].Red = 102;
			Palette[215].Green = byte.MaxValue;
			Palette[215].Blue = byte.MaxValue;
			Palette[215].Alpha = byte.MaxValue;
			Palette[216].Red = 153;
			Palette[216].Green = byte.MaxValue;
			Palette[216].Blue = byte.MaxValue;
			Palette[216].Alpha = byte.MaxValue;
			Palette[217].Red = 204;
			Palette[217].Green = byte.MaxValue;
			Palette[217].Blue = byte.MaxValue;
			Palette[217].Alpha = byte.MaxValue;
			Palette[218].Red = 0;
			Palette[218].Green = 127;
			Palette[218].Blue = 0;
			Palette[218].Alpha = byte.MaxValue;
			Palette[219].Red = 0;
			Palette[219].Green = 127;
			Palette[219].Blue = 85;
			Palette[219].Alpha = byte.MaxValue;
			Palette[220].Red = 0;
			Palette[220].Green = 127;
			Palette[220].Blue = 170;
			Palette[220].Alpha = byte.MaxValue;
			Palette[221].Red = 0;
			Palette[221].Green = 127;
			Palette[221].Blue = byte.MaxValue;
			Palette[221].Alpha = byte.MaxValue;
			Palette[222].Red = 0;
			Palette[222].Green = 159;
			Palette[222].Blue = 0;
			Palette[222].Alpha = byte.MaxValue;
			Palette[223].Red = 0;
			Palette[223].Green = 159;
			Palette[223].Blue = 85;
			Palette[223].Alpha = byte.MaxValue;
			Palette[224].Red = 0;
			Palette[224].Green = 159;
			Palette[224].Blue = 170;
			Palette[224].Alpha = byte.MaxValue;
			Palette[225].Red = 0;
			Palette[225].Green = 159;
			Palette[225].Blue = byte.MaxValue;
			Palette[225].Alpha = byte.MaxValue;
			Palette[226].Red = 0;
			Palette[226].Green = 191;
			Palette[226].Blue = 0;
			Palette[226].Alpha = byte.MaxValue;
			Palette[227].Red = 0;
			Palette[227].Green = 191;
			Palette[227].Blue = 85;
			Palette[227].Alpha = byte.MaxValue;
			Palette[228].Red = 0;
			Palette[228].Green = 191;
			Palette[228].Blue = 170;
			Palette[228].Alpha = byte.MaxValue;
			Palette[229].Red = 0;
			Palette[229].Green = 191;
			Palette[229].Blue = byte.MaxValue;
			Palette[229].Alpha = byte.MaxValue;
			Palette[230].Red = 0;
			Palette[230].Green = 223;
			Palette[230].Blue = 0;
			Palette[230].Alpha = byte.MaxValue;
			Palette[231].Red = 0;
			Palette[231].Green = 223;
			Palette[231].Blue = 85;
			Palette[231].Alpha = byte.MaxValue;
			Palette[232].Red = 0;
			Palette[232].Green = 223;
			Palette[232].Blue = 170;
			Palette[232].Alpha = byte.MaxValue;
			Palette[233].Red = 0;
			Palette[233].Green = 223;
			Palette[233].Blue = byte.MaxValue;
			Palette[233].Alpha = byte.MaxValue;
			Palette[234].Red = 0;
			Palette[234].Green = byte.MaxValue;
			Palette[234].Blue = 85;
			Palette[234].Alpha = byte.MaxValue;
			Palette[235].Red = 0;
			Palette[235].Green = byte.MaxValue;
			Palette[235].Blue = 170;
			Palette[235].Alpha = byte.MaxValue;
			Palette[236].Red = 42;
			Palette[236].Green = 0;
			Palette[236].Blue = 0;
			Palette[236].Alpha = byte.MaxValue;
			Palette[237].Red = 42;
			Palette[237].Green = 0;
			Palette[237].Blue = 85;
			Palette[237].Alpha = byte.MaxValue;
			Palette[238].Red = 42;
			Palette[238].Green = 0;
			Palette[238].Blue = 170;
			Palette[238].Alpha = byte.MaxValue;
			Palette[239].Red = 42;
			Palette[239].Green = 0;
			Palette[239].Blue = byte.MaxValue;
			Palette[239].Alpha = byte.MaxValue;
			Palette[240].Red = 42;
			Palette[240].Green = 31;
			Palette[240].Blue = 0;
			Palette[240].Alpha = byte.MaxValue;
			Palette[241].Red = 42;
			Palette[241].Green = 31;
			Palette[241].Blue = 85;
			Palette[241].Alpha = byte.MaxValue;
			Palette[242].Red = 42;
			Palette[242].Green = 31;
			Palette[242].Blue = 170;
			Palette[242].Alpha = byte.MaxValue;
			Palette[243].Red = 42;
			Palette[243].Green = 31;
			Palette[243].Blue = byte.MaxValue;
			Palette[243].Alpha = byte.MaxValue;
			Palette[244].Red = 42;
			Palette[244].Green = 63;
			Palette[244].Blue = 0;
			Palette[244].Alpha = byte.MaxValue;
			Palette[245].Red = 42;
			Palette[245].Green = 63;
			Palette[245].Blue = 85;
			Palette[245].Alpha = byte.MaxValue;
			Palette[246].Red = byte.MaxValue;
			Palette[246].Green = 251;
			Palette[246].Blue = 240;
			Palette[246].Alpha = byte.MaxValue;
			Palette[247].Red = 160;
			Palette[247].Green = 160;
			Palette[247].Blue = 164;
			Palette[247].Alpha = byte.MaxValue;
			Palette[248].Red = 128;
			Palette[248].Green = 128;
			Palette[248].Blue = 128;
			Palette[248].Alpha = byte.MaxValue;
			Palette[249].Red = byte.MaxValue;
			Palette[249].Green = 0;
			Palette[249].Blue = 0;
			Palette[249].Alpha = byte.MaxValue;
			Palette[250].Red = 0;
			Palette[250].Green = byte.MaxValue;
			Palette[250].Blue = 0;
			Palette[250].Alpha = byte.MaxValue;
			Palette[251].Red = byte.MaxValue;
			Palette[251].Green = byte.MaxValue;
			Palette[251].Blue = 0;
			Palette[251].Alpha = byte.MaxValue;
			Palette[252].Red = 0;
			Palette[252].Green = 0;
			Palette[252].Blue = byte.MaxValue;
			Palette[252].Alpha = byte.MaxValue;
			Palette[253].Red = byte.MaxValue;
			Palette[253].Green = 0;
			Palette[253].Blue = byte.MaxValue;
			Palette[253].Alpha = byte.MaxValue;
			Palette[254].Red = 0;
			Palette[254].Green = byte.MaxValue;
			Palette[254].Blue = byte.MaxValue;
			Palette[254].Alpha = byte.MaxValue;
			Palette[255].Red = byte.MaxValue;
			Palette[255].Green = byte.MaxValue;
			Palette[255].Blue = byte.MaxValue;
			Palette[255].Alpha = byte.MaxValue;
		}

		private unsafe void UpdateAllInfo()
		{
			int Amount = 0;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_GetConnectedComponents(canvas.ImageData, Labels, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Amount, Connected4.Checked ? 4 : 8);
			stopwatch.Stop();
			Bitmap bitmap = (Bitmap)PicShow.Image;
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			RGBQUAD[] Palette = new RGBQUAD[256];
			GetWindowsPalette(ref Palette);
			for (int i = 0; i < bitmapData.Height; i++)
			{
				byte* ptr = (byte*)(void*)bitmapData.Scan0 + i * bitmapData.Stride;
				int* ptr2 = Labels + i * bitmapData.Width;
				for (int j = 0; j < bitmapData.Width; j++)
				{
					int num = ptr2[j] % 256;
					*ptr = Palette[num].Blue;
					ptr[1] = Palette[num].Green;
					ptr[2] = Palette[num].Red;
					ptr += 3;
				}
			}
			bitmap.UnlockBits(bitmapData);
			stopwatch.Start();
			IM_GetShapePropertiesFromLabels(Labels, bitmapData.Width, bitmapData.Height, Amount, ref PS);
			stopwatch.Stop();
			Text = "åæè¿éåç¨æ¶:" + stopwatch.ElapsedMilliseconds + "ms";
			Graphics graphics = Graphics.FromImage(bitmap);
			ListResult.Items.Clear();
			for (int k = 1; k < PS.Amount; k++)
			{
				ListViewItem listViewItem = new ListViewItem();
				listViewItem.Text = k.ToString();
				listViewItem.SubItems.Add(PS.Properties[k].Area.ToString());
				IM_Rectangle boundRect = PS.Properties[k].BoundRect;
				string text = "(" + boundRect.Left + "," + boundRect.Top + ")-(" + (boundRect.Right - boundRect.Left + 1) + "," + (boundRect.Bottom - boundRect.Top + 1) + ")";
				listViewItem.SubItems.Add(text);
				IM_RotatedRect minAreaRect = PS.Properties[k].MinAreaRect;
				text = "(" + Math.Round(minAreaRect.Center.X, 2) + "," + Math.Round(minAreaRect.Center.Y, 2) + ")-(" + Math.Round(minAreaRect.Width, 2) + "," + Math.Round(minAreaRect.Height, 2) + ")-" + Math.Round(minAreaRect.Angle, 2);
				listViewItem.SubItems.Add(text);
				IM_Circle minEnclosingCircle = PS.Properties[k].MinEnclosingCircle;
				text = "(" + Math.Round(minEnclosingCircle.Center.X, 2) + "," + Math.Round(minEnclosingCircle.Center.Y, 2) + ")- " + Math.Round(minEnclosingCircle.Radius, 2);
				listViewItem.SubItems.Add(text);
				minEnclosingCircle = PS.Properties[k].MaxDisclosingCircle;
				text = "(" + Math.Round(minEnclosingCircle.Center.X, 2) + "," + Math.Round(minEnclosingCircle.Center.Y, 2) + ")- " + Math.Round(minEnclosingCircle.Radius, 2);
				listViewItem.SubItems.Add(text);
				listViewItem.SubItems.Add(Math.Round(PS.Properties[k].Convexity, 4).ToString());
				listViewItem.SubItems.Add(Math.Round(PS.Properties[k].InertiaRaio, 4).ToString());
				listViewItem.SubItems.Add(Math.Round(PS.Properties[k].Circularity, 4).ToString());
				listViewItem.SubItems.Add(Math.Round(PS.Properties[k].Rectangularity, 4).ToString());
				listViewItem.SubItems.Add(Math.Round(PS.Properties[k].Compactness, 4).ToString());
				ListResult.Items.Add(listViewItem);
				Color color = Color.FromArgb(255 - Palette[k % 256].Red, 255 - Palette[k % 256].Green, 255 - Palette[k % 256].Blue);
				IM_Rectangle boundRect2 = PS.Properties[k].BoundRect;
				text = k.ToString();
				SizeF sizeF = graphics.MeasureString(text, Font);
				graphics.DrawString(text, Font, new SolidBrush(color), (float)(boundRect2.Left + (boundRect2.Right - boundRect2.Left) / 2) - sizeF.Width / 2f, (float)(boundRect2.Top + (boundRect2.Bottom - boundRect2.Top) / 2) - sizeF.Height / 2f);
			}
			graphics.Dispose();
			PicShow.Refresh();
		}

		private unsafe void FrmInfo_Load(object sender, EventArgs e)
		{
			FrmInfo_Resize(sender, e);
			Labels = (int*)(void*)Marshal.AllocHGlobal(canvas.Image.Width * canvas.Image.Height * 4);
			PS = default(IM_ShapeSets);
			UpdateAllInfo();
		}

		private void FrmInfo_Resize(object sender, EventArgs e)
		{
			Panel.Width = base.Width - 32;
			Panel.Height = base.Height - 220;
			ListResult.Width = base.Width - GpConnected.Width - 40;
			ListResult.Top = base.Height - 190;
			GpConnected.Top = ListResult.Top;
		}

		private unsafe void FrmInfo_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (Labels != null)
			{
				Marshal.FreeHGlobal((IntPtr)Labels);
			}
			IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(PS));
			Marshal.StructureToPtr(PS, intPtr, fDeleteOld: false);
			IM_DeleteObject(intPtr);
		}

		private void PicShow_Click(object sender, EventArgs e)
		{
		}

		private unsafe void UpdateSelectedInfo(int I)
		{
			Bitmap bitmap = (Bitmap)PicShow.Image;
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			RGBQUAD[] Palette = new RGBQUAD[256];
			GetWindowsPalette(ref Palette);
			for (int i = 0; i < bitmapData.Height; i++)
			{
				byte* ptr = (byte*)(void*)bitmapData.Scan0 + i * bitmapData.Stride;
				int* ptr2 = Labels + i * bitmapData.Width;
				for (int j = 0; j < bitmapData.Width; j++)
				{
					int num = ptr2[j] % 256;
					*ptr = Palette[num].Blue;
					ptr[1] = Palette[num].Green;
					ptr[2] = Palette[num].Red;
					ptr += 3;
				}
			}
			bitmap.UnlockBits(bitmapData);
			Graphics graphics = Graphics.FromImage(bitmap);
			for (int k = 1; k < PS.Amount; k++)
			{
				Color color = Color.FromArgb(255 - Palette[k % 256].Red, 255 - Palette[k % 256].Green, 255 - Palette[k % 256].Blue);
				IM_Rectangle boundRect = PS.Properties[k].BoundRect;
				string s = k.ToString();
				SizeF sizeF = graphics.MeasureString(s, Font);
				graphics.DrawString(s, Font, new SolidBrush(color), (float)(boundRect.Left + (boundRect.Right - boundRect.Left) / 2) - sizeF.Width / 2f, (float)(boundRect.Top + (boundRect.Bottom - boundRect.Top) / 2) - sizeF.Height / 2f);
			}
			if (I >= 1 && I < PS.Amount)
			{
				if (!Locked)
				{
					ListResult.Items[I - 1].Selected = true;
				}
				IM_Rectangle boundRect2 = PS.Properties[I].BoundRect;
				Color color2 = Color.FromArgb(255 - Palette[I % 256].Red, 255 - Palette[I % 256].Green, 255 - Palette[I % 256].Blue);
				PointF[] array = new PointF[4];
				fixed (PointF* corners = array)
				{
					IM_GetRotatedRect_Corners(PS.Properties[I].MinAreaRect, corners);
				}
				graphics.DrawRectangle(new Pen(color2), boundRect2.Left, boundRect2.Top, boundRect2.Right - boundRect2.Left, boundRect2.Bottom - boundRect2.Top);
				float radius = PS.Properties[I].MinEnclosingCircle.Radius;
				graphics.DrawEllipse(new Pen(color2), new RectangleF(PS.Properties[I].MinEnclosingCircle.Center.X - radius, PS.Properties[I].MinEnclosingCircle.Center.Y - radius, radius * 2f, radius * 2f));
				graphics.DrawEllipse(new Pen(color2), new RectangleF(PS.Properties[I].MinEnclosingCircle.Center.X - 1f, PS.Properties[I].MinEnclosingCircle.Center.Y - 1f, 3f, 3f));
				radius = PS.Properties[I].MaxDisclosingCircle.Radius;
				graphics.DrawEllipse(new Pen(color2), new RectangleF(PS.Properties[I].MaxDisclosingCircle.Center.X - radius, PS.Properties[I].MaxDisclosingCircle.Center.Y - radius, radius * 2f, radius * 2f));
				graphics.DrawEllipse(new Pen(color2), new RectangleF(PS.Properties[I].MaxDisclosingCircle.Center.X - 1f, PS.Properties[I].MaxDisclosingCircle.Center.Y - 1f, 3f, 3f));
				graphics.DrawLine(new Pen(color2), PS.Properties[I].Center.X - 2f, PS.Properties[I].Center.Y - 2f, PS.Properties[I].Center.X + 2f, PS.Properties[I].Center.Y + 2f);
				graphics.DrawLine(new Pen(color2), PS.Properties[I].Center.X - 2f, PS.Properties[I].Center.Y + 2f, PS.Properties[I].Center.X + 2f, PS.Properties[I].Center.Y - 2f);
				for (int l = 0; l < 4; l++)
				{
					if (l != 3)
					{
						graphics.DrawLine(new Pen(color2), array[l].X, array[l].Y, array[l + 1].X, array[l + 1].Y);
					}
					else
					{
						graphics.DrawLine(new Pen(color2), array[l].X, array[l].Y, array[0].X, array[0].Y);
					}
				}
				IM_HullPoints hull = PS.Properties[I].Hull;
				for (int m = 0; m < hull.Amount; m++)
				{
					if (m != hull.Amount - 1)
					{
						graphics.DrawLine(new Pen(color2), hull.Pt[m].X, hull.Pt[m].Y, hull.Pt[m + 1].X, hull.Pt[m + 1].Y);
					}
					else
					{
						graphics.DrawLine(new Pen(color2), hull.Pt[m].X, hull.Pt[m].Y, hull.Pt->X, hull.Pt->Y);
					}
				}
			}
			graphics.Dispose();
			PicShow.Refresh();
		}

		private unsafe void PicShow_MouseDown(object sender, MouseEventArgs e)
		{
			int i = Labels[e.Location.Y * PicShow.Image.Width + e.Location.X];
			UpdateSelectedInfo(i);
		}

		private void ListResult_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void ListResult_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
		{
			if (!Locked)
			{
				Locked = true;
				UpdateSelectedInfo(e.ItemIndex + 1);
				Locked = false;
			}
		}

		private void Connected4_CheckedChanged(object sender, EventArgs e)
		{
			UpdateAllInfo();
		}

		private void Connected8_CheckedChanged(object sender, EventArgs e)
		{
			UpdateAllInfo();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.Panel = new System.Windows.Forms.Panel();
			this.PicShow = new System.Windows.Forms.PictureBox();
			this.GpConnected = new System.Windows.Forms.GroupBox();
			this.Connected8 = new System.Windows.Forms.RadioButton();
			this.Connected4 = new System.Windows.Forms.RadioButton();
			this.ListResult = new System.Windows.Forms.ListView();
			this.No = new System.Windows.Forms.ColumnHeader();
			this.Area = new System.Windows.Forms.ColumnHeader();
			this.BoundRect = new System.Windows.Forms.ColumnHeader();
			this.MinAreaRect = new System.Windows.Forms.ColumnHeader();
			this.MinClosingCircle = new System.Windows.Forms.ColumnHeader();
			this.Convexity = new System.Windows.Forms.ColumnHeader();
			this.InertiaRaio = new System.Windows.Forms.ColumnHeader();
			this.Circularity = new System.Windows.Forms.ColumnHeader();
			this.Rectangularity = new System.Windows.Forms.ColumnHeader();
			this.Compactness = new System.Windows.Forms.ColumnHeader();
			this.MaxDisclosingCircle = new System.Windows.Forms.ColumnHeader();
			this.Panel.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.PicShow).BeginInit();
			this.GpConnected.SuspendLayout();
			base.SuspendLayout();
			this.Panel.AutoScroll = true;
			this.Panel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.Panel.Controls.Add(this.PicShow);
			this.Panel.Location = new System.Drawing.Point(12, 16);
			this.Panel.Name = "Panel";
			this.Panel.Size = new System.Drawing.Size(1213, 620);
			this.Panel.TabIndex = 367;
			this.PicShow.Location = new System.Drawing.Point(17, 2);
			this.PicShow.Margin = new System.Windows.Forms.Padding(2);
			this.PicShow.Name = "PicShow";
			this.PicShow.Size = new System.Drawing.Size(800, 600);
			this.PicShow.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
			this.PicShow.TabIndex = 318;
			this.PicShow.TabStop = false;
			this.PicShow.Click += new System.EventHandler(PicShow_Click);
			this.PicShow.MouseDown += new System.Windows.Forms.MouseEventHandler(PicShow_MouseDown);
			this.GpConnected.Controls.Add(this.Connected8);
			this.GpConnected.Controls.Add(this.Connected4);
			this.GpConnected.Location = new System.Drawing.Point(12, 658);
			this.GpConnected.Name = "GpConnected";
			this.GpConnected.Size = new System.Drawing.Size(91, 144);
			this.GpConnected.TabIndex = 368;
			this.GpConnected.TabStop = false;
			this.GpConnected.Text = "éé¡¹";
			this.Connected8.AutoSize = true;
			this.Connected8.Location = new System.Drawing.Point(21, 60);
			this.Connected8.Margin = new System.Windows.Forms.Padding(2);
			this.Connected8.Name = "Connected8";
			this.Connected8.Size = new System.Drawing.Size(53, 16);
			this.Connected8.TabIndex = 7;
			this.Connected8.Text = "8é¢å";
			this.Connected8.UseVisualStyleBackColor = true;
			this.Connected8.CheckedChanged += new System.EventHandler(Connected8_CheckedChanged);
			this.Connected4.AutoSize = true;
			this.Connected4.Checked = true;
			this.Connected4.Location = new System.Drawing.Point(21, 29);
			this.Connected4.Margin = new System.Windows.Forms.Padding(2);
			this.Connected4.Name = "Connected4";
			this.Connected4.Size = new System.Drawing.Size(53, 16);
			this.Connected4.TabIndex = 6;
			this.Connected4.TabStop = true;
			this.Connected4.Text = "4é¢å";
			this.Connected4.UseVisualStyleBackColor = true;
			this.Connected4.CheckedChanged += new System.EventHandler(Connected4_CheckedChanged);
			this.ListResult.AllowColumnReorder = true;
			this.ListResult.Columns.AddRange(new System.Windows.Forms.ColumnHeader[11]
			{
				this.No, this.Area, this.BoundRect, this.MinAreaRect, this.MinClosingCircle, this.MaxDisclosingCircle, this.Convexity, this.InertiaRaio, this.Circularity, this.Rectangularity,
				this.Compactness
			});
			this.ListResult.FullRowSelect = true;
			this.ListResult.GridLines = true;
			this.ListResult.HeaderStyle = System.Windows.Forms.ColumnHeaderStyle.Nonclickable;
			this.ListResult.HideSelection = false;
			this.ListResult.Location = new System.Drawing.Point(109, 658);
			this.ListResult.MultiSelect = false;
			this.ListResult.Name = "ListResult";
			this.ListResult.Size = new System.Drawing.Size(1116, 144);
			this.ListResult.TabIndex = 369;
			this.ListResult.UseCompatibleStateImageBehavior = false;
			this.ListResult.View = System.Windows.Forms.View.Details;
			this.ListResult.ItemSelectionChanged += new System.Windows.Forms.ListViewItemSelectionChangedEventHandler(ListResult_ItemSelectionChanged);
			this.ListResult.SelectedIndexChanged += new System.EventHandler(ListResult_SelectedIndexChanged);
			this.No.Text = "åºå·";
			this.No.Width = 45;
			this.Area.Text = "é¢ç§¯";
			this.Area.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.Area.Width = 50;
			this.BoundRect.Text = "å¤æ¥è¾¹æ¡ä½ç½®";
			this.BoundRect.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.BoundRect.Width = 150;
			this.MinAreaRect.Text = "æå°å¤æ¥ç©å½¢";
			this.MinAreaRect.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.MinAreaRect.Width = 200;
			this.MinClosingCircle.Text = "æå°å¤æ¥å";
			this.MinClosingCircle.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.MinClosingCircle.Width = 150;
			this.Convexity.Text = "å¸åº¦";
			this.Convexity.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.InertiaRaio.Text = "æ¯æ§ç";
			this.InertiaRaio.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.InertiaRaio.Width = 70;
			this.Circularity.Text = "ååº¦";
			this.Circularity.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.Rectangularity.Text = "ç©å½¢åº¦";
			this.Rectangularity.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.Compactness.Text = "ç´§å¯åº¦";
			this.Compactness.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.MaxDisclosingCircle.Text = "æå¤§åæ¥å";
			this.MaxDisclosingCircle.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
			this.MaxDisclosingCircle.Width = 150;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(1242, 813);
			base.Controls.Add(this.ListResult);
			base.Controls.Add(this.GpConnected);
			base.Controls.Add(this.Panel);
			base.Margin = new System.Windows.Forms.Padding(2);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmInfo";
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "ç»æä¿¡æ¯";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(FrmInfo_FormClosing);
			base.Load += new System.EventHandler(FrmInfo_Load);
			base.Resize += new System.EventHandler(FrmInfo_Resize);
			this.Panel.ResumeLayout(false);
			this.Panel.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.PicShow).EndInit();
			this.GpConnected.ResumeLayout(false);
			this.GpConnected.PerformLayout();
			base.ResumeLayout(false);
		}
	}
	public class FrmLineGauss : Form
	{
		private bool Locked;

		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown SigmaUpDown;

		private Label Label1;

		private NumericUpDown LowUpDown;

		private Label label2;

		private NumericUpDown ContrastUpDown;

		private Label label5;

		public NumericUpDown LineWidthUpDown;

		private Label label6;

		private Label label4;

		private RadioButton OptDark;

		private RadioButton OptLight;

		private NumericUpDown HighUpDown;

		private Label label3;

		private CheckBox ChkAutoCalc;

		private CheckBox ChkPreview;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LinesGauss(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, float Low, float High, int LightDark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Calculate_Lines_Gauss_Parameters(int MaxLineWidth, int Contrast, ref float Sigma, ref float Low, ref float High);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe FrmLineGauss(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (!Busy)
				{
					Busy = true;
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					IM_LinesGauss(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)SigmaUpDown.Value, (float)LowUpDown.Value, (float)HighUpDown.Value, (!OptLight.Checked) ? 1 : 0);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
					Busy = false;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		public unsafe FrmLineGauss()
		{
			InitializeComponent();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkAutoCalc_CheckedChanged(object sender, EventArgs e)
		{
			if (ChkAutoCalc.Checked)
			{
				float Sigma = 0f;
				float Low = 0f;
				float High = 0f;
				NumericUpDown lineWidthUpDown = LineWidthUpDown;
				bool enabled = (ContrastUpDown.Enabled = true);
				lineWidthUpDown.Enabled = enabled;
				NumericUpDown sigmaUpDown = SigmaUpDown;
				NumericUpDown lowUpDown = LowUpDown;
				bool flag3 = (HighUpDown.Enabled = false);
				enabled = (lowUpDown.Enabled = flag3);
				sigmaUpDown.Enabled = enabled;
				IM_Calculate_Lines_Gauss_Parameters((int)LineWidthUpDown.Value, (int)ContrastUpDown.Value, ref Sigma, ref Low, ref High);
				SigmaUpDown.Value = (decimal)Sigma;
				LowUpDown.Value = (decimal)Low;
				HighUpDown.Value = (decimal)High;
			}
			else
			{
				NumericUpDown lineWidthUpDown2 = LineWidthUpDown;
				bool enabled = (ContrastUpDown.Enabled = false);
				lineWidthUpDown2.Enabled = enabled;
				NumericUpDown sigmaUpDown2 = SigmaUpDown;
				NumericUpDown lowUpDown2 = LowUpDown;
				bool flag3 = (HighUpDown.Enabled = true);
				enabled = (lowUpDown2.Enabled = flag3);
				sigmaUpDown2.Enabled = enabled;
			}
		}

		private void FrmLineGauss_Load(object sender, EventArgs e)
		{
			Locked = true;
			ChkAutoCalc_CheckedChanged(sender, e);
			UpdateCanvas();
			Locked = false;
		}

		private void LineWidthUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (ChkAutoCalc.Checked)
			{
				Locked = true;
				float Sigma = 0f;
				float Low = 0f;
				float High = 0f;
				IM_Calculate_Lines_Gauss_Parameters((int)LineWidthUpDown.Value, (int)ContrastUpDown.Value, ref Sigma, ref Low, ref High);
				SigmaUpDown.Value = (decimal)Sigma;
				LowUpDown.Value = (decimal)Low;
				HighUpDown.Value = (decimal)High;
				Locked = false;
				UpdateCanvas();
			}
		}

		private void ContrastUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (ChkAutoCalc.Checked)
			{
				Locked = true;
				float Sigma = 0f;
				float Low = 0f;
				float High = 0f;
				IM_Calculate_Lines_Gauss_Parameters((int)LineWidthUpDown.Value, (int)ContrastUpDown.Value, ref Sigma, ref Low, ref High);
				SigmaUpDown.Value = (decimal)Sigma;
				LowUpDown.Value = (decimal)Low;
				HighUpDown.Value = (decimal)High;
				Locked = false;
				UpdateCanvas();
			}
		}

		private void OptLight_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptDark_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void SigmaUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private void LowUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private void HighUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private unsafe void FrmLineGauss_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.ChkAutoCalc = new System.Windows.Forms.CheckBox();
			this.ContrastUpDown = new System.Windows.Forms.NumericUpDown();
			this.label5 = new System.Windows.Forms.Label();
			this.LineWidthUpDown = new System.Windows.Forms.NumericUpDown();
			this.label6 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.OptDark = new System.Windows.Forms.RadioButton();
			this.OptLight = new System.Windows.Forms.RadioButton();
			this.HighUpDown = new System.Windows.Forms.NumericUpDown();
			this.label3 = new System.Windows.Forms.Label();
			this.LowUpDown = new System.Windows.Forms.NumericUpDown();
			this.label2 = new System.Windows.Forms.Label();
			this.SigmaUpDown = new System.Windows.Forms.NumericUpDown();
			this.Label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.ContrastUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.LineWidthUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.LowUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.SigmaUpDown).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(290, 62);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 24;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(290, 26);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 23;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.ChkAutoCalc);
			this.groupBox.Controls.Add(this.ContrastUpDown);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.LineWidthUpDown);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.OptDark);
			this.groupBox.Controls.Add(this.OptLight);
			this.groupBox.Controls.Add(this.HighUpDown);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.LowUpDown);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.SigmaUpDown);
			this.groupBox.Controls.Add(this.Label1);
			this.groupBox.Location = new System.Drawing.Point(2, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(272, 227);
			this.groupBox.TabIndex = 25;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.ChkAutoCalc.AutoSize = true;
			this.ChkAutoCalc.Checked = true;
			this.ChkAutoCalc.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkAutoCalc.Location = new System.Drawing.Point(8, 195);
			this.ChkAutoCalc.Name = "ChkAutoCalc";
			this.ChkAutoCalc.Size = new System.Drawing.Size(204, 16);
			this.ChkAutoCalc.TabIndex = 26;
			this.ChkAutoCalc.Text = "ç±æå¤§çº¿å®½åå¯¹æ¯åº¦èªå¨è®¡ç®åæ°";
			this.ChkAutoCalc.UseVisualStyleBackColor = true;
			this.ChkAutoCalc.CheckedChanged += new System.EventHandler(ChkAutoCalc_CheckedChanged);
			this.ContrastUpDown.Location = new System.Drawing.Point(101, 160);
			this.ContrastUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.ContrastUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.ContrastUpDown.Name = "ContrastUpDown";
			this.ContrastUpDown.Size = new System.Drawing.Size(61, 21);
			this.ContrastUpDown.TabIndex = 16;
			this.ContrastUpDown.Value = new decimal(new int[4] { 50, 0, 0, 0 });
			this.ContrastUpDown.ValueChanged += new System.EventHandler(ContrastUpDown_ValueChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(6, 162);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(59, 12);
			this.label5.TabIndex = 17;
			this.label5.Text = "Contrast:";
			this.LineWidthUpDown.Location = new System.Drawing.Point(101, 133);
			this.LineWidthUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.LineWidthUpDown.Name = "LineWidthUpDown";
			this.LineWidthUpDown.Size = new System.Drawing.Size(61, 21);
			this.LineWidthUpDown.TabIndex = 14;
			this.LineWidthUpDown.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.LineWidthUpDown.ValueChanged += new System.EventHandler(LineWidthUpDown_ValueChanged);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(6, 133);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(77, 12);
			this.label6.TabIndex = 15;
			this.label6.Text = "Line Widthï¼";
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(10, 111);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(257, 12);
			this.label4.TabIndex = 13;
			this.label4.Text = "__________________________________________";
			this.OptDark.AutoSize = true;
			this.OptDark.Location = new System.Drawing.Point(182, 54);
			this.OptDark.Name = "OptDark";
			this.OptDark.Size = new System.Drawing.Size(83, 16);
			this.OptDark.TabIndex = 12;
			this.OptDark.Text = "æåæçº¿æ¡";
			this.OptDark.UseVisualStyleBackColor = true;
			this.OptDark.CheckedChanged += new System.EventHandler(OptDark_CheckedChanged);
			this.OptLight.AutoSize = true;
			this.OptLight.Checked = true;
			this.OptLight.Location = new System.Drawing.Point(182, 29);
			this.OptLight.Name = "OptLight";
			this.OptLight.Size = new System.Drawing.Size(83, 16);
			this.OptLight.TabIndex = 11;
			this.OptLight.TabStop = true;
			this.OptLight.Text = "æåäº®çº¿æ¡";
			this.OptLight.UseVisualStyleBackColor = true;
			this.OptLight.CheckedChanged += new System.EventHandler(OptLight_CheckedChanged);
			this.HighUpDown.DecimalPlaces = 3;
			this.HighUpDown.Enabled = false;
			this.HighUpDown.Increment = new decimal(new int[4] { 1, 0, 0, 196608 });
			this.HighUpDown.Location = new System.Drawing.Point(101, 83);
			this.HighUpDown.Maximum = new decimal(new int[4] { 20, 0, 0, 0 });
			this.HighUpDown.Name = "HighUpDown";
			this.HighUpDown.Size = new System.Drawing.Size(61, 21);
			this.HighUpDown.TabIndex = 10;
			this.HighUpDown.Value = new decimal(new int[4] { 30, 0, 0, 65536 });
			this.HighUpDown.ValueChanged += new System.EventHandler(HighUpDown_ValueChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 88);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(95, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "High Threshold:";
			this.LowUpDown.DecimalPlaces = 3;
			this.LowUpDown.Enabled = false;
			this.LowUpDown.Increment = new decimal(new int[4] { 1, 0, 0, 196608 });
			this.LowUpDown.Location = new System.Drawing.Point(101, 56);
			this.LowUpDown.Maximum = new decimal(new int[4] { 20, 0, 0, 0 });
			this.LowUpDown.Name = "LowUpDown";
			this.LowUpDown.Size = new System.Drawing.Size(61, 21);
			this.LowUpDown.TabIndex = 7;
			this.LowUpDown.Value = new decimal(new int[4] { 10, 0, 0, 65536 });
			this.LowUpDown.ValueChanged += new System.EventHandler(LowUpDown_ValueChanged);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 58);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(89, 12);
			this.label2.TabIndex = 8;
			this.label2.Text = "Low Threshold:";
			this.SigmaUpDown.DecimalPlaces = 3;
			this.SigmaUpDown.Enabled = false;
			this.SigmaUpDown.Increment = new decimal(new int[4] { 1, 0, 0, 196608 });
			this.SigmaUpDown.Location = new System.Drawing.Point(101, 29);
			this.SigmaUpDown.Name = "SigmaUpDown";
			this.SigmaUpDown.Size = new System.Drawing.Size(61, 21);
			this.SigmaUpDown.TabIndex = 4;
			this.SigmaUpDown.Value = new decimal(new int[4] { 1500, 0, 0, 196608 });
			this.SigmaUpDown.ValueChanged += new System.EventHandler(SigmaUpDown_ValueChanged);
			this.Label1.AutoSize = true;
			this.Label1.Location = new System.Drawing.Point(6, 29);
			this.Label1.Name = "Label1";
			this.Label1.Size = new System.Drawing.Size(47, 12);
			this.Label1.TabIndex = 5;
			this.Label1.Text = "Sigmaï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(290, 110);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 26;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(357, 251);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.Margin = new System.Windows.Forms.Padding(2);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmLineGauss";
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "LineGauss";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(FrmLineGauss_FormClosing);
			base.Load += new System.EventHandler(FrmLineGauss_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.ContrastUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.LineWidthUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.LowUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.SigmaUpDown).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class FrmTonemapFarbman : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private CheckBox ChkPreview;

		private NumericUpDown Saturation;

		private Label label11;

		private NumericUpDown Exposure;

		private Label label10;

		private NumericUpDown Gamma;

		private Label label9;

		private NumericUpDown A6;

		private Label label8;

		private NumericUpDown A5;

		private Label label7;

		private NumericUpDown A4;

		private Label label6;

		private Label label1;

		private NumericUpDown A3;

		private NumericUpDown NumberOfScales;

		private Label label5;

		private Label label2;

		private NumericUpDown A2;

		private Label label3;

		private Label label4;

		private NumericUpDown A1;

		private Button CmdRefresh;

		private CheckBox ChkFastMode;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Tonemapfarbman(byte* Src, byte* Dest, int Width, int Height, int Stride, int NumberOfScales, float* Weights, float Gamma, float Exposure, bool FastMode);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe FrmTonemapFarbman(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (!Busy)
				{
					Busy = true;
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					float* ptr = (float*)(void*)Marshal.AllocHGlobal(24);
					Convert.ToInt32(NumberOfScales.Value);
					*ptr = Convert.ToSingle(A1.Value);
					ptr[1] = Convert.ToSingle(A2.Value);
					ptr[2] = Convert.ToSingle(A3.Value);
					ptr[3] = Convert.ToSingle(A4.Value);
					ptr[4] = Convert.ToSingle(A5.Value);
					ptr[5] = Convert.ToSingle(A6.Value);
					IM_Tonemapfarbman(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)NumberOfScales.Value, ptr, (float)Gamma.Value, (float)Exposure.Value, ChkFastMode.Checked);
					Marshal.FreeHGlobal((IntPtr)ptr);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
					Busy = false;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void FrmTonemapFarbman_Load(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void FrmTonemapFarbman_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void CmdRefresh_Click(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkFastMode_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.Saturation = new System.Windows.Forms.NumericUpDown();
			this.label11 = new System.Windows.Forms.Label();
			this.Exposure = new System.Windows.Forms.NumericUpDown();
			this.label10 = new System.Windows.Forms.Label();
			this.Gamma = new System.Windows.Forms.NumericUpDown();
			this.label9 = new System.Windows.Forms.Label();
			this.A6 = new System.Windows.Forms.NumericUpDown();
			this.label8 = new System.Windows.Forms.Label();
			this.A5 = new System.Windows.Forms.NumericUpDown();
			this.label7 = new System.Windows.Forms.Label();
			this.A4 = new System.Windows.Forms.NumericUpDown();
			this.label6 = new System.Windows.Forms.Label();
			this.label1 = new System.Windows.Forms.Label();
			this.A3 = new System.Windows.Forms.NumericUpDown();
			this.NumberOfScales = new System.Windows.Forms.NumericUpDown();
			this.label5 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.A2 = new System.Windows.Forms.NumericUpDown();
			this.label3 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.A1 = new System.Windows.Forms.NumericUpDown();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.CmdRefresh = new System.Windows.Forms.Button();
			this.ChkFastMode = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Saturation).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Exposure).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Gamma).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A6).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A5).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A4).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A3).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.NumberOfScales).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A2).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.A1).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(459, 127);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(111, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(459, 79);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(111, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.Saturation);
			this.groupBox.Controls.Add(this.label11);
			this.groupBox.Controls.Add(this.Exposure);
			this.groupBox.Controls.Add(this.label10);
			this.groupBox.Controls.Add(this.Gamma);
			this.groupBox.Controls.Add(this.label9);
			this.groupBox.Controls.Add(this.A6);
			this.groupBox.Controls.Add(this.label8);
			this.groupBox.Controls.Add(this.A5);
			this.groupBox.Controls.Add(this.label7);
			this.groupBox.Controls.Add(this.A4);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Controls.Add(this.A3);
			this.groupBox.Controls.Add(this.NumberOfScales);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.A2);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.A1);
			this.groupBox.Location = new System.Drawing.Point(13, 13);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4);
			this.groupBox.Size = new System.Drawing.Size(427, 391);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.Saturation.DecimalPlaces = 2;
			this.Saturation.Enabled = false;
			this.Saturation.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Saturation.Location = new System.Drawing.Point(237, 332);
			this.Saturation.Margin = new System.Windows.Forms.Padding(4);
			this.Saturation.Maximum = new decimal(new int[4] { 50, 0, 0, 65536 });
			this.Saturation.Name = "Saturation";
			this.Saturation.Size = new System.Drawing.Size(162, 28);
			this.Saturation.TabIndex = 50;
			this.Saturation.Value = new decimal(new int[4] { 16, 0, 0, 65536 });
			this.label11.AutoSize = true;
			this.label11.Enabled = false;
			this.label11.Location = new System.Drawing.Point(28, 332);
			this.label11.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label11.Name = "label11";
			this.label11.Size = new System.Drawing.Size(107, 18);
			this.label11.TabIndex = 49;
			this.label11.Text = "Saturation:";
			this.Exposure.DecimalPlaces = 2;
			this.Exposure.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Exposure.Location = new System.Drawing.Point(237, 284);
			this.Exposure.Margin = new System.Windows.Forms.Padding(4);
			this.Exposure.Maximum = new decimal(new int[4] { 50, 0, 0, 65536 });
			this.Exposure.Name = "Exposure";
			this.Exposure.Size = new System.Drawing.Size(162, 28);
			this.Exposure.TabIndex = 48;
			this.Exposure.Value = new decimal(new int[4] { 3, 0, 0, 0 });
			this.label10.AutoSize = true;
			this.label10.Location = new System.Drawing.Point(28, 284);
			this.label10.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label10.Name = "label10";
			this.label10.Size = new System.Drawing.Size(89, 18);
			this.label10.TabIndex = 47;
			this.label10.Text = "Exposure:";
			this.Gamma.DecimalPlaces = 2;
			this.Gamma.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Gamma.Location = new System.Drawing.Point(237, 233);
			this.Gamma.Margin = new System.Windows.Forms.Padding(4);
			this.Gamma.Maximum = new decimal(new int[4] { 10, 0, 0, 65536 });
			this.Gamma.Minimum = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Gamma.Name = "Gamma";
			this.Gamma.Size = new System.Drawing.Size(162, 28);
			this.Gamma.TabIndex = 46;
			this.Gamma.Value = new decimal(new int[4] { 5, 0, 0, 65536 });
			this.label9.AutoSize = true;
			this.label9.Location = new System.Drawing.Point(28, 235);
			this.label9.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label9.Name = "label9";
			this.label9.Size = new System.Drawing.Size(179, 18);
			this.label9.TabIndex = 45;
			this.label9.Text = "Range Compressionï¼";
			this.A6.DecimalPlaces = 2;
			this.A6.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A6.Location = new System.Drawing.Point(326, 172);
			this.A6.Margin = new System.Windows.Forms.Padding(4);
			this.A6.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A6.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A6.Name = "A6";
			this.A6.Size = new System.Drawing.Size(73, 28);
			this.A6.TabIndex = 44;
			this.A6.Value = new decimal(new int[4] { 10, 0, 0, 65536 });
			this.label8.AutoSize = true;
			this.label8.Location = new System.Drawing.Point(293, 176);
			this.label8.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label8.Name = "label8";
			this.label8.Size = new System.Drawing.Size(17, 18);
			this.label8.TabIndex = 43;
			this.label8.Text = "6";
			this.A5.DecimalPlaces = 2;
			this.A5.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A5.Location = new System.Drawing.Point(193, 170);
			this.A5.Margin = new System.Windows.Forms.Padding(4);
			this.A5.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A5.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A5.Name = "A5";
			this.A5.Size = new System.Drawing.Size(73, 28);
			this.A5.TabIndex = 42;
			this.A5.Value = new decimal(new int[4] { 15, 0, 0, 65536 });
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(160, 174);
			this.label7.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(17, 18);
			this.label7.TabIndex = 41;
			this.label7.Text = "5";
			this.A4.DecimalPlaces = 2;
			this.A4.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A4.Location = new System.Drawing.Point(61, 172);
			this.A4.Margin = new System.Windows.Forms.Padding(4);
			this.A4.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A4.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A4.Name = "A4";
			this.A4.Size = new System.Drawing.Size(73, 28);
			this.A4.TabIndex = 40;
			this.A4.Value = new decimal(new int[4] { 2, 0, 0, 0 });
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(28, 176);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(17, 18);
			this.label6.TabIndex = 39;
			this.label6.Text = "4";
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(28, 40);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(170, 18);
			this.label1.TabIndex = 31;
			this.label1.Text = "Number Of Scalesï¼";
			this.A3.DecimalPlaces = 2;
			this.A3.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A3.Location = new System.Drawing.Point(326, 122);
			this.A3.Margin = new System.Windows.Forms.Padding(4);
			this.A3.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A3.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A3.Name = "A3";
			this.A3.Size = new System.Drawing.Size(73, 28);
			this.A3.TabIndex = 38;
			this.A3.Value = new decimal(new int[4] { 25, 0, 0, 65536 });
			this.NumberOfScales.Location = new System.Drawing.Point(237, 38);
			this.NumberOfScales.Margin = new System.Windows.Forms.Padding(4);
			this.NumberOfScales.Maximum = new decimal(new int[4] { 6, 0, 0, 0 });
			this.NumberOfScales.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.NumberOfScales.Name = "NumberOfScales";
			this.NumberOfScales.Size = new System.Drawing.Size(162, 28);
			this.NumberOfScales.TabIndex = 30;
			this.NumberOfScales.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(293, 126);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(17, 18);
			this.label5.TabIndex = 37;
			this.label5.Text = "3";
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(28, 88);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(89, 18);
			this.label2.TabIndex = 32;
			this.label2.Text = "Weightsï¼";
			this.A2.DecimalPlaces = 2;
			this.A2.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A2.Location = new System.Drawing.Point(192, 122);
			this.A2.Margin = new System.Windows.Forms.Padding(4);
			this.A2.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A2.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A2.Name = "A2";
			this.A2.Size = new System.Drawing.Size(73, 28);
			this.A2.TabIndex = 36;
			this.A2.Value = new decimal(new int[4] { 3, 0, 0, 0 });
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(28, 126);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(17, 18);
			this.label3.TabIndex = 33;
			this.label3.Text = "1";
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(159, 126);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(17, 18);
			this.label4.TabIndex = 35;
			this.label4.Text = "2";
			this.A1.DecimalPlaces = 2;
			this.A1.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.A1.Location = new System.Drawing.Point(61, 122);
			this.A1.Margin = new System.Windows.Forms.Padding(4);
			this.A1.Maximum = new decimal(new int[4] { 100, 0, 0, 65536 });
			this.A1.Minimum = new decimal(new int[4] { 1, 0, 0, 65536 });
			this.A1.Name = "A1";
			this.A1.Size = new System.Drawing.Size(73, 28);
			this.A1.TabIndex = 34;
			this.A1.Value = new decimal(new int[4] { 35, 0, 0, 65536 });
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(459, 244);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.CmdRefresh.Location = new System.Drawing.Point(459, 31);
			this.CmdRefresh.Margin = new System.Windows.Forms.Padding(4);
			this.CmdRefresh.Name = "CmdRefresh";
			this.CmdRefresh.Size = new System.Drawing.Size(111, 40);
			this.CmdRefresh.TabIndex = 18;
			this.CmdRefresh.Text = "æ´æ°ç»æ";
			this.CmdRefresh.UseVisualStyleBackColor = true;
			this.CmdRefresh.Click += new System.EventHandler(CmdRefresh_Click);
			this.ChkFastMode.AutoSize = true;
			this.ChkFastMode.Checked = true;
			this.ChkFastMode.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkFastMode.Location = new System.Drawing.Point(459, 200);
			this.ChkFastMode.Margin = new System.Windows.Forms.Padding(4);
			this.ChkFastMode.Name = "ChkFastMode";
			this.ChkFastMode.Size = new System.Drawing.Size(106, 22);
			this.ChkFastMode.TabIndex = 19;
			this.ChkFastMode.Text = "å¿«éæ¨¡å¼";
			this.ChkFastMode.UseVisualStyleBackColor = true;
			this.ChkFastMode.CheckedChanged += new System.EventHandler(ChkFastMode_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(585, 420);
			base.Controls.Add(this.ChkFastMode);
			base.Controls.Add(this.CmdRefresh);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmTonemapFarbman";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "å¤å°ºåº¦HDR";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(FrmTonemapFarbman_FormClosing);
			base.Load += new System.EventHandler(FrmTonemapFarbman_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Saturation).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Exposure).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Gamma).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A6).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A5).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A4).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A3).EndInit();
			((System.ComponentModel.ISupportInitialize)this.NumberOfScales).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A2).EndInit();
			((System.ComponentModel.ISupportInitialize)this.A1).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class ShadowAndHighlightDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Locked;

		private IContainer components;

		private Label label5;

		private NumericUpDown HighlightRadiusUpDown;

		private Label label6;

		private NumericUpDown ShadowAmountUpDown;

		private NumericUpDown ShadowWidthUpDown;

		private TrackBar ShadowWidth;

		private Label label3;

		private TrackBar ShadowAmount;

		private Label label2;

		private NumericUpDown ShadowRadiusUpDown;

		private TrackBar ShadowRadius;

		private NumericUpDown HighlightWidthUpDown;

		private TrackBar HighlightWidth;

		private Label label4;

		private TrackBar HighLightAmount;

		private Label label1;

		private GroupBox groupBox1;

		private NumericUpDown HighLightAmountUpDown;

		private TrackBar HighlightRadius;

		private CheckBox ChkPreview;

		private Button btnOk;

		private GroupBox groupBox;

		private Button btnCancel;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdjustShadowAndHighlight(byte* Src, byte* Dest, int Width, int Height, int Stride, int ShadowAmount, int ShadowRadius, int ShadowWidth, int HighlightAmount, int HighlightRadius, int HighlightWidth);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe ShadowAndHighlightDialog()
		{
			InitializeComponent();
		}

		public unsafe ShadowAndHighlightDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (Text.Equals("æè°é«å"))
				{
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					IM_AdjustShadowAndHighlight(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ShadowAmount.Value, ShadowRadius.Value, ShadowWidth.Value, HighLightAmount.Value, HighlightRadius.Value, HighlightWidth.Value);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ShadowAndHighlightDialog_Load(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void ShadowAndHighlightDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void ShadowAmount_Scroll(object sender, EventArgs e)
		{
			ShadowAmountUpDown.Value = ShadowAmount.Value;
		}

		private void ShadowAmountUpDown_ValueChanged(object sender, EventArgs e)
		{
			ShadowAmount.Value = (int)ShadowAmountUpDown.Value;
			UpdateCanvas();
		}

		private void ShadowRadius_Scroll(object sender, EventArgs e)
		{
			ShadowRadiusUpDown.Value = ShadowRadius.Value;
		}

		private void ShadowRadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			ShadowRadius.Value = (int)ShadowRadiusUpDown.Value;
			UpdateCanvas();
		}

		private void ShadowWidth_Scroll(object sender, EventArgs e)
		{
			ShadowWidthUpDown.Value = ShadowWidth.Value;
		}

		private void ShadowWidthUpDown_ValueChanged(object sender, EventArgs e)
		{
			ShadowWidth.Value = (int)ShadowWidthUpDown.Value;
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.label5 = new System.Windows.Forms.Label();
			this.HighlightRadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.label6 = new System.Windows.Forms.Label();
			this.ShadowAmountUpDown = new System.Windows.Forms.NumericUpDown();
			this.ShadowWidthUpDown = new System.Windows.Forms.NumericUpDown();
			this.ShadowWidth = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.ShadowAmount = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.ShadowRadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.ShadowRadius = new System.Windows.Forms.TrackBar();
			this.HighlightWidthUpDown = new System.Windows.Forms.NumericUpDown();
			this.HighlightWidth = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.HighLightAmount = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.HighLightAmountUpDown = new System.Windows.Forms.NumericUpDown();
			this.HighlightRadius = new System.Windows.Forms.TrackBar();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.btnCancel = new System.Windows.Forms.Button();
			((System.ComponentModel.ISupportInitialize)this.HighlightRadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowAmountUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowWidthUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowWidth).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowAmount).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowRadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowRadius).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightWidthUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightWidth).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighLightAmount).BeginInit();
			this.groupBox1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.HighLightAmountUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightRadius).BeginInit();
			this.groupBox.SuspendLayout();
			base.SuspendLayout();
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(6, 24);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(41, 12);
			this.label5.TabIndex = 6;
			this.label5.Text = "æ°éï¼";
			this.HighlightRadiusUpDown.Location = new System.Drawing.Point(250, 86);
			this.HighlightRadiusUpDown.Maximum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.HighlightRadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.HighlightRadiusUpDown.Name = "HighlightRadiusUpDown";
			this.HighlightRadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.HighlightRadiusUpDown.TabIndex = 4;
			this.HighlightRadiusUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(6, 88);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(41, 12);
			this.label6.TabIndex = 5;
			this.label6.Text = "åå¾ï¼";
			this.ShadowAmountUpDown.Location = new System.Drawing.Point(250, 22);
			this.ShadowAmountUpDown.Maximum = new decimal(new int[4] { 500, 0, 0, 0 });
			this.ShadowAmountUpDown.Minimum = new decimal(new int[4] { 500, 0, 0, -2147483648 });
			this.ShadowAmountUpDown.Name = "ShadowAmountUpDown";
			this.ShadowAmountUpDown.Size = new System.Drawing.Size(50, 21);
			this.ShadowAmountUpDown.TabIndex = 8;
			this.ShadowAmountUpDown.Value = new decimal(new int[4] { 200, 0, 0, 0 });
			this.ShadowAmountUpDown.ValueChanged += new System.EventHandler(ShadowAmountUpDown_ValueChanged);
			this.ShadowWidthUpDown.Location = new System.Drawing.Point(250, 152);
			this.ShadowWidthUpDown.Name = "ShadowWidthUpDown";
			this.ShadowWidthUpDown.Size = new System.Drawing.Size(50, 21);
			this.ShadowWidthUpDown.TabIndex = 11;
			this.ShadowWidthUpDown.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.ShadowWidthUpDown.ValueChanged += new System.EventHandler(ShadowWidthUpDown_ValueChanged);
			this.ShadowWidth.AutoSize = false;
			this.ShadowWidth.LargeChange = 2;
			this.ShadowWidth.Location = new System.Drawing.Point(8, 181);
			this.ShadowWidth.Maximum = 100;
			this.ShadowWidth.Name = "ShadowWidth";
			this.ShadowWidth.Size = new System.Drawing.Size(292, 26);
			this.ShadowWidth.TabIndex = 10;
			this.ShadowWidth.TickFrequency = 0;
			this.ShadowWidth.Value = 30;
			this.ShadowWidth.Scroll += new System.EventHandler(ShadowWidth_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 154);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(95, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "è²è°å®½åº¦ï¼%ï¼ï¼";
			this.ShadowAmount.AutoSize = false;
			this.ShadowAmount.LargeChange = 2;
			this.ShadowAmount.Location = new System.Drawing.Point(8, 53);
			this.ShadowAmount.Maximum = 500;
			this.ShadowAmount.Minimum = -500;
			this.ShadowAmount.Name = "ShadowAmount";
			this.ShadowAmount.Size = new System.Drawing.Size(292, 26);
			this.ShadowAmount.TabIndex = 7;
			this.ShadowAmount.TickFrequency = 0;
			this.ShadowAmount.Value = 200;
			this.ShadowAmount.Scroll += new System.EventHandler(ShadowAmount_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 24);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(41, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "æ°éï¼";
			this.ShadowRadiusUpDown.Location = new System.Drawing.Point(250, 86);
			this.ShadowRadiusUpDown.Maximum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.ShadowRadiusUpDown.Name = "ShadowRadiusUpDown";
			this.ShadowRadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.ShadowRadiusUpDown.TabIndex = 4;
			this.ShadowRadiusUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.ShadowRadiusUpDown.ValueChanged += new System.EventHandler(ShadowRadiusUpDown_ValueChanged);
			this.ShadowRadius.AutoSize = false;
			this.ShadowRadius.LargeChange = 2;
			this.ShadowRadius.Location = new System.Drawing.Point(8, 114);
			this.ShadowRadius.Maximum = 200;
			this.ShadowRadius.Name = "ShadowRadius";
			this.ShadowRadius.Size = new System.Drawing.Size(292, 26);
			this.ShadowRadius.TabIndex = 3;
			this.ShadowRadius.TickFrequency = 0;
			this.ShadowRadius.Value = 10;
			this.ShadowRadius.Scroll += new System.EventHandler(ShadowRadius_Scroll);
			this.HighlightWidthUpDown.Location = new System.Drawing.Point(250, 152);
			this.HighlightWidthUpDown.Name = "HighlightWidthUpDown";
			this.HighlightWidthUpDown.Size = new System.Drawing.Size(50, 21);
			this.HighlightWidthUpDown.TabIndex = 11;
			this.HighlightWidthUpDown.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.HighlightWidth.AutoSize = false;
			this.HighlightWidth.LargeChange = 2;
			this.HighlightWidth.Location = new System.Drawing.Point(8, 181);
			this.HighlightWidth.Maximum = 100;
			this.HighlightWidth.Name = "HighlightWidth";
			this.HighlightWidth.Size = new System.Drawing.Size(292, 26);
			this.HighlightWidth.TabIndex = 10;
			this.HighlightWidth.TickFrequency = 0;
			this.HighlightWidth.Value = 30;
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 154);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(95, 12);
			this.label4.TabIndex = 9;
			this.label4.Text = "è²è°å®½åº¦ï¼%ï¼ï¼";
			this.HighLightAmount.AutoSize = false;
			this.HighLightAmount.LargeChange = 2;
			this.HighLightAmount.Location = new System.Drawing.Point(8, 53);
			this.HighLightAmount.Maximum = 500;
			this.HighLightAmount.Minimum = -500;
			this.HighLightAmount.Name = "HighLightAmount";
			this.HighLightAmount.Size = new System.Drawing.Size(292, 26);
			this.HighLightAmount.TabIndex = 7;
			this.HighLightAmount.TickFrequency = 0;
			this.HighLightAmount.Value = -100;
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 88);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.groupBox1.Controls.Add(this.HighLightAmountUpDown);
			this.groupBox1.Controls.Add(this.HighlightWidthUpDown);
			this.groupBox1.Controls.Add(this.HighlightWidth);
			this.groupBox1.Controls.Add(this.label4);
			this.groupBox1.Controls.Add(this.HighLightAmount);
			this.groupBox1.Controls.Add(this.label5);
			this.groupBox1.Controls.Add(this.HighlightRadiusUpDown);
			this.groupBox1.Controls.Add(this.HighlightRadius);
			this.groupBox1.Controls.Add(this.label6);
			this.groupBox1.Location = new System.Drawing.Point(12, 254);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.Size = new System.Drawing.Size(316, 227);
			this.groupBox1.TabIndex = 25;
			this.groupBox1.TabStop = false;
			this.groupBox1.Text = "é«å";
			this.HighLightAmountUpDown.Location = new System.Drawing.Point(250, 22);
			this.HighLightAmountUpDown.Maximum = new decimal(new int[4] { 500, 0, 0, 0 });
			this.HighLightAmountUpDown.Minimum = new decimal(new int[4] { 500, 0, 0, -2147483648 });
			this.HighLightAmountUpDown.Name = "HighLightAmountUpDown";
			this.HighLightAmountUpDown.Size = new System.Drawing.Size(50, 21);
			this.HighLightAmountUpDown.TabIndex = 8;
			this.HighLightAmountUpDown.Value = new decimal(new int[4] { 100, 0, 0, -2147483648 });
			this.HighlightRadius.AutoSize = false;
			this.HighlightRadius.LargeChange = 2;
			this.HighlightRadius.Location = new System.Drawing.Point(8, 114);
			this.HighlightRadius.Maximum = 200;
			this.HighlightRadius.Minimum = 1;
			this.HighlightRadius.Name = "HighlightRadius";
			this.HighlightRadius.Size = new System.Drawing.Size(292, 26);
			this.HighlightRadius.TabIndex = 3;
			this.HighlightRadius.TickFrequency = 0;
			this.HighlightRadius.Value = 10;
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(350, 126);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 24;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(343, 21);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(84, 27);
			this.btnOk.TabIndex = 21;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.ShadowAmountUpDown);
			this.groupBox.Controls.Add(this.ShadowWidthUpDown);
			this.groupBox.Controls.Add(this.ShadowWidth);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.ShadowAmount);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.ShadowRadiusUpDown);
			this.groupBox.Controls.Add(this.ShadowRadius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(316, 227);
			this.groupBox.TabIndex = 23;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "é´å½±";
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(343, 65);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(84, 27);
			this.btnCancel.TabIndex = 22;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(439, 497);
			base.Controls.Add(this.groupBox1);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.Controls.Add(this.btnCancel);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ShadowAndHighlightDialog";
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "é´å½±/é«å";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(ShadowAndHighlightDialog_FormClosing);
			base.Load += new System.EventHandler(ShadowAndHighlightDialog_Load);
			((System.ComponentModel.ISupportInitialize)this.HighlightRadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowAmountUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowWidthUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowWidth).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowAmount).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowRadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ShadowRadius).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightWidthUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightWidth).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighLightAmount).EndInit();
			this.groupBox1.ResumeLayout(false);
			this.groupBox1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.HighLightAmountUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighlightRadius).EndInit();
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class NoParaDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private CheckBox ChkPreview;

		private GroupBox Optimization;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkSpeed;

		private RadioButton OptAvx;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetImageEntropy_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetOutline_PureC(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetOutline_SSE(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetOutline_AVX(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Int_ReverseBits_PureC(byte* Src, byte* Dest, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Int_ReverseBits_SSE(byte* Src, byte* Dest, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Int_ReverseBits_AVX(byte* Src, byte* Dest, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Exposal_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Exposal_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Exposal_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FindEdges_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FindEdges_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FindEdges_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Desaturate_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Desaturate_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Desaturate_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Invert_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Invert_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Invert_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Sharpen_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Sharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Sharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastDenoise_5X5_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastDenoise_5X5_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastDenoise_5X5_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LocalExponentialCorrection_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LocalExponentialCorrection_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LocalExponentialCorrection_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NonlinearEnhancement_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NonlinearEnhancement_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NonlinearEnhancement_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe NoParaDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
			Busy = true;
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				int num = 1;
				if (ChkSpeed.Checked)
				{
					num = 100;
				}
				TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
				TimeUse.GetCurrentParent().Refresh();
				QueryPerformanceCounter(ref lpPerformanceCount);
				for (int i = 0; i < num; i++)
				{
					if (OptPureC.Checked)
					{
						if (Text.Equals("å»è²"))
						{
							IM_Desaturate_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("åè²"))
						{
							IM_Invert_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¿«éå»åª"))
						{
							IM_FastDenoise_5X5_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éå"))
						{
							IM_Sharpen_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å±é¨Gammaæ ¡æ­£"))
						{
							IM_LocalExponentialCorrection_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éçº¿æ§å¢å¼º"))
						{
							IM_NonlinearEnhancement_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("æ¥æ¾è¾¹ç¼"))
						{
							IM_FindEdges_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¾åç½®ä¹±"))
						{
							IM_Int_ReverseBits_PureC(Clone, canvas.ImageData, canvas.Image.Height * canvas.Stride / 4);
						}
						else if (Text.Equals("æåè¿åº¦"))
						{
							IM_Exposal_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("è½®å»"))
						{
							IM_GetOutline_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
					}
					else if (OptSSE.Checked)
					{
						if (Text.Equals("å»è²"))
						{
							IM_Desaturate_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("åè²"))
						{
							IM_Invert_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¿«éå»åª"))
						{
							IM_FastDenoise_5X5_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éå"))
						{
							IM_Sharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å±é¨Gammaæ ¡æ­£"))
						{
							IM_LocalExponentialCorrection_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éçº¿æ§å¢å¼º"))
						{
							IM_NonlinearEnhancement_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éçº¿æ§å¢å¼º"))
						{
							IM_NonlinearEnhancement_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("æ¥æ¾è¾¹ç¼"))
						{
							IM_FindEdges_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¾åç½®ä¹±"))
						{
							IM_Int_ReverseBits_SSE(Clone, canvas.ImageData, canvas.Image.Height * canvas.Stride / 4);
						}
						else if (Text.Equals("æåè¿åº¦"))
						{
							IM_Exposal_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("è½®å»"))
						{
							IM_GetOutline_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
					}
					else if (OptAvx.Checked)
					{
						if (Text.Equals("å»è²"))
						{
							IM_Desaturate_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("åè²"))
						{
							IM_Invert_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¿«éå»åª"))
						{
							IM_FastDenoise_5X5_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éå"))
						{
							IM_Sharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å±é¨Gammaæ ¡æ­£"))
						{
							IM_LocalExponentialCorrection_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("éçº¿æ§å¢å¼º"))
						{
							IM_NonlinearEnhancement_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("æ¥æ¾è¾¹ç¼"))
						{
							IM_FindEdges_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("å¾åç½®ä¹±"))
						{
							IM_Int_ReverseBits_AVX(Clone, canvas.ImageData, canvas.Image.Height * canvas.Stride / 4);
						}
						else if (Text.Equals("æåè¿åº¦"))
						{
							IM_Exposal_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (Text.Equals("è½®å»"))
						{
							IM_GetOutline_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void NoParaDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (!Text.Equals("å»è²"))
			{
				Text.Equals("éçº¿æ§å¢å¼º");
			}
			Busy = false;
			UpdateCanvas();
		}

		private unsafe void NoParaDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(744, 40);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(98, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(638, 40);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(98, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(770, 111);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Location = new System.Drawing.Point(14, 24);
			this.Optimization.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Name = "Optimization";
			this.Optimization.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Size = new System.Drawing.Size(591, 111);
			this.Optimization.TabIndex = 16;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(451, 51);
			this.OptAvx.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(132, 22);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(298, 51);
			this.OptSSE.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(132, 22);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(33, 51);
			this.OptPureC.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(240, 22);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(638, 111);
			this.ChkSpeed.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(106, 22);
			this.ChkSpeed.TabIndex = 19;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(850, 158);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.Optimization);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "NoParaDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "NoParaDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(NoParaDialog_FormClosing);
			base.Load += new System.EventHandler(NoParaDialog_Load);
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class FrmLayerStyle : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Busy = true;

		private IContainer components;

		private Panel panel1;

		private CheckBox Chk_TY;

		private CheckBox Chk_WFG;

		private CheckBox Chk_TADJ;

		private CheckBox Chk_JBDJ;

		private CheckBox Chk_YSDJ;

		private CheckBox Chk_NFG;

		private Label label1;

		private CheckBox Chk_XMFD;

		private CheckBox Chk_NYY;

		private CheckBox CHK_MB;

		private CheckBox Chk_GZ;

		private Button CmdOk;

		private Button CmdCancel;

		private CheckBox ChkPreview;

		private GroupBox GP_MB_JG;

		private Label label3;

		private TrackBar TB_Opaciyt_MB;

		private Label label2;

		private TrackBar TB_Size_MB;

		private ComboBox CmbPos_MB;

		private Label label15;

		private NumericUpDown Size_MB;

		private Label label16;

		private NumericUpDown Opaicty_MB;

		private Label label19;

		private ComboBox CmbBlendMode_MB;

		private Label label20;

		private GroupBox GP_MB_TC;

		private PictureBox PicColor_MB;

		private Label label4;

		private ComboBox CmbFill_MB;

		private GroupBox GP_NYY_JG;

		private ComboBox CmbContour_NYY;

		private Label label27;

		private Label label25;

		private NumericUpDown Size_NYY;

		private TrackBar TB_Size_NYY;

		private Label label26;

		private Label label23;

		private NumericUpDown Choke_NYY;

		private TrackBar TB_Choke_NYY;

		private Label label24;

		private Label label22;

		private NumericUpDown Distance_NYY;

		private TrackBar TB_Distance_NYY;

		private Label label21;

		private Label label18;

		private NumericUpDown Angle_NYY;

		private TrackBar TB_Angle_NYY;

		private Label label17;

		private TrackBar TB_Opaciyt_NYY;

		private Label label6;

		private NumericUpDown Opaicty_NYY;

		private Label label5;

		private PictureBox PicColor_NYY;

		private ComboBox CmbBlendMode_NYY;

		private Label label12;

		private GroupBox GP_GZ;

		private CheckBox ChkInvert_GZ;

		private ComboBox CmbContour_GZ;

		private Label label7;

		private Label label8;

		private NumericUpDown Size_GZ;

		private TrackBar TB_Size_GZ;

		private Label label9;

		private Label label13;

		private NumericUpDown Distance_GZ;

		private TrackBar TB_Distance_GZ;

		private Label label14;

		private Label label28;

		private NumericUpDown Angle_GZ;

		private TrackBar TB_Angle_GZ;

		private Label label29;

		private TrackBar TB_Opacity_GZ;

		private Label label30;

		private NumericUpDown Opacity_GZ;

		private Label label31;

		private PictureBox PicColor_GZ;

		private ComboBox CmbBlendMode_GZ;

		private Label label32;

		private GroupBox GP_Frame;

		private GroupBox GP_TY_JG;

		private ComboBox CmbContour_TY;

		private Label label10;

		private Label label11;

		private NumericUpDown Size_TY;

		private TrackBar TB_Size_TY;

		private Label label33;

		private Label label34;

		private NumericUpDown Choke_TY;

		private TrackBar TB_Choke_TY;

		private Label label35;

		private Label label36;

		private NumericUpDown Distance_TY;

		private TrackBar TB_Distance_TY;

		private Label label37;

		private Label label38;

		private NumericUpDown Angle_TY;

		private TrackBar TB_Angle_TY;

		private Label label39;

		private TrackBar TB_Opacity_TY;

		private Label label40;

		private NumericUpDown Opacity_TY;

		private Label label41;

		private PictureBox PicColor_TY;

		private ComboBox CmbBlendMode_TY;

		private Label label42;

		private GroupBox GP_YS;

		private TrackBar TB_Opacity_YS;

		private NumericUpDown Opacity_YS;

		private Label label43;

		private PictureBox PicColor_YS;

		private ComboBox CmbBlendMode_YS;

		private Label label44;

		private GroupBox GP_TA;

		private NumericUpDown Zoom_TA;

		private TrackBar TB_Zoom_TA;

		private Label label48;

		private Label label47;

		private TrackBar TB_Opacity_TA;

		private NumericUpDown Opacity_TA;

		private Label label45;

		private PictureBox PicPattern_TA;

		private ComboBox CmbBlendMode_TA;

		private Label label46;

		private GroupBox GP_JB;

		private Label label55;

		private Label label53;

		private NumericUpDown Angle_JB;

		private TrackBar TB_Angle_JB;

		private Label label54;

		private CheckBox ChkInvert_JB;

		private ComboBox CmbGradient_JB;

		private NumericUpDown Zoom_JB;

		private TrackBar TB_Zoom_JB;

		private Label label49;

		private Label label50;

		private TrackBar TB_Opacity_JB;

		private NumericUpDown Opacity_JB;

		private Label label51;

		private ComboBox CmbBlendMode_JB;

		private Label label52;

		private ComboBox CmbGradientStyle_JB;

		private Label label56;

		private GroupBox GP_XMFD;

		private PictureBox PicShadow_XFMD;

		private Label label64;

		private PictureBox PicHighlight_XMFD;

		private Label label63;

		private Label label57;

		private NumericUpDown Height_XMFD;

		private TrackBar TB_Height_XMFD;

		private Label label59;

		private Label label61;

		private NumericUpDown Angle_XMFD;

		private TrackBar TB_Angle_XMFD;

		private Label label62;

		private Label label58;

		private TrackBar TB_Size_XFMD;

		private NumericUpDown Size_XMFD;

		private Label label60;

		private Label label65;

		private NumericUpDown Depth_XMFD;

		private TrackBar TB_Depth_XMFD;

		private Label label66;

		private Label label69;

		private TrackBar TB_Opacity_XMFD_S;

		private NumericUpDown Opacity_XMFD_S;

		private Label label70;

		private ComboBox CmbBlendMode_XMFD_S;

		private Label label67;

		private TrackBar TB_Opacity_XMFD_H;

		private NumericUpDown Opacity_XMFD_H;

		private Label label68;

		private ComboBox CmbBlendMode_XMFD_H;

		private Label label72;

		private TrackBar TB_SoftenSize_XMFD;

		private NumericUpDown SoftenSize_XMFD;

		private Label label71;

		private NumericUpDown Noise_MB;

		private TrackBar TB_Noise_MB;

		private Label label73;

		private ComboBox CmbContour_MB;

		private Label label74;

		private Label label75;

		private TrackBar TB_Soft_MB;

		private NumericUpDown Soft_MB;

		private Label label76;

		private RadioButton Rad_Edge_MB;

		private RadioButton Rad_Center_MB;

		private NumericUpDown Noise_TY;

		private TrackBar TB_Noise_TY;

		private Label label77;

		private CheckBox ChkSoften;

		private NumericUpDown Noise_NYY;

		private TrackBar TB_Noise_NYY;

		private Label label78;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern void IM_GetCurveTable(int Contour, byte* Table);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetAlphaChannel(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Stroke(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, int Color_B, int Color_G, int Color_R, int Size, int Position, int Soften, int Edge, int Noise, byte* Contour);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_InnerShadow(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, int Color_B, int Color_G, int Color_R, float Angle, int Distance, int Choke, int Size, int Noise, byte* Contour);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DropShadow(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, int Color_B, int Color_G, int Color_R, float Angle, int Distance, int Choke, int Size, int Noise, byte* Contour);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FillWithPattern(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, byte* Pattern, int PatternW, int PatternH, int PatternS, int Zoom);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Gloss(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, int Color_B, int Color_G, int Color_R, float Angle, int Distance, int Size, int Invert, byte* Contour);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FillWithGradient(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, float Angle, int Zoom, bool Invert, bool Dither, bool Soften, int GradientStyle, int Color);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FillWithColor(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BlendOp, int Opacity, int Color_B, int Color_G, int Color_R);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BevelAndEmboss(byte* Src, byte* Dest, byte* Alpha, int Width, int Height, int Stride, int BevelHeight, int SoftenSize, float LightAngle, float LightElevation, int Depth, int BM_HighLight, int Opacity_HighLight, int HightLightB, int HightLightG, int HightLightR, int BM_Shadow, int Opacity_Shadow, int ShadowB, int ShadowG, int ShadowR);

		public unsafe FrmLayerStyle(Canvas Parent, ToolStripStatusLabel Label)
		{
			InitializeComponent();
			canvas = Parent;
			TimeUse = Label;
			Stride = canvas.Image.Width * 4;
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
			Busy = true;
			base.Size = new Size(550, 440);
		}

		public unsafe FrmLayerStyle()
		{
			InitializeComponent();
		}

		private unsafe void CmdCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void FrmLayerStyle_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbPos_MB.SelectedIndex = 0;
			CmbBlendMode_MB.SelectedIndex = 0;
			CmbContour_MB.SelectedIndex = 0;
			CmbFill_MB.SelectedIndex = 0;
			CmbBlendMode_NYY.SelectedIndex = 3;
			CmbContour_GZ.SelectedIndex = 0;
			CmbBlendMode_GZ.SelectedIndex = 3;
			CmbContour_NYY.SelectedIndex = 0;
			CmbBlendMode_TY.SelectedIndex = 0;
			CmbContour_TY.SelectedIndex = 0;
			CmbBlendMode_YS.SelectedIndex = 0;
			CmbBlendMode_TA.SelectedIndex = 0;
			CmbBlendMode_JB.SelectedIndex = 0;
			CmbGradient_JB.SelectedIndex = 6;
			CmbGradientStyle_JB.SelectedIndex = 0;
			CmbBlendMode_XMFD_H.SelectedIndex = 0;
			CmbBlendMode_XMFD_S.SelectedIndex = 0;
			Chk_XMFD_CheckedChanged(sender, e);
			Busy = false;
			UpdateImage();
		}

		private unsafe void FrmLayerStyle_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void CHK_MB_CheckedChanged(object sender, EventArgs e)
		{
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_YS.Visible = false;
			GP_TA.Visible = false;
			GP_JB.Visible = false;
			GP_XMFD.Visible = false;
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			CHK_MB.BackColor = Color.FromArgb(51, 153, 255);
			GP_MB_JG.Location = new Point(6, 30);
			GP_MB_TC.Location = new Point(6, 290);
			GP_MB_JG.Visible = true;
			GP_MB_TC.Visible = true;
			GP_MB_JG.Enabled = CHK_MB.Checked;
			GP_MB_TC.Enabled = CHK_MB.Checked;
			GP_Frame.Text = " æè¾¹ ";
			UpdateImage();
		}

		private void Chk_NYY_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_YS.Visible = false;
			GP_TA.Visible = false;
			GP_JB.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(51, 153, 255);
			GP_NYY_JG.Location = new Point(6, 30);
			GP_NYY_JG.Visible = true;
			GP_NYY_JG.Enabled = Chk_NYY.Checked;
			GP_Frame.Text = " åé´å½± ";
			UpdateImage();
		}

		private void Chk_GZ_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_TY_JG.Visible = false;
			GP_YS.Visible = false;
			GP_TA.Visible = false;
			GP_JB.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(51, 153, 255);
			GP_GZ.Location = new Point(6, 30);
			GP_GZ.Visible = true;
			GP_GZ.Enabled = Chk_GZ.Checked;
			GP_Frame.Text = " åæ³½ ";
			UpdateImage();
		}

		private void Chk_TY_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_YS.Visible = false;
			GP_TA.Visible = false;
			GP_JB.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(51, 153, 255);
			GP_TY_JG.Location = new Point(6, 30);
			GP_TY_JG.Visible = true;
			GP_TY_JG.Enabled = Chk_TY.Checked;
			GP_Frame.Text = " æå½± ";
			UpdateImage();
		}

		private void Chk_YSDJ_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_TA.Visible = false;
			GP_JB.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(51, 153, 255);
			GP_YS.Location = new Point(6, 30);
			GP_YS.Visible = true;
			GP_YS.Enabled = Chk_YSDJ.Checked;
			GP_Frame.Text = " é¢è²å¡«å ";
			UpdateImage();
		}

		private void Chk_TADJ_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_JB.Visible = false;
			GP_YS.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(51, 153, 255);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			GP_TA.Location = new Point(6, 30);
			GP_TA.Visible = true;
			GP_TA.Enabled = Chk_TADJ.Checked;
			GP_Frame.Text = " å¾æ¡å¡«å ";
			UpdateImage();
		}

		private void Chk_JBDJ_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_TA.Visible = false;
			GP_YS.Visible = false;
			GP_XMFD.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(51, 153, 255);
			Chk_XMFD.BackColor = Color.FromArgb(240, 240, 240);
			GP_JB.Location = new Point(6, 30);
			GP_JB.Visible = true;
			GP_JB.Enabled = Chk_JBDJ.Checked;
			GP_Frame.Text = " æ¸åå¡«å ";
			UpdateImage();
		}

		private void Chk_XMFD_CheckedChanged(object sender, EventArgs e)
		{
			GP_MB_JG.Visible = false;
			GP_MB_TC.Visible = false;
			GP_NYY_JG.Visible = false;
			GP_GZ.Visible = false;
			GP_TY_JG.Visible = false;
			GP_TA.Visible = false;
			GP_YS.Visible = false;
			GP_JB.Visible = false;
			CHK_MB.BackColor = Color.FromArgb(240, 240, 240);
			Chk_NYY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_GZ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TY.BackColor = Color.FromArgb(240, 240, 240);
			Chk_YSDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_TADJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_JBDJ.BackColor = Color.FromArgb(240, 240, 240);
			Chk_XMFD.BackColor = Color.FromArgb(51, 153, 255);
			GP_XMFD.Visible = true;
			GP_XMFD.Location = new Point(6, 30);
			GP_XMFD.Enabled = Chk_XMFD.Checked;
			GP_Frame.Text = " æé¢åæµ®é ";
			UpdateImage();
		}

		private unsafe void UpdateImage()
		{
			if (ChkPreview.Checked && !Busy)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * canvas.Image.Width);
				IM_GetAlphaChannel(Clone, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * canvas.Image.Width * 4);
				byte* ptr2 = (byte*)(void*)Marshal.AllocHGlobal(256);
				if (Chk_TY.Checked)
				{
					IM_GetCurveTable(CmbContour_TY.SelectedIndex, ptr2);
					IM_DropShadow(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_TY.SelectedIndex, (int)Opacity_TY.Value, PicColor_TY.BackColor.B, PicColor_TY.BackColor.G, PicColor_TY.BackColor.R, (int)Angle_TY.Value, (int)Distance_TY.Value, (int)Choke_TY.Value, (int)Size_TY.Value, (int)Noise_TY.Value, ptr2);
				}
				if (Chk_TADJ.Checked)
				{
					Bitmap bitmap = (Bitmap)PicPattern_TA.Image;
					BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
					IM_FillWithPattern(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_TA.SelectedIndex, (int)Opacity_TA.Value, (byte*)(void*)bitmapData.Scan0, bitmapData.Width, bitmapData.Height, bitmapData.Stride, (int)Zoom_TA.Value);
					bitmap.UnlockBits(bitmapData);
				}
				if (Chk_JBDJ.Checked)
				{
					IM_FillWithGradient(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_JB.SelectedIndex, (int)Opacity_JB.Value, (int)Angle_JB.Value, (int)Zoom_JB.Value, ChkInvert_JB.Checked, Dither: false, ChkSoften.Checked, CmbGradientStyle_JB.SelectedIndex, CmbGradient_JB.SelectedIndex);
				}
				if (Chk_YSDJ.Checked)
				{
					IM_FillWithColor(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_YS.SelectedIndex, (int)Opacity_YS.Value, PicColor_YS.BackColor.B, PicColor_YS.BackColor.G, PicColor_YS.BackColor.R);
				}
				if (Chk_GZ.Checked)
				{
					IM_GetCurveTable(CmbContour_GZ.SelectedIndex, ptr2);
					IM_Gloss(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_GZ.SelectedIndex, (int)Opacity_GZ.Value, PicColor_GZ.BackColor.B, PicColor_GZ.BackColor.G, PicColor_GZ.BackColor.R, (int)Angle_GZ.Value, (int)Distance_GZ.Value, (int)Size_GZ.Value, ChkInvert_GZ.Checked ? 1 : 0, ptr2);
				}
				if (Chk_NYY.Checked)
				{
					IM_GetCurveTable(CmbContour_NYY.SelectedIndex, ptr2);
					IM_InnerShadow(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_NYY.SelectedIndex, (int)Opaicty_NYY.Value, PicColor_NYY.BackColor.B, PicColor_NYY.BackColor.G, PicColor_NYY.BackColor.R, (int)Angle_NYY.Value, (int)Distance_NYY.Value, (int)Choke_NYY.Value, (int)Size_NYY.Value, (int)Noise_NYY.Value, ptr2);
				}
				if (CHK_MB.Checked)
				{
					IM_GetCurveTable(CmbContour_MB.SelectedIndex, ptr2);
					IM_Stroke(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, CmbBlendMode_MB.SelectedIndex, (int)Opaicty_MB.Value, PicColor_MB.BackColor.B, PicColor_MB.BackColor.G, PicColor_MB.BackColor.R, (int)Size_MB.Value, CmbPos_MB.SelectedIndex, TB_Soft_MB.Value, (!Rad_Edge_MB.Checked) ? 1 : 0, TB_Noise_MB.Value, ptr2);
				}
				if (Chk_XMFD.Checked)
				{
					IM_BevelAndEmboss(canvas.ImageData, canvas.ImageData, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Image.Width * 4, (int)Size_XMFD.Value, (int)SoftenSize_XMFD.Value, (float)Angle_XMFD.Value, (float)Height_XMFD.Value, (int)Depth_XMFD.Value, CmbBlendMode_XMFD_H.SelectedIndex, (int)Opacity_XMFD_H.Value, PicHighlight_XMFD.BackColor.B, PicHighlight_XMFD.BackColor.G, PicHighlight_XMFD.BackColor.R, CmbBlendMode_XMFD_S.SelectedIndex, (int)Opacity_XMFD_S.Value, PicShadow_XFMD.BackColor.B, PicShadow_XFMD.BackColor.G, PicShadow_XFMD.BackColor.R);
				}
				Marshal.FreeHGlobal((IntPtr)ptr2);
				Marshal.FreeHGlobal((IntPtr)ptr);
				stopwatch.Stop();
				Text = "æ´æ°ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms";
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * canvas.Image.Width * 4);
			}
			canvas.Refresh();
		}

		private void TB_Size_MB_Scroll(object sender, EventArgs e)
		{
			Size_MB.Value = TB_Size_MB.Value;
			UpdateImage();
		}

		private void Size_MB_ValueChanged(object sender, EventArgs e)
		{
			TB_Size_MB.Value = (int)Size_MB.Value;
			UpdateImage();
		}

		private void CmbPos_MB_SelectedIndexChanged(object sender, EventArgs e)
		{
			RadioButton rad_Edge_MB = Rad_Edge_MB;
			bool enabled = (Rad_Center_MB.Enabled = CmbPos_MB.SelectedIndex == 1);
			rad_Edge_MB.Enabled = enabled;
			UpdateImage();
		}

		private void CmbBlendMode_MB_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void CmbFill_MB_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void TB_Opaciyt_MB_Scroll(object sender, EventArgs e)
		{
			Opaicty_MB.Value = TB_Opaciyt_MB.Value;
			UpdateImage();
		}

		private void Opaicty_MB_ValueChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicColor_MB_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicColor_MB.BackColor = colorDialog.Color;
				UpdateImage();
			}
			UpdateImage();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void CmbBlendMode_GZ_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void CmbContour_GZ_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void ChkInvert_GZ_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicColor_GZ_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicColor_GZ.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void TB_Opacity_GZ_Scroll(object sender, EventArgs e)
		{
			Opacity_GZ.Value = TB_Opacity_GZ.Value;
			UpdateImage();
		}

		private void Opacity_GZ_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_GZ.Value = (int)Opacity_GZ.Value;
			UpdateImage();
		}

		private void TB_Angle_GZ_Scroll(object sender, EventArgs e)
		{
			Angle_GZ.Value = TB_Angle_GZ.Value;
			UpdateImage();
		}

		private void Angle_GZ_ValueChanged(object sender, EventArgs e)
		{
			TB_Angle_GZ.Value = (int)Angle_GZ.Value;
			UpdateImage();
		}

		private void TB_Distance_GZ_Scroll(object sender, EventArgs e)
		{
			Distance_GZ.Value = TB_Distance_GZ.Value;
			UpdateImage();
		}

		private void Distance_GZ_ValueChanged(object sender, EventArgs e)
		{
			TB_Distance_GZ.Value = (int)Distance_GZ.Value;
			UpdateImage();
		}

		private void TB_Size_GZ_Scroll(object sender, EventArgs e)
		{
			Size_GZ.Value = TB_Size_GZ.Value;
			UpdateImage();
		}

		private void Size_GZ_ValueChanged(object sender, EventArgs e)
		{
			TB_Size_GZ.Value = (int)Size_GZ.Value;
			UpdateImage();
		}

		private void CmbBlendMode_NYY_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicColor_NYY_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicColor_NYY.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void CmbContour_NYY_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Opaciyt_NYY_Scroll(object sender, EventArgs e)
		{
			Opaicty_NYY.Value = TB_Opaciyt_NYY.Value;
			UpdateImage();
		}

		private void Opaicty_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Opaciyt_NYY.Value = (int)Opaicty_NYY.Value;
			UpdateImage();
		}

		private void TB_Angle_NYY_Scroll(object sender, EventArgs e)
		{
			Angle_NYY.Value = TB_Angle_NYY.Value;
			UpdateImage();
		}

		private void Angle_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Angle_NYY.Value = (int)Angle_NYY.Value;
			UpdateImage();
		}

		private void TB_Distance_NYY_Scroll(object sender, EventArgs e)
		{
			Distance_NYY.Value = TB_Distance_NYY.Value;
			UpdateImage();
		}

		private void Distance_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Distance_NYY.Value = (int)Distance_NYY.Value;
			UpdateImage();
		}

		private void Choke_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Choke_NYY.Value = (int)Choke_NYY.Value;
			UpdateImage();
		}

		private void TB_Choke_NYY_Scroll(object sender, EventArgs e)
		{
			Choke_NYY.Value = TB_Choke_NYY.Value;
			UpdateImage();
		}

		private void Size_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Size_NYY.Value = (int)Size_NYY.Value;
			UpdateImage();
		}

		private void TB_Size_NYY_Scroll(object sender, EventArgs e)
		{
			Size_NYY.Value = TB_Size_NYY.Value;
			UpdateImage();
		}

		private void CmbBlendMode_TY_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicColor_TY_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicColor_TY.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void TB_Opacity_TY_Scroll(object sender, EventArgs e)
		{
			Opacity_TY.Value = TB_Opacity_TY.Value;
			UpdateImage();
		}

		private void Opacity_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_TY.Value = (int)Opacity_TY.Value;
			UpdateImage();
		}

		private void TB_Angle_TY_Scroll(object sender, EventArgs e)
		{
			Angle_TY.Value = TB_Angle_TY.Value;
			UpdateImage();
		}

		private void Angle_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Angle_TY.Value = (int)Angle_TY.Value;
			UpdateImage();
		}

		private void TB_Distance_TY_Scroll(object sender, EventArgs e)
		{
			Distance_TY.Value = TB_Distance_TY.Value;
			UpdateImage();
		}

		private void Distance_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Distance_TY.Value = (int)Distance_TY.Value;
			UpdateImage();
		}

		private void TB_Choke_TY_Scroll(object sender, EventArgs e)
		{
			Choke_TY.Value = TB_Choke_TY.Value;
			UpdateImage();
		}

		private void Choke_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Choke_TY.Value = (int)Choke_TY.Value;
			UpdateImage();
		}

		private void TB_Size_TY_Scroll(object sender, EventArgs e)
		{
			Size_TY.Value = TB_Size_TY.Value;
			UpdateImage();
		}

		private void Size_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Size_TY.Value = (int)Size_TY.Value;
			UpdateImage();
		}

		private void CmbContour_TY_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void CmbBlendMode_YS_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicColor_YS_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicColor_YS.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void TB_Opacity_YS_Scroll(object sender, EventArgs e)
		{
			Opacity_YS.Value = TB_Opacity_YS.Value;
			UpdateImage();
		}

		private void Opacity_YS_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_YS.Value = (int)Opacity_YS.Value;
			UpdateImage();
		}

		private void CmbBlendMode_TA_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Opacity_TZ_Scroll(object sender, EventArgs e)
		{
			Opacity_TA.Value = TB_Opacity_TA.Value;
			UpdateImage();
		}

		private void Opacity_TA_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_TA.Value = (int)Opacity_TA.Value;
			UpdateImage();
		}

		private void GP_TA_Enter(object sender, EventArgs e)
		{
		}

		private void TB_Zoom_TA_Scroll(object sender, EventArgs e)
		{
			Zoom_TA.Value = TB_Zoom_TA.Value;
			UpdateImage();
		}

		private void _Zoom_TA_ValueChanged(object sender, EventArgs e)
		{
			TB_Zoom_TA.Value = (int)Zoom_TA.Value;
			UpdateImage();
		}

		private unsafe void PicPattern_TA_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png";
			if (openFileDialog.ShowDialog() != DialogResult.OK)
			{
				return;
			}
			Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
			if (bitmap.PixelFormat == PixelFormat.Format24bppRgb)
			{
				PicPattern_TA.Image = bitmap;
				return;
			}
			Bitmap bitmap2 = new Bitmap(bitmap.Width, bitmap.Height, PixelFormat.Format24bppRgb);
			BitmapData bitmapData = bitmap2.LockBits(new Rectangle(0, 0, bitmap2.Width, bitmap2.Height), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				BitmapData bitmapData2 = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
				for (int i = 0; i < bitmap.Height; i++)
				{
					byte* ptr = (byte*)(void*)bitmapData2.Scan0 + i * bitmapData2.Stride;
					byte* ptr2 = (byte*)(void*)bitmapData.Scan0 + i * bitmapData.Stride;
					for (int j = 0; j < bitmap.Width; j++)
					{
						*ptr2 = (ptr2[1] = (ptr2[2] = ptr[j]));
						ptr2 += 3;
					}
				}
				bitmap.UnlockBits(bitmapData2);
			}
			else if (bitmap.PixelFormat == PixelFormat.Format32bppArgb)
			{
				BitmapData bitmapData3 = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
				for (int k = 0; k < bitmap.Height; k++)
				{
					byte* ptr3 = (byte*)(void*)bitmapData3.Scan0 + k * bitmapData3.Stride;
					byte* ptr4 = (byte*)(void*)bitmapData.Scan0 + k * bitmapData.Stride;
					for (int l = 0; l < bitmap.Width; l++)
					{
						*ptr4 = (byte)(*ptr3 * ptr3[3] / 255);
						ptr4[1] = (byte)(ptr3[1] * ptr3[3] / 255);
						ptr4[2] = (byte)(ptr3[2] * ptr3[3] / 255);
						ptr3 += 3;
					}
				}
				bitmap.UnlockBits(bitmapData3);
			}
			bitmap2.UnlockBits(bitmapData);
			PicPattern_TA.Image = bitmap2;
			bitmap.Dispose();
		}

		private void CmbBlendMode_JB_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Opacity_JB_Scroll(object sender, EventArgs e)
		{
			Opacity_JB.Value = TB_Opacity_JB.Value;
			UpdateImage();
		}

		private void Opacity_JB_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_JB.Value = (int)Opacity_JB.Value;
			UpdateImage();
		}

		private void CmbGradient_JB_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void ChkInvert_JB_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Angle_JB_Scroll(object sender, EventArgs e)
		{
			Angle_JB.Value = TB_Angle_JB.Value;
			UpdateImage();
		}

		private void Angle_JB_ValueChanged(object sender, EventArgs e)
		{
			TB_Angle_JB.Value = (int)Angle_JB.Value;
			UpdateImage();
		}

		private void TB_Zoom_JB_Scroll(object sender, EventArgs e)
		{
			Zoom_JB.Value = TB_Zoom_JB.Value;
			UpdateImage();
		}

		private void Zoom_JB_ValueChanged(object sender, EventArgs e)
		{
			TB_Zoom_JB.Value = (int)Zoom_JB.Value;
			UpdateImage();
		}

		private void GP_Frame_Enter(object sender, EventArgs e)
		{
		}

		private void CmbGradientStyle_JB_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void PicHighlight_XMFD_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicHighlight_XMFD.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void PicShadow_XFMD_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				PicShadow_XFMD.BackColor = colorDialog.Color;
				UpdateImage();
			}
		}

		private void TB_Height_XMFD_Scroll(object sender, EventArgs e)
		{
			Height_XMFD.Value = TB_Height_XMFD.Value;
			UpdateImage();
		}

		private void Height_XMFD_ValueChanged(object sender, EventArgs e)
		{
			TB_Height_XMFD.Value = (int)Height_XMFD.Value;
			UpdateImage();
		}

		private void Angle_XMFD_ValueChanged(object sender, EventArgs e)
		{
			TB_Angle_XMFD.Value = (int)Angle_XMFD.Value;
			UpdateImage();
		}

		private void TB_Angle_XMFD_Scroll(object sender, EventArgs e)
		{
			Angle_XMFD.Value = TB_Angle_XMFD.Value;
			UpdateImage();
		}

		private void Size_XMFD_ValueChanged(object sender, EventArgs e)
		{
			TB_Size_XFMD.Value = (int)Size_XMFD.Value;
			UpdateImage();
		}

		private void TB_Size_XFMD_Scroll(object sender, EventArgs e)
		{
			Size_XMFD.Value = TB_Size_XFMD.Value;
			UpdateImage();
		}

		private void TB_Depth_XMFD_Scroll(object sender, EventArgs e)
		{
			Depth_XMFD.Value = TB_Depth_XMFD.Value;
			UpdateImage();
		}

		private void Depth_XMFD_ValueChanged(object sender, EventArgs e)
		{
			TB_Depth_XMFD.Value = (int)Depth_XMFD.Value;
			UpdateImage();
		}

		private void CmbBlendMode_XMFD_H_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void CmbBlendMode_XMFD_S_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Opacity_XMFD_H_Scroll(object sender, EventArgs e)
		{
			Opacity_XMFD_H.Value = TB_Opacity_XMFD_H.Value;
			UpdateImage();
		}

		private void Opacity_XMFD_H_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_XMFD_H.Value = (int)Opacity_XMFD_H.Value;
			UpdateImage();
		}

		private void TB_Opacity_XMFD_S_Scroll(object sender, EventArgs e)
		{
			Opacity_XMFD_S.Value = TB_Opacity_XMFD_S.Value;
			UpdateImage();
		}

		private void Opacity_XMFD_S_ValueChanged(object sender, EventArgs e)
		{
			TB_Opacity_XMFD_S.Value = (int)Opacity_XMFD_S.Value;
			UpdateImage();
		}

		private void TB_SoftenSize_XMFD_Scroll(object sender, EventArgs e)
		{
			SoftenSize_XMFD.Value = TB_SoftenSize_XMFD.Value;
			UpdateImage();
		}

		private void SoftenSize_XMFD_ValueChanged(object sender, EventArgs e)
		{
			TB_SoftenSize_XMFD.Value = (int)SoftenSize_XMFD.Value;
			UpdateImage();
		}

		private void TB_Soft_MB_Scroll(object sender, EventArgs e)
		{
			Soft_MB.Value = TB_Soft_MB.Value;
			UpdateImage();
		}

		private void Soft_MB_ValueChanged(object sender, EventArgs e)
		{
			TB_Soft_MB.Value = (int)Soft_MB.Value;
			UpdateImage();
		}

		private void CmbContour_MB_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void GP_MB_JG_Enter(object sender, EventArgs e)
		{
		}

		private void Noise_MB_ValueChanged(object sender, EventArgs e)
		{
			TB_Noise_MB.Value = (int)Noise_MB.Value;
			UpdateImage();
		}

		private void TB_Noise_MB_Scroll(object sender, EventArgs e)
		{
			Noise_MB.Value = TB_Noise_MB.Value;
			UpdateImage();
		}

		private void Rad_Edge_MB_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void Rad_Center_MB_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void TB_Noise_TY_Scroll(object sender, EventArgs e)
		{
			Noise_TY.Value = TB_Noise_TY.Value;
			UpdateImage();
		}

		private void Noise_TY_ValueChanged(object sender, EventArgs e)
		{
			TB_Noise_TY.Value = (int)Noise_TY.Value;
			UpdateImage();
		}

		private void ChkSoften_CheckedChanged(object sender, EventArgs e)
		{
			UpdateImage();
		}

		private void Noise_NYY_ValueChanged(object sender, EventArgs e)
		{
			TB_Noise_NYY.Value = (int)Noise_NYY.Value;
			UpdateImage();
		}

		private void TB_Noise_NYY_Scroll(object sender, EventArgs e)
		{
			Noise_NYY.Value = TB_Noise_NYY.Value;
			UpdateImage();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Demo.FrmLayerStyle));
			this.panel1 = new System.Windows.Forms.Panel();
			this.Chk_TY = new System.Windows.Forms.CheckBox();
			this.Chk_WFG = new System.Windows.Forms.CheckBox();
			this.Chk_TADJ = new System.Windows.Forms.CheckBox();
			this.Chk_JBDJ = new System.Windows.Forms.CheckBox();
			this.Chk_YSDJ = new System.Windows.Forms.CheckBox();
			this.Chk_NFG = new System.Windows.Forms.CheckBox();
			this.label1 = new System.Windows.Forms.Label();
			this.Chk_XMFD = new System.Windows.Forms.CheckBox();
			this.Chk_NYY = new System.Windows.Forms.CheckBox();
			this.CHK_MB = new System.Windows.Forms.CheckBox();
			this.Chk_GZ = new System.Windows.Forms.CheckBox();
			this.CmdOk = new System.Windows.Forms.Button();
			this.CmdCancel = new System.Windows.Forms.Button();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.GP_MB_JG = new System.Windows.Forms.GroupBox();
			this.Noise_MB = new System.Windows.Forms.NumericUpDown();
			this.TB_Noise_MB = new System.Windows.Forms.TrackBar();
			this.label73 = new System.Windows.Forms.Label();
			this.CmbContour_MB = new System.Windows.Forms.ComboBox();
			this.label74 = new System.Windows.Forms.Label();
			this.label75 = new System.Windows.Forms.Label();
			this.TB_Soft_MB = new System.Windows.Forms.TrackBar();
			this.Soft_MB = new System.Windows.Forms.NumericUpDown();
			this.label76 = new System.Windows.Forms.Label();
			this.Rad_Edge_MB = new System.Windows.Forms.RadioButton();
			this.Rad_Center_MB = new System.Windows.Forms.RadioButton();
			this.label3 = new System.Windows.Forms.Label();
			this.TB_Opaciyt_MB = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.TB_Size_MB = new System.Windows.Forms.TrackBar();
			this.CmbPos_MB = new System.Windows.Forms.ComboBox();
			this.label15 = new System.Windows.Forms.Label();
			this.Size_MB = new System.Windows.Forms.NumericUpDown();
			this.label16 = new System.Windows.Forms.Label();
			this.Opaicty_MB = new System.Windows.Forms.NumericUpDown();
			this.label19 = new System.Windows.Forms.Label();
			this.CmbBlendMode_MB = new System.Windows.Forms.ComboBox();
			this.label20 = new System.Windows.Forms.Label();
			this.GP_MB_TC = new System.Windows.Forms.GroupBox();
			this.PicColor_MB = new System.Windows.Forms.PictureBox();
			this.label4 = new System.Windows.Forms.Label();
			this.CmbFill_MB = new System.Windows.Forms.ComboBox();
			this.GP_NYY_JG = new System.Windows.Forms.GroupBox();
			this.CmbContour_NYY = new System.Windows.Forms.ComboBox();
			this.label27 = new System.Windows.Forms.Label();
			this.label25 = new System.Windows.Forms.Label();
			this.Size_NYY = new System.Windows.Forms.NumericUpDown();
			this.TB_Size_NYY = new System.Windows.Forms.TrackBar();
			this.label26 = new System.Windows.Forms.Label();
			this.label23 = new System.Windows.Forms.Label();
			this.Choke_NYY = new System.Windows.Forms.NumericUpDown();
			this.TB_Choke_NYY = new System.Windows.Forms.TrackBar();
			this.label24 = new System.Windows.Forms.Label();
			this.label22 = new System.Windows.Forms.Label();
			this.Distance_NYY = new System.Windows.Forms.NumericUpDown();
			this.TB_Distance_NYY = new System.Windows.Forms.TrackBar();
			this.label21 = new System.Windows.Forms.Label();
			this.label18 = new System.Windows.Forms.Label();
			this.Angle_NYY = new System.Windows.Forms.NumericUpDown();
			this.TB_Angle_NYY = new System.Windows.Forms.TrackBar();
			this.label17 = new System.Windows.Forms.Label();
			this.TB_Opaciyt_NYY = new System.Windows.Forms.TrackBar();
			this.label6 = new System.Windows.Forms.Label();
			this.Opaicty_NYY = new System.Windows.Forms.NumericUpDown();
			this.label5 = new System.Windows.Forms.Label();
			this.PicColor_NYY = new System.Windows.Forms.PictureBox();
			this.CmbBlendMode_NYY = new System.Windows.Forms.ComboBox();
			this.label12 = new System.Windows.Forms.Label();
			this.GP_GZ = new System.Windows.Forms.GroupBox();
			this.ChkInvert_GZ = new System.Windows.Forms.CheckBox();
			this.CmbContour_GZ = new System.Windows.Forms.ComboBox();
			this.label7 = new System.Windows.Forms.Label();
			this.label8 = new System.Windows.Forms.Label();
			this.Size_GZ = new System.Windows.Forms.NumericUpDown();
			this.TB_Size_GZ = new System.Windows.Forms.TrackBar();
			this.label9 = new System.Windows.Forms.Label();
			this.label13 = new System.Windows.Forms.Label();
			this.Distance_GZ = new System.Windows.Forms.NumericUpDown();
			this.TB_Distance_GZ = new System.Windows.Forms.TrackBar();
			this.label14 = new System.Windows.Forms.Label();
			this.label28 = new System.Windows.Forms.Label();
			this.Angle_GZ = new System.Windows.Forms.NumericUpDown();
			this.TB_Angle_GZ = new System.Windows.Forms.TrackBar();
			this.label29 = new System.Windows.Forms.Label();
			this.TB_Opacity_GZ = new System.Windows.Forms.TrackBar();
			this.label30 = new System.Windows.Forms.Label();
			this.Opacity_GZ = new System.Windows.Forms.NumericUpDown();
			this.label31 = new System.Windows.Forms.Label();
			this.PicColor_GZ = new System.Windows.Forms.PictureBox();
			this.CmbBlendMode_GZ = new System.Windows.Forms.ComboBox();
			this.label32 = new System.Windows.Forms.Label();
			this.GP_Frame = new System.Windows.Forms.GroupBox();
			this.GP_XMFD = new System.Windows.Forms.GroupBox();
			this.label72 = new System.Windows.Forms.Label();
			this.TB_SoftenSize_XMFD = new System.Windows.Forms.TrackBar();
			this.SoftenSize_XMFD = new System.Windows.Forms.NumericUpDown();
			this.label71 = new System.Windows.Forms.Label();
			this.label69 = new System.Windows.Forms.Label();
			this.TB_Opacity_XMFD_S = new System.Windows.Forms.TrackBar();
			this.Opacity_XMFD_S = new System.Windows.Forms.NumericUpDown();
			this.label70 = new System.Windows.Forms.Label();
			this.CmbBlendMode_XMFD_S = new System.Windows.Forms.ComboBox();
			this.label67 = new System.Windows.Forms.Label();
			this.TB_Opacity_XMFD_H = new System.Windows.Forms.TrackBar();
			this.Opacity_XMFD_H = new System.Windows.Forms.NumericUpDown();
			this.label68 = new System.Windows.Forms.Label();
			this.CmbBlendMode_XMFD_H = new System.Windows.Forms.ComboBox();
			this.label65 = new System.Windows.Forms.Label();
			this.Depth_XMFD = new System.Windows.Forms.NumericUpDown();
			this.TB_Depth_XMFD = new System.Windows.Forms.TrackBar();
			this.label66 = new System.Windows.Forms.Label();
			this.PicShadow_XFMD = new System.Windows.Forms.PictureBox();
			this.label64 = new System.Windows.Forms.Label();
			this.PicHighlight_XMFD = new System.Windows.Forms.PictureBox();
			this.label63 = new System.Windows.Forms.Label();
			this.label57 = new System.Windows.Forms.Label();
			this.Height_XMFD = new System.Windows.Forms.NumericUpDown();
			this.TB_Height_XMFD = new System.Windows.Forms.TrackBar();
			this.label59 = new System.Windows.Forms.Label();
			this.label61 = new System.Windows.Forms.Label();
			this.Angle_XMFD = new System.Windows.Forms.NumericUpDown();
			this.TB_Angle_XMFD = new System.Windows.Forms.TrackBar();
			this.label62 = new System.Windows.Forms.Label();
			this.label58 = new System.Windows.Forms.Label();
			this.TB_Size_XFMD = new System.Windows.Forms.TrackBar();
			this.Size_XMFD = new System.Windows.Forms.NumericUpDown();
			this.label60 = new System.Windows.Forms.Label();
			this.GP_TA = new System.Windows.Forms.GroupBox();
			this.Zoom_TA = new System.Windows.Forms.NumericUpDown();
			this.TB_Zoom_TA = new System.Windows.Forms.TrackBar();
			this.label48 = new System.Windows.Forms.Label();
			this.label47 = new System.Windows.Forms.Label();
			this.TB_Opacity_TA = new System.Windows.Forms.TrackBar();
			this.Opacity_TA = new System.Windows.Forms.NumericUpDown();
			this.label45 = new System.Windows.Forms.Label();
			this.PicPattern_TA = new System.Windows.Forms.PictureBox();
			this.CmbBlendMode_TA = new System.Windows.Forms.ComboBox();
			this.label46 = new System.Windows.Forms.Label();
			this.GP_YS = new System.Windows.Forms.GroupBox();
			this.TB_Opacity_YS = new System.Windows.Forms.TrackBar();
			this.Opacity_YS = new System.Windows.Forms.NumericUpDown();
			this.label43 = new System.Windows.Forms.Label();
			this.PicColor_YS = new System.Windows.Forms.PictureBox();
			this.CmbBlendMode_YS = new System.Windows.Forms.ComboBox();
			this.label44 = new System.Windows.Forms.Label();
			this.GP_TY_JG = new System.Windows.Forms.GroupBox();
			this.Noise_TY = new System.Windows.Forms.NumericUpDown();
			this.TB_Noise_TY = new System.Windows.Forms.TrackBar();
			this.label77 = new System.Windows.Forms.Label();
			this.CmbContour_TY = new System.Windows.Forms.ComboBox();
			this.GP_JB = new System.Windows.Forms.GroupBox();
			this.CmbGradientStyle_JB = new System.Windows.Forms.ComboBox();
			this.label56 = new System.Windows.Forms.Label();
			this.label55 = new System.Windows.Forms.Label();
			this.label53 = new System.Windows.Forms.Label();
			this.Angle_JB = new System.Windows.Forms.NumericUpDown();
			this.TB_Angle_JB = new System.Windows.Forms.TrackBar();
			this.label54 = new System.Windows.Forms.Label();
			this.ChkInvert_JB = new System.Windows.Forms.CheckBox();
			this.CmbGradient_JB = new System.Windows.Forms.ComboBox();
			this.Zoom_JB = new System.Windows.Forms.NumericUpDown();
			this.TB_Zoom_JB = new System.Windows.Forms.TrackBar();
			this.label49 = new System.Windows.Forms.Label();
			this.label50 = new System.Windows.Forms.Label();
			this.TB_Opacity_JB = new System.Windows.Forms.TrackBar();
			this.Opacity_JB = new System.Windows.Forms.NumericUpDown();
			this.label51 = new System.Windows.Forms.Label();
			this.CmbBlendMode_JB = new System.Windows.Forms.ComboBox();
			this.label52 = new System.Windows.Forms.Label();
			this.label10 = new System.Windows.Forms.Label();
			this.label11 = new System.Windows.Forms.Label();
			this.Size_TY = new System.Windows.Forms.NumericUpDown();
			this.TB_Size_TY = new System.Windows.Forms.TrackBar();
			this.label33 = new System.Windows.Forms.Label();
			this.label34 = new System.Windows.Forms.Label();
			this.Choke_TY = new System.Windows.Forms.NumericUpDown();
			this.TB_Choke_TY = new System.Windows.Forms.TrackBar();
			this.label35 = new System.Windows.Forms.Label();
			this.label36 = new System.Windows.Forms.Label();
			this.Distance_TY = new System.Windows.Forms.NumericUpDown();
			this.TB_Distance_TY = new System.Windows.Forms.TrackBar();
			this.label37 = new System.Windows.Forms.Label();
			this.label38 = new System.Windows.Forms.Label();
			this.Angle_TY = new System.Windows.Forms.NumericUpDown();
			this.TB_Angle_TY = new System.Windows.Forms.TrackBar();
			this.label39 = new System.Windows.Forms.Label();
			this.TB_Opacity_TY = new System.Windows.Forms.TrackBar();
			this.label40 = new System.Windows.Forms.Label();
			this.Opacity_TY = new System.Windows.Forms.NumericUpDown();
			this.label41 = new System.Windows.Forms.Label();
			this.PicColor_TY = new System.Windows.Forms.PictureBox();
			this.CmbBlendMode_TY = new System.Windows.Forms.ComboBox();
			this.label42 = new System.Windows.Forms.Label();
			this.ChkSoften = new System.Windows.Forms.CheckBox();
			this.Noise_NYY = new System.Windows.Forms.NumericUpDown();
			this.TB_Noise_NYY = new System.Windows.Forms.TrackBar();
			this.label78 = new System.Windows.Forms.Label();
			this.panel1.SuspendLayout();
			this.GP_MB_JG.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Noise_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Soft_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Soft_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opaciyt_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Size_MB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opaicty_MB).BeginInit();
			this.GP_MB_TC.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.PicColor_MB).BeginInit();
			this.GP_NYY_JG.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Size_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Choke_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Choke_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opaciyt_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opaicty_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_NYY).BeginInit();
			this.GP_GZ.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Size_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_GZ).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_GZ).BeginInit();
			this.GP_Frame.SuspendLayout();
			this.GP_XMFD.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.TB_SoftenSize_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.SoftenSize_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_XMFD_S).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_XMFD_S).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_XMFD_H).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_XMFD_H).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Depth_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Depth_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicShadow_XFMD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicHighlight_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Height_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Height_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_XMFD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_XFMD).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Size_XMFD).BeginInit();
			this.GP_TA.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Zoom_TA).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Zoom_TA).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_TA).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_TA).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicPattern_TA).BeginInit();
			this.GP_YS.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_YS).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_YS).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_YS).BeginInit();
			this.GP_TY_JG.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Noise_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_TY).BeginInit();
			this.GP_JB.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Angle_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Zoom_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Zoom_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_JB).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Size_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Choke_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Choke_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_TY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Noise_NYY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_NYY).BeginInit();
			base.SuspendLayout();
			this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.panel1.Controls.Add(this.Chk_TY);
			this.panel1.Controls.Add(this.Chk_WFG);
			this.panel1.Controls.Add(this.Chk_TADJ);
			this.panel1.Controls.Add(this.Chk_JBDJ);
			this.panel1.Controls.Add(this.Chk_YSDJ);
			this.panel1.Controls.Add(this.Chk_NFG);
			this.panel1.Controls.Add(this.label1);
			this.panel1.Controls.Add(this.Chk_XMFD);
			this.panel1.Controls.Add(this.Chk_NYY);
			this.panel1.Controls.Add(this.CHK_MB);
			this.panel1.Controls.Add(this.Chk_GZ);
			this.panel1.Location = new System.Drawing.Point(7, 18);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(96, 383);
			this.panel1.TabIndex = 0;
			this.Chk_TY.Location = new System.Drawing.Point(5, 273);
			this.Chk_TY.Name = "Chk_TY";
			this.Chk_TY.Size = new System.Drawing.Size(80, 16);
			this.Chk_TY.TabIndex = 70;
			this.Chk_TY.Text = "æå½±";
			this.Chk_TY.UseVisualStyleBackColor = true;
			this.Chk_TY.CheckedChanged += new System.EventHandler(Chk_TY_CheckedChanged);
			this.Chk_WFG.Enabled = false;
			this.Chk_WFG.Location = new System.Drawing.Point(5, 247);
			this.Chk_WFG.Name = "Chk_WFG";
			this.Chk_WFG.Size = new System.Drawing.Size(80, 16);
			this.Chk_WFG.TabIndex = 69;
			this.Chk_WFG.Text = "å¤åå";
			this.Chk_WFG.UseVisualStyleBackColor = true;
			this.Chk_TADJ.Location = new System.Drawing.Point(5, 221);
			this.Chk_TADJ.Name = "Chk_TADJ";
			this.Chk_TADJ.Size = new System.Drawing.Size(80, 16);
			this.Chk_TADJ.TabIndex = 68;
			this.Chk_TADJ.Text = "å¾æ¡å å ";
			this.Chk_TADJ.UseVisualStyleBackColor = true;
			this.Chk_TADJ.CheckedChanged += new System.EventHandler(Chk_TADJ_CheckedChanged);
			this.Chk_JBDJ.Location = new System.Drawing.Point(5, 195);
			this.Chk_JBDJ.Name = "Chk_JBDJ";
			this.Chk_JBDJ.Size = new System.Drawing.Size(80, 16);
			this.Chk_JBDJ.TabIndex = 67;
			this.Chk_JBDJ.Text = "æ¸åå å ";
			this.Chk_JBDJ.UseVisualStyleBackColor = true;
			this.Chk_JBDJ.CheckedChanged += new System.EventHandler(Chk_JBDJ_CheckedChanged);
			this.Chk_YSDJ.Location = new System.Drawing.Point(5, 169);
			this.Chk_YSDJ.Name = "Chk_YSDJ";
			this.Chk_YSDJ.Size = new System.Drawing.Size(80, 16);
			this.Chk_YSDJ.TabIndex = 66;
			this.Chk_YSDJ.Text = "é¢è²å å ";
			this.Chk_YSDJ.UseVisualStyleBackColor = true;
			this.Chk_YSDJ.CheckedChanged += new System.EventHandler(Chk_YSDJ_CheckedChanged);
			this.Chk_NFG.Enabled = false;
			this.Chk_NFG.Location = new System.Drawing.Point(5, 117);
			this.Chk_NFG.Name = "Chk_NFG";
			this.Chk_NFG.Size = new System.Drawing.Size(80, 16);
			this.Chk_NFG.TabIndex = 65;
			this.Chk_NFG.Text = "ååå";
			this.Chk_NFG.UseVisualStyleBackColor = true;
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(3, 15);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(83, 12);
			this.label1.TabIndex = 64;
			this.label1.Text = "æ··åéé¡¹:é»è®¤";
			this.Chk_XMFD.Checked = true;
			this.Chk_XMFD.CheckState = System.Windows.Forms.CheckState.Checked;
			this.Chk_XMFD.Location = new System.Drawing.Point(5, 38);
			this.Chk_XMFD.Name = "Chk_XMFD";
			this.Chk_XMFD.Size = new System.Drawing.Size(90, 17);
			this.Chk_XMFD.TabIndex = 63;
			this.Chk_XMFD.Text = "æé¢åæµ®é";
			this.Chk_XMFD.UseVisualStyleBackColor = true;
			this.Chk_XMFD.CheckedChanged += new System.EventHandler(Chk_XMFD_CheckedChanged);
			this.Chk_NYY.Location = new System.Drawing.Point(5, 91);
			this.Chk_NYY.Name = "Chk_NYY";
			this.Chk_NYY.Size = new System.Drawing.Size(80, 16);
			this.Chk_NYY.TabIndex = 60;
			this.Chk_NYY.Text = "åé´å½±";
			this.Chk_NYY.UseVisualStyleBackColor = true;
			this.Chk_NYY.CheckedChanged += new System.EventHandler(Chk_NYY_CheckedChanged);
			this.CHK_MB.BackColor = System.Drawing.SystemColors.Control;
			this.CHK_MB.Location = new System.Drawing.Point(5, 65);
			this.CHK_MB.Name = "CHK_MB";
			this.CHK_MB.Size = new System.Drawing.Size(80, 16);
			this.CHK_MB.TabIndex = 61;
			this.CHK_MB.Text = "æè¾¹";
			this.CHK_MB.UseVisualStyleBackColor = false;
			this.CHK_MB.CheckedChanged += new System.EventHandler(CHK_MB_CheckedChanged);
			this.Chk_GZ.Location = new System.Drawing.Point(5, 143);
			this.Chk_GZ.Name = "Chk_GZ";
			this.Chk_GZ.Size = new System.Drawing.Size(80, 16);
			this.Chk_GZ.TabIndex = 62;
			this.Chk_GZ.Text = "åæ³½";
			this.Chk_GZ.UseVisualStyleBackColor = true;
			this.Chk_GZ.CheckedChanged += new System.EventHandler(Chk_GZ_CheckedChanged);
			this.CmdOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.CmdOk.Location = new System.Drawing.Point(445, 34);
			this.CmdOk.Name = "CmdOk";
			this.CmdOk.Size = new System.Drawing.Size(74, 28);
			this.CmdOk.TabIndex = 2;
			this.CmdOk.Text = "ç¡® å®";
			this.CmdOk.UseVisualStyleBackColor = true;
			this.CmdCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.CmdCancel.Location = new System.Drawing.Point(445, 77);
			this.CmdCancel.Name = "CmdCancel";
			this.CmdCancel.Size = new System.Drawing.Size(74, 28);
			this.CmdCancel.TabIndex = 3;
			this.CmdCancel.Text = "å æ¶";
			this.CmdCancel.UseVisualStyleBackColor = true;
			this.CmdCancel.Click += new System.EventHandler(CmdCancel_Click);
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(452, 124);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 4;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.GP_MB_JG.Controls.Add(this.Noise_MB);
			this.GP_MB_JG.Controls.Add(this.TB_Noise_MB);
			this.GP_MB_JG.Controls.Add(this.label73);
			this.GP_MB_JG.Controls.Add(this.CmbContour_MB);
			this.GP_MB_JG.Controls.Add(this.label74);
			this.GP_MB_JG.Controls.Add(this.label75);
			this.GP_MB_JG.Controls.Add(this.TB_Soft_MB);
			this.GP_MB_JG.Controls.Add(this.Soft_MB);
			this.GP_MB_JG.Controls.Add(this.label76);
			this.GP_MB_JG.Controls.Add(this.Rad_Edge_MB);
			this.GP_MB_JG.Controls.Add(this.Rad_Center_MB);
			this.GP_MB_JG.Controls.Add(this.label3);
			this.GP_MB_JG.Controls.Add(this.TB_Opaciyt_MB);
			this.GP_MB_JG.Controls.Add(this.label2);
			this.GP_MB_JG.Controls.Add(this.TB_Size_MB);
			this.GP_MB_JG.Controls.Add(this.CmbPos_MB);
			this.GP_MB_JG.Controls.Add(this.label15);
			this.GP_MB_JG.Controls.Add(this.Size_MB);
			this.GP_MB_JG.Controls.Add(this.label16);
			this.GP_MB_JG.Controls.Add(this.Opaicty_MB);
			this.GP_MB_JG.Controls.Add(this.label19);
			this.GP_MB_JG.Controls.Add(this.CmbBlendMode_MB);
			this.GP_MB_JG.Controls.Add(this.label20);
			this.GP_MB_JG.Location = new System.Drawing.Point(6, 30);
			this.GP_MB_JG.Name = "GP_MB_JG";
			this.GP_MB_JG.Size = new System.Drawing.Size(320, 241);
			this.GP_MB_JG.TabIndex = 44;
			this.GP_MB_JG.TabStop = false;
			this.GP_MB_JG.Text = " ç»æ ";
			this.GP_MB_JG.Visible = false;
			this.GP_MB_JG.Enter += new System.EventHandler(GP_MB_JG_Enter);
			this.Noise_MB.Location = new System.Drawing.Point(212, 209);
			this.Noise_MB.Name = "Noise_MB";
			this.Noise_MB.Size = new System.Drawing.Size(46, 21);
			this.Noise_MB.TabIndex = 102;
			this.Noise_MB.ValueChanged += new System.EventHandler(Noise_MB_ValueChanged);
			this.TB_Noise_MB.AutoSize = false;
			this.TB_Noise_MB.Location = new System.Drawing.Point(56, 208);
			this.TB_Noise_MB.Maximum = 100;
			this.TB_Noise_MB.Name = "TB_Noise_MB";
			this.TB_Noise_MB.Size = new System.Drawing.Size(150, 20);
			this.TB_Noise_MB.TabIndex = 101;
			this.TB_Noise_MB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Noise_MB.Scroll += new System.EventHandler(TB_Noise_MB_Scroll);
			this.label73.AutoSize = true;
			this.label73.Location = new System.Drawing.Point(19, 211);
			this.label73.Name = "label73";
			this.label73.Size = new System.Drawing.Size(41, 12);
			this.label73.TabIndex = 100;
			this.label73.Text = "åªé³ï¼";
			this.CmbContour_MB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbContour_MB.FormattingEnabled = true;
			this.CmbContour_MB.Items.AddRange(new object[8] { "çº¿æ§", "é¥å½¢", "é¥å½¢-åè½¬", "åå¹-æ·±", "åå¹-æµ", "é«æ¯", "åå", "ç¯å½¢" });
			this.CmbContour_MB.Location = new System.Drawing.Point(78, 177);
			this.CmbContour_MB.Name = "CmbContour_MB";
			this.CmbContour_MB.Size = new System.Drawing.Size(86, 20);
			this.CmbContour_MB.TabIndex = 99;
			this.CmbContour_MB.SelectedIndexChanged += new System.EventHandler(CmbContour_MB_SelectedIndexChanged);
			this.label74.AutoSize = true;
			this.label74.Location = new System.Drawing.Point(19, 180);
			this.label74.Name = "label74";
			this.label74.Size = new System.Drawing.Size(53, 12);
			this.label74.TabIndex = 98;
			this.label74.Text = "ç­é«çº¿ï¼";
			this.label75.AutoSize = true;
			this.label75.Location = new System.Drawing.Point(268, 150);
			this.label75.Name = "label75";
			this.label75.Size = new System.Drawing.Size(29, 12);
			this.label75.TabIndex = 97;
			this.label75.Text = "åç´ ";
			this.TB_Soft_MB.AutoSize = false;
			this.TB_Soft_MB.Location = new System.Drawing.Point(56, 148);
			this.TB_Soft_MB.Maximum = 20;
			this.TB_Soft_MB.Name = "TB_Soft_MB";
			this.TB_Soft_MB.Size = new System.Drawing.Size(150, 20);
			this.TB_Soft_MB.TabIndex = 96;
			this.TB_Soft_MB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Soft_MB.Scroll += new System.EventHandler(TB_Soft_MB_Scroll);
			this.Soft_MB.Location = new System.Drawing.Point(212, 148);
			this.Soft_MB.Maximum = new decimal(new int[4] { 20, 0, 0, 0 });
			this.Soft_MB.Name = "Soft_MB";
			this.Soft_MB.Size = new System.Drawing.Size(46, 21);
			this.Soft_MB.TabIndex = 95;
			this.Soft_MB.ValueChanged += new System.EventHandler(Soft_MB_ValueChanged);
			this.label76.AutoSize = true;
			this.label76.Location = new System.Drawing.Point(19, 150);
			this.label76.Name = "label76";
			this.label76.Size = new System.Drawing.Size(41, 12);
			this.label76.TabIndex = 94;
			this.label76.Text = "æåï¼";
			this.Rad_Edge_MB.AutoSize = true;
			this.Rad_Edge_MB.Checked = true;
			this.Rad_Edge_MB.Location = new System.Drawing.Point(250, 55);
			this.Rad_Edge_MB.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.Rad_Edge_MB.Name = "Rad_Edge_MB";
			this.Rad_Edge_MB.Size = new System.Drawing.Size(47, 16);
			this.Rad_Edge_MB.TabIndex = 69;
			this.Rad_Edge_MB.TabStop = true;
			this.Rad_Edge_MB.Text = "è¾¹ç¼";
			this.Rad_Edge_MB.UseVisualStyleBackColor = true;
			this.Rad_Edge_MB.CheckedChanged += new System.EventHandler(Rad_Edge_MB_CheckedChanged);
			this.Rad_Center_MB.AutoSize = true;
			this.Rad_Center_MB.Location = new System.Drawing.Point(189, 55);
			this.Rad_Center_MB.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.Rad_Center_MB.Name = "Rad_Center_MB";
			this.Rad_Center_MB.Size = new System.Drawing.Size(47, 16);
			this.Rad_Center_MB.TabIndex = 68;
			this.Rad_Center_MB.Text = "å±ä¸­";
			this.Rad_Center_MB.UseVisualStyleBackColor = true;
			this.Rad_Center_MB.CheckedChanged += new System.EventHandler(Rad_Center_MB_CheckedChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(261, 121);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(11, 12);
			this.label3.TabIndex = 65;
			this.label3.Text = "%";
			this.TB_Opaciyt_MB.AutoSize = false;
			this.TB_Opaciyt_MB.Location = new System.Drawing.Point(84, 120);
			this.TB_Opaciyt_MB.Maximum = 100;
			this.TB_Opaciyt_MB.Name = "TB_Opaciyt_MB";
			this.TB_Opaciyt_MB.Size = new System.Drawing.Size(100, 20);
			this.TB_Opaciyt_MB.TabIndex = 64;
			this.TB_Opaciyt_MB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opaciyt_MB.Value = 75;
			this.TB_Opaciyt_MB.Scroll += new System.EventHandler(TB_Opaciyt_MB_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(268, 26);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(29, 12);
			this.label2.TabIndex = 63;
			this.label2.Text = "åç´ ";
			this.TB_Size_MB.AutoSize = false;
			this.TB_Size_MB.Location = new System.Drawing.Point(56, 24);
			this.TB_Size_MB.Maximum = 250;
			this.TB_Size_MB.Minimum = 1;
			this.TB_Size_MB.Name = "TB_Size_MB";
			this.TB_Size_MB.Size = new System.Drawing.Size(150, 20);
			this.TB_Size_MB.TabIndex = 62;
			this.TB_Size_MB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Size_MB.Value = 2;
			this.TB_Size_MB.Scroll += new System.EventHandler(TB_Size_MB_Scroll);
			this.CmbPos_MB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbPos_MB.FormattingEnabled = true;
			this.CmbPos_MB.Items.AddRange(new object[3] { "å¤é¨", "åé¨", "å±ä¸­" });
			this.CmbPos_MB.Location = new System.Drawing.Point(90, 52);
			this.CmbPos_MB.Name = "CmbPos_MB";
			this.CmbPos_MB.Size = new System.Drawing.Size(86, 20);
			this.CmbPos_MB.TabIndex = 61;
			this.CmbPos_MB.SelectedIndexChanged += new System.EventHandler(CmbPos_MB_SelectedIndexChanged);
			this.label15.AutoSize = true;
			this.label15.Location = new System.Drawing.Point(19, 55);
			this.label15.Name = "label15";
			this.label15.Size = new System.Drawing.Size(41, 12);
			this.label15.TabIndex = 60;
			this.label15.Text = "ä½ç½®ï¼";
			this.Size_MB.Location = new System.Drawing.Point(212, 24);
			this.Size_MB.Maximum = new decimal(new int[4] { 250, 0, 0, 0 });
			this.Size_MB.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Size_MB.Name = "Size_MB";
			this.Size_MB.Size = new System.Drawing.Size(46, 21);
			this.Size_MB.TabIndex = 50;
			this.Size_MB.Value = new decimal(new int[4] { 2, 0, 0, 0 });
			this.Size_MB.ValueChanged += new System.EventHandler(Size_MB_ValueChanged);
			this.label16.AutoSize = true;
			this.label16.Location = new System.Drawing.Point(19, 26);
			this.label16.Name = "label16";
			this.label16.Size = new System.Drawing.Size(41, 12);
			this.label16.TabIndex = 49;
			this.label16.Text = "å¤§å°ï¼";
			this.Opaicty_MB.Location = new System.Drawing.Point(190, 117);
			this.Opaicty_MB.Name = "Opaicty_MB";
			this.Opaicty_MB.Size = new System.Drawing.Size(65, 21);
			this.Opaicty_MB.TabIndex = 44;
			this.Opaicty_MB.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opaicty_MB.ValueChanged += new System.EventHandler(Opaicty_MB_ValueChanged);
			this.label19.AutoSize = true;
			this.label19.Location = new System.Drawing.Point(19, 119);
			this.label19.Name = "label19";
			this.label19.Size = new System.Drawing.Size(65, 12);
			this.label19.TabIndex = 43;
			this.label19.Text = "ä¸éæåº¦ï¼";
			this.CmbBlendMode_MB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_MB.FormattingEnabled = true;
			this.CmbBlendMode_MB.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_MB.Location = new System.Drawing.Point(90, 86);
			this.CmbBlendMode_MB.Name = "CmbBlendMode_MB";
			this.CmbBlendMode_MB.Size = new System.Drawing.Size(86, 20);
			this.CmbBlendMode_MB.TabIndex = 41;
			this.CmbBlendMode_MB.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_MB_SelectedIndexChanged);
			this.label20.AutoSize = true;
			this.label20.Location = new System.Drawing.Point(19, 86);
			this.label20.Name = "label20";
			this.label20.Size = new System.Drawing.Size(65, 12);
			this.label20.TabIndex = 40;
			this.label20.Text = "æ··åæ¨¡å¼ï¼";
			this.GP_MB_TC.Controls.Add(this.PicColor_MB);
			this.GP_MB_TC.Controls.Add(this.label4);
			this.GP_MB_TC.Controls.Add(this.CmbFill_MB);
			this.GP_MB_TC.Location = new System.Drawing.Point(6, 288);
			this.GP_MB_TC.Name = "GP_MB_TC";
			this.GP_MB_TC.Size = new System.Drawing.Size(320, 71);
			this.GP_MB_TC.TabIndex = 45;
			this.GP_MB_TC.TabStop = false;
			this.GP_MB_TC.Text = " å¡«åç±»åï¼    ";
			this.GP_MB_TC.Visible = false;
			this.PicColor_MB.BackColor = System.Drawing.Color.Lime;
			this.PicColor_MB.Location = new System.Drawing.Point(66, 30);
			this.PicColor_MB.Name = "PicColor_MB";
			this.PicColor_MB.Size = new System.Drawing.Size(48, 19);
			this.PicColor_MB.TabIndex = 62;
			this.PicColor_MB.TabStop = false;
			this.PicColor_MB.Click += new System.EventHandler(PicColor_MB_Click);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(19, 32);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(41, 12);
			this.label4.TabIndex = 61;
			this.label4.Text = "é¢è²ï¼";
			this.CmbFill_MB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbFill_MB.FormattingEnabled = true;
			this.CmbFill_MB.Items.AddRange(new object[3] { "é¢è²", "æ¸å", "å¾æ¡" });
			this.CmbFill_MB.Location = new System.Drawing.Point(73, 0);
			this.CmbFill_MB.Name = "CmbFill_MB";
			this.CmbFill_MB.Size = new System.Drawing.Size(86, 20);
			this.CmbFill_MB.TabIndex = 42;
			this.CmbFill_MB.SelectedIndexChanged += new System.EventHandler(CmbFill_MB_SelectedIndexChanged);
			this.GP_NYY_JG.Controls.Add(this.Noise_NYY);
			this.GP_NYY_JG.Controls.Add(this.TB_Noise_NYY);
			this.GP_NYY_JG.Controls.Add(this.label78);
			this.GP_NYY_JG.Controls.Add(this.CmbContour_NYY);
			this.GP_NYY_JG.Controls.Add(this.label27);
			this.GP_NYY_JG.Controls.Add(this.label25);
			this.GP_NYY_JG.Controls.Add(this.Size_NYY);
			this.GP_NYY_JG.Controls.Add(this.TB_Size_NYY);
			this.GP_NYY_JG.Controls.Add(this.label26);
			this.GP_NYY_JG.Controls.Add(this.label23);
			this.GP_NYY_JG.Controls.Add(this.Choke_NYY);
			this.GP_NYY_JG.Controls.Add(this.TB_Choke_NYY);
			this.GP_NYY_JG.Controls.Add(this.label24);
			this.GP_NYY_JG.Controls.Add(this.label22);
			this.GP_NYY_JG.Controls.Add(this.Distance_NYY);
			this.GP_NYY_JG.Controls.Add(this.TB_Distance_NYY);
			this.GP_NYY_JG.Controls.Add(this.label21);
			this.GP_NYY_JG.Controls.Add(this.label18);
			this.GP_NYY_JG.Controls.Add(this.Angle_NYY);
			this.GP_NYY_JG.Controls.Add(this.TB_Angle_NYY);
			this.GP_NYY_JG.Controls.Add(this.label17);
			this.GP_NYY_JG.Controls.Add(this.TB_Opaciyt_NYY);
			this.GP_NYY_JG.Controls.Add(this.label6);
			this.GP_NYY_JG.Controls.Add(this.Opaicty_NYY);
			this.GP_NYY_JG.Controls.Add(this.label5);
			this.GP_NYY_JG.Controls.Add(this.PicColor_NYY);
			this.GP_NYY_JG.Controls.Add(this.CmbBlendMode_NYY);
			this.GP_NYY_JG.Controls.Add(this.label12);
			this.GP_NYY_JG.Location = new System.Drawing.Point(6, 378);
			this.GP_NYY_JG.Name = "GP_NYY_JG";
			this.GP_NYY_JG.Size = new System.Drawing.Size(320, 278);
			this.GP_NYY_JG.TabIndex = 47;
			this.GP_NYY_JG.TabStop = false;
			this.GP_NYY_JG.Text = " ç»æ ";
			this.GP_NYY_JG.Visible = false;
			this.CmbContour_NYY.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbContour_NYY.FormattingEnabled = true;
			this.CmbContour_NYY.Items.AddRange(new object[8] { "çº¿æ§", "é¥å½¢", "é¥å½¢-åè½¬", "åå¹-æ·±", "åå¹-æµ", "é«æ¯", "åå", "ç¯å½¢" });
			this.CmbContour_NYY.Location = new System.Drawing.Point(89, 197);
			this.CmbContour_NYY.Name = "CmbContour_NYY";
			this.CmbContour_NYY.Size = new System.Drawing.Size(86, 20);
			this.CmbContour_NYY.TabIndex = 85;
			this.CmbContour_NYY.SelectedIndexChanged += new System.EventHandler(CmbContour_NYY_SelectedIndexChanged);
			this.label27.AutoSize = true;
			this.label27.Location = new System.Drawing.Point(30, 200);
			this.label27.Name = "label27";
			this.label27.Size = new System.Drawing.Size(53, 12);
			this.label27.TabIndex = 84;
			this.label27.Text = "ç­é«çº¿ï¼";
			this.label25.AutoSize = true;
			this.label25.Location = new System.Drawing.Point(282, 167);
			this.label25.Name = "label25";
			this.label25.Size = new System.Drawing.Size(29, 12);
			this.label25.TabIndex = 83;
			this.label25.Text = "åç´ ";
			this.Size_NYY.Location = new System.Drawing.Point(202, 164);
			this.Size_NYY.Name = "Size_NYY";
			this.Size_NYY.Size = new System.Drawing.Size(65, 21);
			this.Size_NYY.TabIndex = 82;
			this.Size_NYY.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Size_NYY.ValueChanged += new System.EventHandler(Size_NYY_ValueChanged);
			this.TB_Size_NYY.AutoSize = false;
			this.TB_Size_NYY.Location = new System.Drawing.Point(89, 167);
			this.TB_Size_NYY.Maximum = 100;
			this.TB_Size_NYY.Name = "TB_Size_NYY";
			this.TB_Size_NYY.Size = new System.Drawing.Size(100, 20);
			this.TB_Size_NYY.TabIndex = 81;
			this.TB_Size_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Size_NYY.Value = 10;
			this.TB_Size_NYY.Scroll += new System.EventHandler(TB_Size_NYY_Scroll);
			this.label26.AutoSize = true;
			this.label26.Location = new System.Drawing.Point(42, 171);
			this.label26.Name = "label26";
			this.label26.Size = new System.Drawing.Size(41, 12);
			this.label26.TabIndex = 80;
			this.label26.Text = "å¤§å°ï¼";
			this.label23.AutoSize = true;
			this.label23.Location = new System.Drawing.Point(282, 140);
			this.label23.Name = "label23";
			this.label23.Size = new System.Drawing.Size(11, 12);
			this.label23.TabIndex = 79;
			this.label23.Text = "%";
			this.Choke_NYY.Location = new System.Drawing.Point(202, 137);
			this.Choke_NYY.Name = "Choke_NYY";
			this.Choke_NYY.Size = new System.Drawing.Size(65, 21);
			this.Choke_NYY.TabIndex = 78;
			this.Choke_NYY.Value = new decimal(new int[4] { 50, 0, 0, 0 });
			this.Choke_NYY.ValueChanged += new System.EventHandler(Choke_NYY_ValueChanged);
			this.TB_Choke_NYY.AutoSize = false;
			this.TB_Choke_NYY.Location = new System.Drawing.Point(89, 140);
			this.TB_Choke_NYY.Maximum = 100;
			this.TB_Choke_NYY.Name = "TB_Choke_NYY";
			this.TB_Choke_NYY.Size = new System.Drawing.Size(100, 20);
			this.TB_Choke_NYY.TabIndex = 77;
			this.TB_Choke_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Choke_NYY.Value = 50;
			this.TB_Choke_NYY.Scroll += new System.EventHandler(TB_Choke_NYY_Scroll);
			this.label24.AutoSize = true;
			this.label24.Location = new System.Drawing.Point(42, 144);
			this.label24.Name = "label24";
			this.label24.Size = new System.Drawing.Size(41, 12);
			this.label24.TabIndex = 76;
			this.label24.Text = "é»å¡ï¼";
			this.label22.AutoSize = true;
			this.label22.Location = new System.Drawing.Point(282, 114);
			this.label22.Name = "label22";
			this.label22.Size = new System.Drawing.Size(29, 12);
			this.label22.TabIndex = 75;
			this.label22.Text = "åç´ ";
			this.Distance_NYY.Location = new System.Drawing.Point(202, 109);
			this.Distance_NYY.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Distance_NYY.Name = "Distance_NYY";
			this.Distance_NYY.Size = new System.Drawing.Size(65, 21);
			this.Distance_NYY.TabIndex = 74;
			this.Distance_NYY.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.Distance_NYY.ValueChanged += new System.EventHandler(Distance_NYY_ValueChanged);
			this.TB_Distance_NYY.AutoSize = false;
			this.TB_Distance_NYY.Location = new System.Drawing.Point(89, 110);
			this.TB_Distance_NYY.Maximum = 100;
			this.TB_Distance_NYY.Minimum = 1;
			this.TB_Distance_NYY.Name = "TB_Distance_NYY";
			this.TB_Distance_NYY.Size = new System.Drawing.Size(100, 20);
			this.TB_Distance_NYY.TabIndex = 73;
			this.TB_Distance_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Distance_NYY.Value = 5;
			this.TB_Distance_NYY.Scroll += new System.EventHandler(TB_Distance_NYY_Scroll);
			this.label21.AutoSize = true;
			this.label21.Location = new System.Drawing.Point(42, 114);
			this.label21.Name = "label21";
			this.label21.Size = new System.Drawing.Size(41, 12);
			this.label21.TabIndex = 72;
			this.label21.Text = "è·ç¦»ï¼";
			this.label18.AutoSize = true;
			this.label18.Location = new System.Drawing.Point(281, 87);
			this.label18.Name = "label18";
			this.label18.Size = new System.Drawing.Size(17, 12);
			this.label18.TabIndex = 71;
			this.label18.Text = "åº¦";
			this.Angle_NYY.Location = new System.Drawing.Point(202, 83);
			this.Angle_NYY.Maximum = new decimal(new int[4] { 180, 0, 0, 0 });
			this.Angle_NYY.Minimum = new decimal(new int[4] { 180, 0, 0, -2147483648 });
			this.Angle_NYY.Name = "Angle_NYY";
			this.Angle_NYY.Size = new System.Drawing.Size(65, 21);
			this.Angle_NYY.TabIndex = 70;
			this.Angle_NYY.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.Angle_NYY.ValueChanged += new System.EventHandler(Angle_NYY_ValueChanged);
			this.TB_Angle_NYY.AutoSize = false;
			this.TB_Angle_NYY.Location = new System.Drawing.Point(90, 82);
			this.TB_Angle_NYY.Maximum = 180;
			this.TB_Angle_NYY.Minimum = -180;
			this.TB_Angle_NYY.Name = "TB_Angle_NYY";
			this.TB_Angle_NYY.Size = new System.Drawing.Size(100, 20);
			this.TB_Angle_NYY.TabIndex = 69;
			this.TB_Angle_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Angle_NYY.Value = 30;
			this.TB_Angle_NYY.Scroll += new System.EventHandler(TB_Angle_NYY_Scroll);
			this.label17.AutoSize = true;
			this.label17.Location = new System.Drawing.Point(42, 82);
			this.label17.Name = "label17";
			this.label17.Size = new System.Drawing.Size(41, 12);
			this.label17.TabIndex = 68;
			this.label17.Text = "è§åº¦ï¼";
			this.TB_Opaciyt_NYY.AutoSize = false;
			this.TB_Opaciyt_NYY.Location = new System.Drawing.Point(90, 55);
			this.TB_Opaciyt_NYY.Maximum = 100;
			this.TB_Opaciyt_NYY.Name = "TB_Opaciyt_NYY";
			this.TB_Opaciyt_NYY.Size = new System.Drawing.Size(100, 20);
			this.TB_Opaciyt_NYY.TabIndex = 67;
			this.TB_Opaciyt_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opaciyt_NYY.Value = 75;
			this.TB_Opaciyt_NYY.Scroll += new System.EventHandler(TB_Opaciyt_NYY_Scroll);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(282, 60);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(11, 12);
			this.label6.TabIndex = 66;
			this.label6.Text = "%";
			this.Opaicty_NYY.Location = new System.Drawing.Point(202, 56);
			this.Opaicty_NYY.Name = "Opaicty_NYY";
			this.Opaicty_NYY.Size = new System.Drawing.Size(65, 21);
			this.Opaicty_NYY.TabIndex = 47;
			this.Opaicty_NYY.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opaicty_NYY.ValueChanged += new System.EventHandler(Opaicty_NYY_ValueChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(19, 56);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(65, 12);
			this.label5.TabIndex = 46;
			this.label5.Text = "ä¸éæåº¦ï¼";
			this.PicColor_NYY.BackColor = System.Drawing.SystemColors.Highlight;
			this.PicColor_NYY.Location = new System.Drawing.Point(219, 24);
			this.PicColor_NYY.Name = "PicColor_NYY";
			this.PicColor_NYY.Size = new System.Drawing.Size(48, 19);
			this.PicColor_NYY.TabIndex = 45;
			this.PicColor_NYY.TabStop = false;
			this.PicColor_NYY.Click += new System.EventHandler(PicColor_NYY_Click);
			this.CmbBlendMode_NYY.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_NYY.FormattingEnabled = true;
			this.CmbBlendMode_NYY.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_NYY.Location = new System.Drawing.Point(101, 23);
			this.CmbBlendMode_NYY.Name = "CmbBlendMode_NYY";
			this.CmbBlendMode_NYY.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_NYY.TabIndex = 44;
			this.CmbBlendMode_NYY.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_NYY_SelectedIndexChanged);
			this.label12.AutoSize = true;
			this.label12.Location = new System.Drawing.Point(19, 26);
			this.label12.Name = "label12";
			this.label12.Size = new System.Drawing.Size(65, 12);
			this.label12.TabIndex = 43;
			this.label12.Text = "æ··åæ¨¡å¼ï¼";
			this.GP_GZ.Controls.Add(this.ChkInvert_GZ);
			this.GP_GZ.Controls.Add(this.CmbContour_GZ);
			this.GP_GZ.Controls.Add(this.label7);
			this.GP_GZ.Controls.Add(this.label8);
			this.GP_GZ.Controls.Add(this.Size_GZ);
			this.GP_GZ.Controls.Add(this.TB_Size_GZ);
			this.GP_GZ.Controls.Add(this.label9);
			this.GP_GZ.Controls.Add(this.label13);
			this.GP_GZ.Controls.Add(this.Distance_GZ);
			this.GP_GZ.Controls.Add(this.TB_Distance_GZ);
			this.GP_GZ.Controls.Add(this.label14);
			this.GP_GZ.Controls.Add(this.label28);
			this.GP_GZ.Controls.Add(this.Angle_GZ);
			this.GP_GZ.Controls.Add(this.TB_Angle_GZ);
			this.GP_GZ.Controls.Add(this.label29);
			this.GP_GZ.Controls.Add(this.TB_Opacity_GZ);
			this.GP_GZ.Controls.Add(this.label30);
			this.GP_GZ.Controls.Add(this.Opacity_GZ);
			this.GP_GZ.Controls.Add(this.label31);
			this.GP_GZ.Controls.Add(this.PicColor_GZ);
			this.GP_GZ.Controls.Add(this.CmbBlendMode_GZ);
			this.GP_GZ.Controls.Add(this.label32);
			this.GP_GZ.Location = new System.Drawing.Point(423, 296);
			this.GP_GZ.Name = "GP_GZ";
			this.GP_GZ.Size = new System.Drawing.Size(320, 201);
			this.GP_GZ.TabIndex = 48;
			this.GP_GZ.TabStop = false;
			this.GP_GZ.Text = " ç»æ ";
			this.ChkInvert_GZ.Location = new System.Drawing.Point(201, 170);
			this.ChkInvert_GZ.Name = "ChkInvert_GZ";
			this.ChkInvert_GZ.Size = new System.Drawing.Size(80, 16);
			this.ChkInvert_GZ.TabIndex = 111;
			this.ChkInvert_GZ.Text = "åç¸";
			this.ChkInvert_GZ.UseVisualStyleBackColor = true;
			this.ChkInvert_GZ.CheckedChanged += new System.EventHandler(ChkInvert_GZ_CheckedChanged);
			this.CmbContour_GZ.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbContour_GZ.FormattingEnabled = true;
			this.CmbContour_GZ.Items.AddRange(new object[8] { "çº¿æ§", "é¥å½¢", "é¥å½¢-åè½¬", "åå¹-æ·±", "åå¹-æµ", "é«æ¯", "åå", "ç¯å½¢" });
			this.CmbContour_GZ.Location = new System.Drawing.Point(92, 170);
			this.CmbContour_GZ.Name = "CmbContour_GZ";
			this.CmbContour_GZ.Size = new System.Drawing.Size(86, 20);
			this.CmbContour_GZ.TabIndex = 110;
			this.CmbContour_GZ.SelectedIndexChanged += new System.EventHandler(CmbContour_GZ_SelectedIndexChanged);
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(33, 173);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(53, 12);
			this.label7.TabIndex = 109;
			this.label7.Text = "ç­é«çº¿ï¼";
			this.label8.AutoSize = true;
			this.label8.Location = new System.Drawing.Point(283, 140);
			this.label8.Name = "label8";
			this.label8.Size = new System.Drawing.Size(29, 12);
			this.label8.TabIndex = 108;
			this.label8.Text = "åç´ ";
			this.Size_GZ.Location = new System.Drawing.Point(205, 137);
			this.Size_GZ.Name = "Size_GZ";
			this.Size_GZ.Size = new System.Drawing.Size(65, 21);
			this.Size_GZ.TabIndex = 107;
			this.Size_GZ.Value = new decimal(new int[4] { 2, 0, 0, 0 });
			this.Size_GZ.ValueChanged += new System.EventHandler(Size_GZ_ValueChanged);
			this.TB_Size_GZ.AutoSize = false;
			this.TB_Size_GZ.Location = new System.Drawing.Point(92, 140);
			this.TB_Size_GZ.Maximum = 100;
			this.TB_Size_GZ.Name = "TB_Size_GZ";
			this.TB_Size_GZ.Size = new System.Drawing.Size(100, 20);
			this.TB_Size_GZ.TabIndex = 106;
			this.TB_Size_GZ.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Size_GZ.Value = 2;
			this.TB_Size_GZ.Scroll += new System.EventHandler(TB_Size_GZ_Scroll);
			this.label9.AutoSize = true;
			this.label9.Location = new System.Drawing.Point(45, 144);
			this.label9.Name = "label9";
			this.label9.Size = new System.Drawing.Size(41, 12);
			this.label9.TabIndex = 105;
			this.label9.Text = "å¤§å°ï¼";
			this.label13.AutoSize = true;
			this.label13.Location = new System.Drawing.Point(284, 114);
			this.label13.Name = "label13";
			this.label13.Size = new System.Drawing.Size(29, 12);
			this.label13.TabIndex = 100;
			this.label13.Text = "åç´ ";
			this.Distance_GZ.Location = new System.Drawing.Point(204, 109);
			this.Distance_GZ.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Distance_GZ.Name = "Distance_GZ";
			this.Distance_GZ.Size = new System.Drawing.Size(65, 21);
			this.Distance_GZ.TabIndex = 99;
			this.Distance_GZ.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Distance_GZ.ValueChanged += new System.EventHandler(Distance_GZ_ValueChanged);
			this.TB_Distance_GZ.AutoSize = false;
			this.TB_Distance_GZ.Location = new System.Drawing.Point(91, 110);
			this.TB_Distance_GZ.Maximum = 100;
			this.TB_Distance_GZ.Minimum = 1;
			this.TB_Distance_GZ.Name = "TB_Distance_GZ";
			this.TB_Distance_GZ.Size = new System.Drawing.Size(100, 20);
			this.TB_Distance_GZ.TabIndex = 98;
			this.TB_Distance_GZ.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Distance_GZ.Value = 10;
			this.TB_Distance_GZ.Scroll += new System.EventHandler(TB_Distance_GZ_Scroll);
			this.label14.AutoSize = true;
			this.label14.Location = new System.Drawing.Point(44, 114);
			this.label14.Name = "label14";
			this.label14.Size = new System.Drawing.Size(41, 12);
			this.label14.TabIndex = 97;
			this.label14.Text = "è·ç¦»ï¼";
			this.label28.AutoSize = true;
			this.label28.Location = new System.Drawing.Point(283, 87);
			this.label28.Name = "label28";
			this.label28.Size = new System.Drawing.Size(17, 12);
			this.label28.TabIndex = 96;
			this.label28.Text = "åº¦";
			this.Angle_GZ.Location = new System.Drawing.Point(204, 83);
			this.Angle_GZ.Maximum = new decimal(new int[4] { 180, 0, 0, 0 });
			this.Angle_GZ.Minimum = new decimal(new int[4] { 180, 0, 0, -2147483648 });
			this.Angle_GZ.Name = "Angle_GZ";
			this.Angle_GZ.Size = new System.Drawing.Size(65, 21);
			this.Angle_GZ.TabIndex = 95;
			this.Angle_GZ.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.Angle_GZ.ValueChanged += new System.EventHandler(Angle_GZ_ValueChanged);
			this.TB_Angle_GZ.AutoSize = false;
			this.TB_Angle_GZ.Location = new System.Drawing.Point(92, 82);
			this.TB_Angle_GZ.Maximum = 180;
			this.TB_Angle_GZ.Minimum = -180;
			this.TB_Angle_GZ.Name = "TB_Angle_GZ";
			this.TB_Angle_GZ.Size = new System.Drawing.Size(100, 20);
			this.TB_Angle_GZ.TabIndex = 94;
			this.TB_Angle_GZ.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Angle_GZ.Value = 30;
			this.TB_Angle_GZ.Scroll += new System.EventHandler(TB_Angle_GZ_Scroll);
			this.label29.AutoSize = true;
			this.label29.Location = new System.Drawing.Point(44, 82);
			this.label29.Name = "label29";
			this.label29.Size = new System.Drawing.Size(41, 12);
			this.label29.TabIndex = 93;
			this.label29.Text = "è§åº¦ï¼";
			this.TB_Opacity_GZ.AutoSize = false;
			this.TB_Opacity_GZ.Location = new System.Drawing.Point(92, 55);
			this.TB_Opacity_GZ.Maximum = 100;
			this.TB_Opacity_GZ.Name = "TB_Opacity_GZ";
			this.TB_Opacity_GZ.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_GZ.TabIndex = 92;
			this.TB_Opacity_GZ.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_GZ.Value = 75;
			this.TB_Opacity_GZ.Scroll += new System.EventHandler(TB_Opacity_GZ_Scroll);
			this.label30.AutoSize = true;
			this.label30.Location = new System.Drawing.Point(284, 60);
			this.label30.Name = "label30";
			this.label30.Size = new System.Drawing.Size(11, 12);
			this.label30.TabIndex = 91;
			this.label30.Text = "%";
			this.Opacity_GZ.ImeMode = System.Windows.Forms.ImeMode.On;
			this.Opacity_GZ.Location = new System.Drawing.Point(204, 56);
			this.Opacity_GZ.Name = "Opacity_GZ";
			this.Opacity_GZ.Size = new System.Drawing.Size(65, 21);
			this.Opacity_GZ.TabIndex = 90;
			this.Opacity_GZ.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_GZ.ValueChanged += new System.EventHandler(Opacity_GZ_ValueChanged);
			this.label31.AutoSize = true;
			this.label31.Location = new System.Drawing.Point(21, 56);
			this.label31.Name = "label31";
			this.label31.Size = new System.Drawing.Size(65, 12);
			this.label31.TabIndex = 89;
			this.label31.Text = "ä¸éæåº¦ï¼";
			this.PicColor_GZ.BackColor = System.Drawing.SystemColors.ActiveCaption;
			this.PicColor_GZ.Location = new System.Drawing.Point(222, 25);
			this.PicColor_GZ.Name = "PicColor_GZ";
			this.PicColor_GZ.Size = new System.Drawing.Size(48, 19);
			this.PicColor_GZ.TabIndex = 88;
			this.PicColor_GZ.TabStop = false;
			this.PicColor_GZ.Click += new System.EventHandler(PicColor_GZ_Click);
			this.CmbBlendMode_GZ.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_GZ.FormattingEnabled = true;
			this.CmbBlendMode_GZ.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_GZ.Location = new System.Drawing.Point(104, 24);
			this.CmbBlendMode_GZ.Name = "CmbBlendMode_GZ";
			this.CmbBlendMode_GZ.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_GZ.TabIndex = 87;
			this.CmbBlendMode_GZ.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_GZ_SelectedIndexChanged);
			this.label32.AutoSize = true;
			this.label32.Location = new System.Drawing.Point(22, 27);
			this.label32.Name = "label32";
			this.label32.Size = new System.Drawing.Size(65, 12);
			this.label32.TabIndex = 86;
			this.label32.Text = "æ··åæ¨¡å¼ï¼";
			this.GP_Frame.Controls.Add(this.GP_JB);
			this.GP_Frame.Controls.Add(this.GP_XMFD);
			this.GP_Frame.Controls.Add(this.GP_TA);
			this.GP_Frame.Controls.Add(this.GP_NYY_JG);
			this.GP_Frame.Controls.Add(this.GP_YS);
			this.GP_Frame.Controls.Add(this.GP_TY_JG);
			this.GP_Frame.Controls.Add(this.GP_GZ);
			this.GP_Frame.Controls.Add(this.GP_MB_TC);
			this.GP_Frame.Controls.Add(this.GP_MB_JG);
			this.GP_Frame.Location = new System.Drawing.Point(110, 12);
			this.GP_Frame.Name = "GP_Frame";
			this.GP_Frame.Size = new System.Drawing.Size(1303, 662);
			this.GP_Frame.TabIndex = 1;
			this.GP_Frame.TabStop = false;
			this.GP_Frame.Text = "æ··åéé¡¹";
			this.GP_Frame.Enter += new System.EventHandler(GP_Frame_Enter);
			this.GP_XMFD.Controls.Add(this.label72);
			this.GP_XMFD.Controls.Add(this.TB_SoftenSize_XMFD);
			this.GP_XMFD.Controls.Add(this.SoftenSize_XMFD);
			this.GP_XMFD.Controls.Add(this.label71);
			this.GP_XMFD.Controls.Add(this.label69);
			this.GP_XMFD.Controls.Add(this.TB_Opacity_XMFD_S);
			this.GP_XMFD.Controls.Add(this.Opacity_XMFD_S);
			this.GP_XMFD.Controls.Add(this.label70);
			this.GP_XMFD.Controls.Add(this.CmbBlendMode_XMFD_S);
			this.GP_XMFD.Controls.Add(this.label67);
			this.GP_XMFD.Controls.Add(this.TB_Opacity_XMFD_H);
			this.GP_XMFD.Controls.Add(this.Opacity_XMFD_H);
			this.GP_XMFD.Controls.Add(this.label68);
			this.GP_XMFD.Controls.Add(this.CmbBlendMode_XMFD_H);
			this.GP_XMFD.Controls.Add(this.label65);
			this.GP_XMFD.Controls.Add(this.Depth_XMFD);
			this.GP_XMFD.Controls.Add(this.TB_Depth_XMFD);
			this.GP_XMFD.Controls.Add(this.label66);
			this.GP_XMFD.Controls.Add(this.PicShadow_XFMD);
			this.GP_XMFD.Controls.Add(this.label64);
			this.GP_XMFD.Controls.Add(this.PicHighlight_XMFD);
			this.GP_XMFD.Controls.Add(this.label63);
			this.GP_XMFD.Controls.Add(this.label57);
			this.GP_XMFD.Controls.Add(this.Height_XMFD);
			this.GP_XMFD.Controls.Add(this.TB_Height_XMFD);
			this.GP_XMFD.Controls.Add(this.label59);
			this.GP_XMFD.Controls.Add(this.label61);
			this.GP_XMFD.Controls.Add(this.Angle_XMFD);
			this.GP_XMFD.Controls.Add(this.TB_Angle_XMFD);
			this.GP_XMFD.Controls.Add(this.label62);
			this.GP_XMFD.Controls.Add(this.label58);
			this.GP_XMFD.Controls.Add(this.TB_Size_XFMD);
			this.GP_XMFD.Controls.Add(this.Size_XMFD);
			this.GP_XMFD.Controls.Add(this.label60);
			this.GP_XMFD.Location = new System.Drawing.Point(755, 249);
			this.GP_XMFD.Name = "GP_XMFD";
			this.GP_XMFD.Size = new System.Drawing.Size(320, 302);
			this.GP_XMFD.TabIndex = 53;
			this.GP_XMFD.TabStop = false;
			this.GP_XMFD.Text = " ç»æ/é´å½± ";
			this.GP_XMFD.Visible = false;
			this.label72.AutoSize = true;
			this.label72.Location = new System.Drawing.Point(256, 55);
			this.label72.Name = "label72";
			this.label72.Size = new System.Drawing.Size(29, 12);
			this.label72.TabIndex = 105;
			this.label72.Text = "åç´ ";
			this.TB_SoftenSize_XMFD.AutoSize = false;
			this.TB_SoftenSize_XMFD.Location = new System.Drawing.Point(56, 50);
			this.TB_SoftenSize_XMFD.Maximum = 100;
			this.TB_SoftenSize_XMFD.Name = "TB_SoftenSize_XMFD";
			this.TB_SoftenSize_XMFD.Size = new System.Drawing.Size(100, 20);
			this.TB_SoftenSize_XMFD.TabIndex = 104;
			this.TB_SoftenSize_XMFD.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_SoftenSize_XMFD.Scroll += new System.EventHandler(TB_SoftenSize_XMFD_Scroll);
			this.SoftenSize_XMFD.Location = new System.Drawing.Point(179, 50);
			this.SoftenSize_XMFD.Name = "SoftenSize_XMFD";
			this.SoftenSize_XMFD.Size = new System.Drawing.Size(64, 21);
			this.SoftenSize_XMFD.TabIndex = 103;
			this.SoftenSize_XMFD.ValueChanged += new System.EventHandler(SoftenSize_XMFD_ValueChanged);
			this.label71.AutoSize = true;
			this.label71.Location = new System.Drawing.Point(19, 52);
			this.label71.Name = "label71";
			this.label71.Size = new System.Drawing.Size(41, 12);
			this.label71.TabIndex = 102;
			this.label71.Text = "è½¯åï¼";
			this.label69.AutoSize = true;
			this.label69.Location = new System.Drawing.Point(261, 253);
			this.label69.Name = "label69";
			this.label69.Size = new System.Drawing.Size(11, 12);
			this.label69.TabIndex = 101;
			this.label69.Text = "%";
			this.TB_Opacity_XMFD_S.AutoSize = false;
			this.TB_Opacity_XMFD_S.Location = new System.Drawing.Point(84, 252);
			this.TB_Opacity_XMFD_S.Maximum = 100;
			this.TB_Opacity_XMFD_S.Name = "TB_Opacity_XMFD_S";
			this.TB_Opacity_XMFD_S.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_XMFD_S.TabIndex = 100;
			this.TB_Opacity_XMFD_S.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_XMFD_S.Value = 75;
			this.TB_Opacity_XMFD_S.Scroll += new System.EventHandler(TB_Opacity_XMFD_S_Scroll);
			this.Opacity_XMFD_S.Location = new System.Drawing.Point(190, 249);
			this.Opacity_XMFD_S.Name = "Opacity_XMFD_S";
			this.Opacity_XMFD_S.Size = new System.Drawing.Size(65, 21);
			this.Opacity_XMFD_S.TabIndex = 99;
			this.Opacity_XMFD_S.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_XMFD_S.ValueChanged += new System.EventHandler(Opacity_XMFD_S_ValueChanged);
			this.label70.AutoSize = true;
			this.label70.Location = new System.Drawing.Point(19, 253);
			this.label70.Name = "label70";
			this.label70.Size = new System.Drawing.Size(65, 12);
			this.label70.TabIndex = 98;
			this.label70.Text = "ä¸éæåº¦ï¼";
			this.CmbBlendMode_XMFD_S.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_XMFD_S.FormattingEnabled = true;
			this.CmbBlendMode_XMFD_S.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_XMFD_S.Location = new System.Drawing.Point(90, 220);
			this.CmbBlendMode_XMFD_S.Name = "CmbBlendMode_XMFD_S";
			this.CmbBlendMode_XMFD_S.Size = new System.Drawing.Size(86, 20);
			this.CmbBlendMode_XMFD_S.TabIndex = 97;
			this.CmbBlendMode_XMFD_S.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_XMFD_S_SelectedIndexChanged);
			this.label67.AutoSize = true;
			this.label67.Location = new System.Drawing.Point(261, 194);
			this.label67.Name = "label67";
			this.label67.Size = new System.Drawing.Size(11, 12);
			this.label67.TabIndex = 96;
			this.label67.Text = "%";
			this.TB_Opacity_XMFD_H.AutoSize = false;
			this.TB_Opacity_XMFD_H.Location = new System.Drawing.Point(84, 193);
			this.TB_Opacity_XMFD_H.Maximum = 100;
			this.TB_Opacity_XMFD_H.Name = "TB_Opacity_XMFD_H";
			this.TB_Opacity_XMFD_H.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_XMFD_H.TabIndex = 95;
			this.TB_Opacity_XMFD_H.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_XMFD_H.Value = 75;
			this.TB_Opacity_XMFD_H.Scroll += new System.EventHandler(TB_Opacity_XMFD_H_Scroll);
			this.Opacity_XMFD_H.Location = new System.Drawing.Point(190, 190);
			this.Opacity_XMFD_H.Name = "Opacity_XMFD_H";
			this.Opacity_XMFD_H.Size = new System.Drawing.Size(65, 21);
			this.Opacity_XMFD_H.TabIndex = 94;
			this.Opacity_XMFD_H.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_XMFD_H.ValueChanged += new System.EventHandler(Opacity_XMFD_H_ValueChanged);
			this.label68.AutoSize = true;
			this.label68.Location = new System.Drawing.Point(19, 194);
			this.label68.Name = "label68";
			this.label68.Size = new System.Drawing.Size(65, 12);
			this.label68.TabIndex = 93;
			this.label68.Text = "ä¸éæåº¦ï¼";
			this.CmbBlendMode_XMFD_H.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_XMFD_H.FormattingEnabled = true;
			this.CmbBlendMode_XMFD_H.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_XMFD_H.Location = new System.Drawing.Point(90, 164);
			this.CmbBlendMode_XMFD_H.Name = "CmbBlendMode_XMFD_H";
			this.CmbBlendMode_XMFD_H.Size = new System.Drawing.Size(86, 20);
			this.CmbBlendMode_XMFD_H.TabIndex = 92;
			this.CmbBlendMode_XMFD_H.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_XMFD_H_SelectedIndexChanged);
			this.label65.AutoSize = true;
			this.label65.Location = new System.Drawing.Point(256, 137);
			this.label65.Name = "label65";
			this.label65.Size = new System.Drawing.Size(11, 12);
			this.label65.TabIndex = 91;
			this.label65.Text = "%";
			this.Depth_XMFD.Location = new System.Drawing.Point(179, 132);
			this.Depth_XMFD.Maximum = new decimal(new int[4] { 500, 0, 0, 0 });
			this.Depth_XMFD.Name = "Depth_XMFD";
			this.Depth_XMFD.Size = new System.Drawing.Size(65, 21);
			this.Depth_XMFD.TabIndex = 90;
			this.Depth_XMFD.Value = new decimal(new int[4] { 100, 0, 0, 0 });
			this.Depth_XMFD.ValueChanged += new System.EventHandler(Depth_XMFD_ValueChanged);
			this.TB_Depth_XMFD.AutoSize = false;
			this.TB_Depth_XMFD.Location = new System.Drawing.Point(66, 133);
			this.TB_Depth_XMFD.Maximum = 500;
			this.TB_Depth_XMFD.Name = "TB_Depth_XMFD";
			this.TB_Depth_XMFD.Size = new System.Drawing.Size(100, 20);
			this.TB_Depth_XMFD.TabIndex = 89;
			this.TB_Depth_XMFD.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Depth_XMFD.Value = 100;
			this.TB_Depth_XMFD.Scroll += new System.EventHandler(TB_Depth_XMFD_Scroll);
			this.label66.AutoSize = true;
			this.label66.Location = new System.Drawing.Point(19, 137);
			this.label66.Name = "label66";
			this.label66.Size = new System.Drawing.Size(41, 12);
			this.label66.TabIndex = 88;
			this.label66.Text = "æ·±åº¦ï¼";
			this.PicShadow_XFMD.BackColor = System.Drawing.Color.Black;
			this.PicShadow_XFMD.Location = new System.Drawing.Point(195, 221);
			this.PicShadow_XFMD.Name = "PicShadow_XFMD";
			this.PicShadow_XFMD.Size = new System.Drawing.Size(48, 19);
			this.PicShadow_XFMD.TabIndex = 87;
			this.PicShadow_XFMD.TabStop = false;
			this.PicShadow_XFMD.Click += new System.EventHandler(PicShadow_XFMD_Click);
			this.label64.AutoSize = true;
			this.label64.Location = new System.Drawing.Point(19, 223);
			this.label64.Name = "label64";
			this.label64.Size = new System.Drawing.Size(65, 12);
			this.label64.TabIndex = 86;
			this.label64.Text = "é´å½±æ¨¡å¼ï¼";
			this.PicHighlight_XMFD.BackColor = System.Drawing.Color.White;
			this.PicHighlight_XMFD.Location = new System.Drawing.Point(195, 164);
			this.PicHighlight_XMFD.Name = "PicHighlight_XMFD";
			this.PicHighlight_XMFD.Size = new System.Drawing.Size(48, 19);
			this.PicHighlight_XMFD.TabIndex = 85;
			this.PicHighlight_XMFD.TabStop = false;
			this.PicHighlight_XMFD.Click += new System.EventHandler(PicHighlight_XMFD_Click);
			this.label63.AutoSize = true;
			this.label63.Location = new System.Drawing.Point(19, 166);
			this.label63.Name = "label63";
			this.label63.Size = new System.Drawing.Size(65, 12);
			this.label63.TabIndex = 84;
			this.label63.Text = "é«åæ¨¡å¼ï¼";
			this.label57.AutoSize = true;
			this.label57.Location = new System.Drawing.Point(256, 110);
			this.label57.Name = "label57";
			this.label57.Size = new System.Drawing.Size(29, 12);
			this.label57.TabIndex = 83;
			this.label57.Text = "åç´ ";
			this.Height_XMFD.Location = new System.Drawing.Point(179, 105);
			this.Height_XMFD.Maximum = new decimal(new int[4] { 90, 0, 0, 0 });
			this.Height_XMFD.Name = "Height_XMFD";
			this.Height_XMFD.Size = new System.Drawing.Size(65, 21);
			this.Height_XMFD.TabIndex = 82;
			this.Height_XMFD.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.Height_XMFD.ValueChanged += new System.EventHandler(Height_XMFD_ValueChanged);
			this.TB_Height_XMFD.AutoSize = false;
			this.TB_Height_XMFD.Location = new System.Drawing.Point(66, 106);
			this.TB_Height_XMFD.Maximum = 90;
			this.TB_Height_XMFD.Name = "TB_Height_XMFD";
			this.TB_Height_XMFD.Size = new System.Drawing.Size(100, 20);
			this.TB_Height_XMFD.TabIndex = 81;
			this.TB_Height_XMFD.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Height_XMFD.Value = 30;
			this.TB_Height_XMFD.Scroll += new System.EventHandler(TB_Height_XMFD_Scroll);
			this.label59.AutoSize = true;
			this.label59.Location = new System.Drawing.Point(19, 110);
			this.label59.Name = "label59";
			this.label59.Size = new System.Drawing.Size(41, 12);
			this.label59.TabIndex = 80;
			this.label59.Text = "é«åº¦ï¼";
			this.label61.AutoSize = true;
			this.label61.Location = new System.Drawing.Point(255, 83);
			this.label61.Name = "label61";
			this.label61.Size = new System.Drawing.Size(17, 12);
			this.label61.TabIndex = 79;
			this.label61.Text = "åº¦";
			this.Angle_XMFD.Location = new System.Drawing.Point(179, 79);
			this.Angle_XMFD.Maximum = new decimal(new int[4] { 180, 0, 0, 0 });
			this.Angle_XMFD.Minimum = new decimal(new int[4] { 180, 0, 0, -2147483648 });
			this.Angle_XMFD.Name = "Angle_XMFD";
			this.Angle_XMFD.Size = new System.Drawing.Size(65, 21);
			this.Angle_XMFD.TabIndex = 78;
			this.Angle_XMFD.Value = new decimal(new int[4] { 120, 0, 0, 0 });
			this.Angle_XMFD.ValueChanged += new System.EventHandler(Angle_XMFD_ValueChanged);
			this.TB_Angle_XMFD.AutoSize = false;
			this.TB_Angle_XMFD.Location = new System.Drawing.Point(67, 78);
			this.TB_Angle_XMFD.Maximum = 180;
			this.TB_Angle_XMFD.Minimum = -180;
			this.TB_Angle_XMFD.Name = "TB_Angle_XMFD";
			this.TB_Angle_XMFD.Size = new System.Drawing.Size(100, 20);
			this.TB_Angle_XMFD.TabIndex = 77;
			this.TB_Angle_XMFD.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Angle_XMFD.Value = 120;
			this.TB_Angle_XMFD.Scroll += new System.EventHandler(TB_Angle_XMFD_Scroll);
			this.label62.AutoSize = true;
			this.label62.Location = new System.Drawing.Point(19, 78);
			this.label62.Name = "label62";
			this.label62.Size = new System.Drawing.Size(41, 12);
			this.label62.TabIndex = 76;
			this.label62.Text = "è§åº¦ï¼";
			this.label58.AutoSize = true;
			this.label58.Location = new System.Drawing.Point(255, 26);
			this.label58.Name = "label58";
			this.label58.Size = new System.Drawing.Size(29, 12);
			this.label58.TabIndex = 63;
			this.label58.Text = "åç´ ";
			this.TB_Size_XFMD.AutoSize = false;
			this.TB_Size_XFMD.Location = new System.Drawing.Point(56, 24);
			this.TB_Size_XFMD.Maximum = 250;
			this.TB_Size_XFMD.Minimum = 1;
			this.TB_Size_XFMD.Name = "TB_Size_XFMD";
			this.TB_Size_XFMD.Size = new System.Drawing.Size(100, 20);
			this.TB_Size_XFMD.TabIndex = 62;
			this.TB_Size_XFMD.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Size_XFMD.Value = 5;
			this.TB_Size_XFMD.Scroll += new System.EventHandler(TB_Size_XFMD_Scroll);
			this.Size_XMFD.Location = new System.Drawing.Point(179, 24);
			this.Size_XMFD.Maximum = new decimal(new int[4] { 250, 0, 0, 0 });
			this.Size_XMFD.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Size_XMFD.Name = "Size_XMFD";
			this.Size_XMFD.Size = new System.Drawing.Size(64, 21);
			this.Size_XMFD.TabIndex = 50;
			this.Size_XMFD.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.Size_XMFD.ValueChanged += new System.EventHandler(Size_XMFD_ValueChanged);
			this.label60.AutoSize = true;
			this.label60.Location = new System.Drawing.Point(19, 26);
			this.label60.Name = "label60";
			this.label60.Size = new System.Drawing.Size(41, 12);
			this.label60.TabIndex = 49;
			this.label60.Text = "å¤§å°ï¼";
			this.GP_TA.Controls.Add(this.Zoom_TA);
			this.GP_TA.Controls.Add(this.TB_Zoom_TA);
			this.GP_TA.Controls.Add(this.label48);
			this.GP_TA.Controls.Add(this.label47);
			this.GP_TA.Controls.Add(this.TB_Opacity_TA);
			this.GP_TA.Controls.Add(this.Opacity_TA);
			this.GP_TA.Controls.Add(this.label45);
			this.GP_TA.Controls.Add(this.PicPattern_TA);
			this.GP_TA.Controls.Add(this.CmbBlendMode_TA);
			this.GP_TA.Controls.Add(this.label46);
			this.GP_TA.Location = new System.Drawing.Point(765, 79);
			this.GP_TA.Name = "GP_TA";
			this.GP_TA.Size = new System.Drawing.Size(320, 182);
			this.GP_TA.TabIndex = 51;
			this.GP_TA.TabStop = false;
			this.GP_TA.Text = " å¾æ¡";
			this.GP_TA.Visible = false;
			this.GP_TA.Enter += new System.EventHandler(GP_TA_Enter);
			this.Zoom_TA.Location = new System.Drawing.Point(199, 139);
			this.Zoom_TA.Maximum = new decimal(new int[4] { 400, 0, 0, 0 });
			this.Zoom_TA.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Zoom_TA.Name = "Zoom_TA";
			this.Zoom_TA.Size = new System.Drawing.Size(65, 21);
			this.Zoom_TA.TabIndex = 77;
			this.Zoom_TA.Value = new decimal(new int[4] { 100, 0, 0, 0 });
			this.Zoom_TA.ValueChanged += new System.EventHandler(_Zoom_TA_ValueChanged);
			this.TB_Zoom_TA.AutoSize = false;
			this.TB_Zoom_TA.Location = new System.Drawing.Point(87, 144);
			this.TB_Zoom_TA.Maximum = 400;
			this.TB_Zoom_TA.Minimum = 10;
			this.TB_Zoom_TA.Name = "TB_Zoom_TA";
			this.TB_Zoom_TA.Size = new System.Drawing.Size(100, 20);
			this.TB_Zoom_TA.TabIndex = 76;
			this.TB_Zoom_TA.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Zoom_TA.Value = 100;
			this.TB_Zoom_TA.Scroll += new System.EventHandler(TB_Zoom_TA_Scroll);
			this.label48.AutoSize = true;
			this.label48.Location = new System.Drawing.Point(16, 148);
			this.label48.Name = "label48";
			this.label48.Size = new System.Drawing.Size(41, 12);
			this.label48.TabIndex = 75;
			this.label48.Text = "ç¼©æ¾ï¼";
			this.label47.AutoSize = true;
			this.label47.Location = new System.Drawing.Point(16, 86);
			this.label47.Name = "label47";
			this.label47.Size = new System.Drawing.Size(41, 12);
			this.label47.TabIndex = 74;
			this.label47.Text = "å¾æ¡ï¼";
			this.TB_Opacity_TA.AutoSize = false;
			this.TB_Opacity_TA.Location = new System.Drawing.Point(87, 53);
			this.TB_Opacity_TA.Maximum = 100;
			this.TB_Opacity_TA.Name = "TB_Opacity_TA";
			this.TB_Opacity_TA.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_TA.TabIndex = 73;
			this.TB_Opacity_TA.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_TA.Value = 75;
			this.TB_Opacity_TA.Scroll += new System.EventHandler(TB_Opacity_TZ_Scroll);
			this.Opacity_TA.Location = new System.Drawing.Point(199, 54);
			this.Opacity_TA.Name = "Opacity_TA";
			this.Opacity_TA.Size = new System.Drawing.Size(65, 21);
			this.Opacity_TA.TabIndex = 72;
			this.Opacity_TA.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_TA.ValueChanged += new System.EventHandler(Opacity_TA_ValueChanged);
			this.label45.AutoSize = true;
			this.label45.Location = new System.Drawing.Point(16, 54);
			this.label45.Name = "label45";
			this.label45.Size = new System.Drawing.Size(65, 12);
			this.label45.TabIndex = 71;
			this.label45.Text = "ä¸éæåº¦ï¼";
			this.PicPattern_TA.BackColor = System.Drawing.Color.Black;
			this.PicPattern_TA.Image = (System.Drawing.Image)resources.GetObject("PicPattern_TA.Image");
			this.PicPattern_TA.Location = new System.Drawing.Point(98, 83);
			this.PicPattern_TA.Name = "PicPattern_TA";
			this.PicPattern_TA.Size = new System.Drawing.Size(50, 50);
			this.PicPattern_TA.TabIndex = 70;
			this.PicPattern_TA.TabStop = false;
			this.PicPattern_TA.Click += new System.EventHandler(PicPattern_TA_Click);
			this.CmbBlendMode_TA.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_TA.FormattingEnabled = true;
			this.CmbBlendMode_TA.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_TA.Location = new System.Drawing.Point(98, 21);
			this.CmbBlendMode_TA.Name = "CmbBlendMode_TA";
			this.CmbBlendMode_TA.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_TA.TabIndex = 69;
			this.CmbBlendMode_TA.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_TA_SelectedIndexChanged);
			this.label46.AutoSize = true;
			this.label46.Location = new System.Drawing.Point(16, 24);
			this.label46.Name = "label46";
			this.label46.Size = new System.Drawing.Size(65, 12);
			this.label46.TabIndex = 68;
			this.label46.Text = "æ··åæ¨¡å¼ï¼";
			this.GP_YS.Controls.Add(this.TB_Opacity_YS);
			this.GP_YS.Controls.Add(this.Opacity_YS);
			this.GP_YS.Controls.Add(this.label43);
			this.GP_YS.Controls.Add(this.PicColor_YS);
			this.GP_YS.Controls.Add(this.CmbBlendMode_YS);
			this.GP_YS.Controls.Add(this.label44);
			this.GP_YS.Location = new System.Drawing.Point(811, 26);
			this.GP_YS.Name = "GP_YS";
			this.GP_YS.Size = new System.Drawing.Size(320, 88);
			this.GP_YS.TabIndex = 50;
			this.GP_YS.TabStop = false;
			this.GP_YS.Text = " é¢è²     ";
			this.GP_YS.Visible = false;
			this.TB_Opacity_YS.AutoSize = false;
			this.TB_Opacity_YS.Location = new System.Drawing.Point(87, 53);
			this.TB_Opacity_YS.Maximum = 100;
			this.TB_Opacity_YS.Name = "TB_Opacity_YS";
			this.TB_Opacity_YS.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_YS.TabIndex = 73;
			this.TB_Opacity_YS.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_YS.Value = 75;
			this.TB_Opacity_YS.Scroll += new System.EventHandler(TB_Opacity_YS_Scroll);
			this.Opacity_YS.Location = new System.Drawing.Point(199, 54);
			this.Opacity_YS.Name = "Opacity_YS";
			this.Opacity_YS.Size = new System.Drawing.Size(65, 21);
			this.Opacity_YS.TabIndex = 72;
			this.Opacity_YS.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_YS.ValueChanged += new System.EventHandler(Opacity_YS_ValueChanged);
			this.label43.AutoSize = true;
			this.label43.Location = new System.Drawing.Point(16, 54);
			this.label43.Name = "label43";
			this.label43.Size = new System.Drawing.Size(65, 12);
			this.label43.TabIndex = 71;
			this.label43.Text = "ä¸éæåº¦ï¼";
			this.PicColor_YS.BackColor = System.Drawing.Color.Black;
			this.PicColor_YS.Location = new System.Drawing.Point(216, 22);
			this.PicColor_YS.Name = "PicColor_YS";
			this.PicColor_YS.Size = new System.Drawing.Size(48, 19);
			this.PicColor_YS.TabIndex = 70;
			this.PicColor_YS.TabStop = false;
			this.PicColor_YS.Click += new System.EventHandler(PicColor_YS_Click);
			this.CmbBlendMode_YS.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_YS.FormattingEnabled = true;
			this.CmbBlendMode_YS.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_YS.Location = new System.Drawing.Point(98, 21);
			this.CmbBlendMode_YS.Name = "CmbBlendMode_YS";
			this.CmbBlendMode_YS.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_YS.TabIndex = 69;
			this.CmbBlendMode_YS.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_YS_SelectedIndexChanged);
			this.label44.AutoSize = true;
			this.label44.Location = new System.Drawing.Point(16, 24);
			this.label44.Name = "label44";
			this.label44.Size = new System.Drawing.Size(65, 12);
			this.label44.TabIndex = 68;
			this.label44.Text = "æ··åæ¨¡å¼ï¼";
			this.GP_TY_JG.Controls.Add(this.Noise_TY);
			this.GP_TY_JG.Controls.Add(this.TB_Noise_TY);
			this.GP_TY_JG.Controls.Add(this.label77);
			this.GP_TY_JG.Controls.Add(this.CmbContour_TY);
			this.GP_TY_JG.Controls.Add(this.label10);
			this.GP_TY_JG.Controls.Add(this.label11);
			this.GP_TY_JG.Controls.Add(this.Size_TY);
			this.GP_TY_JG.Controls.Add(this.TB_Size_TY);
			this.GP_TY_JG.Controls.Add(this.label33);
			this.GP_TY_JG.Controls.Add(this.label34);
			this.GP_TY_JG.Controls.Add(this.Choke_TY);
			this.GP_TY_JG.Controls.Add(this.TB_Choke_TY);
			this.GP_TY_JG.Controls.Add(this.label35);
			this.GP_TY_JG.Controls.Add(this.label36);
			this.GP_TY_JG.Controls.Add(this.Distance_TY);
			this.GP_TY_JG.Controls.Add(this.TB_Distance_TY);
			this.GP_TY_JG.Controls.Add(this.label37);
			this.GP_TY_JG.Controls.Add(this.label38);
			this.GP_TY_JG.Controls.Add(this.Angle_TY);
			this.GP_TY_JG.Controls.Add(this.TB_Angle_TY);
			this.GP_TY_JG.Controls.Add(this.label39);
			this.GP_TY_JG.Controls.Add(this.TB_Opacity_TY);
			this.GP_TY_JG.Controls.Add(this.label40);
			this.GP_TY_JG.Controls.Add(this.Opacity_TY);
			this.GP_TY_JG.Controls.Add(this.label41);
			this.GP_TY_JG.Controls.Add(this.PicColor_TY);
			this.GP_TY_JG.Controls.Add(this.CmbBlendMode_TY);
			this.GP_TY_JG.Controls.Add(this.label42);
			this.GP_TY_JG.Location = new System.Drawing.Point(432, 22);
			this.GP_TY_JG.Name = "GP_TY_JG";
			this.GP_TY_JG.Size = new System.Drawing.Size(320, 263);
			this.GP_TY_JG.TabIndex = 49;
			this.GP_TY_JG.TabStop = false;
			this.GP_TY_JG.Text = " ç»æ ";
			this.GP_TY_JG.Visible = false;
			this.Noise_TY.Location = new System.Drawing.Point(227, 228);
			this.Noise_TY.Name = "Noise_TY";
			this.Noise_TY.Size = new System.Drawing.Size(46, 21);
			this.Noise_TY.TabIndex = 105;
			this.Noise_TY.ValueChanged += new System.EventHandler(Noise_TY_ValueChanged);
			this.TB_Noise_TY.AutoSize = false;
			this.TB_Noise_TY.Location = new System.Drawing.Point(71, 227);
			this.TB_Noise_TY.Maximum = 100;
			this.TB_Noise_TY.Name = "TB_Noise_TY";
			this.TB_Noise_TY.Size = new System.Drawing.Size(150, 20);
			this.TB_Noise_TY.TabIndex = 104;
			this.TB_Noise_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Noise_TY.Scroll += new System.EventHandler(TB_Noise_TY_Scroll);
			this.label77.AutoSize = true;
			this.label77.Location = new System.Drawing.Point(34, 230);
			this.label77.Name = "label77";
			this.label77.Size = new System.Drawing.Size(41, 12);
			this.label77.TabIndex = 103;
			this.label77.Text = "åªé³ï¼";
			this.CmbContour_TY.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbContour_TY.FormattingEnabled = true;
			this.CmbContour_TY.Items.AddRange(new object[8] { "çº¿æ§", "é¥å½¢", "é¥å½¢-åè½¬", "åå¹-æ·±", "åå¹-æµ", "é«æ¯", "åå", "ç¯å½¢" });
			this.CmbContour_TY.Location = new System.Drawing.Point(82, 197);
			this.CmbContour_TY.Name = "CmbContour_TY";
			this.CmbContour_TY.Size = new System.Drawing.Size(86, 20);
			this.CmbContour_TY.TabIndex = 85;
			this.CmbContour_TY.SelectedIndexChanged += new System.EventHandler(CmbContour_TY_SelectedIndexChanged);
			this.GP_JB.Controls.Add(this.ChkSoften);
			this.GP_JB.Controls.Add(this.CmbGradientStyle_JB);
			this.GP_JB.Controls.Add(this.label56);
			this.GP_JB.Controls.Add(this.label55);
			this.GP_JB.Controls.Add(this.label53);
			this.GP_JB.Controls.Add(this.Angle_JB);
			this.GP_JB.Controls.Add(this.TB_Angle_JB);
			this.GP_JB.Controls.Add(this.label54);
			this.GP_JB.Controls.Add(this.ChkInvert_JB);
			this.GP_JB.Controls.Add(this.CmbGradient_JB);
			this.GP_JB.Controls.Add(this.Zoom_JB);
			this.GP_JB.Controls.Add(this.TB_Zoom_JB);
			this.GP_JB.Controls.Add(this.label49);
			this.GP_JB.Controls.Add(this.label50);
			this.GP_JB.Controls.Add(this.TB_Opacity_JB);
			this.GP_JB.Controls.Add(this.Opacity_JB);
			this.GP_JB.Controls.Add(this.label51);
			this.GP_JB.Controls.Add(this.CmbBlendMode_JB);
			this.GP_JB.Controls.Add(this.label52);
			this.GP_JB.Location = new System.Drawing.Point(828, 6);
			this.GP_JB.Name = "GP_JB";
			this.GP_JB.Size = new System.Drawing.Size(320, 222);
			this.GP_JB.TabIndex = 52;
			this.GP_JB.TabStop = false;
			this.GP_JB.Text = " æ¸å ";
			this.GP_JB.Visible = false;
			this.CmbGradientStyle_JB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbGradientStyle_JB.FormattingEnabled = true;
			this.CmbGradientStyle_JB.Items.AddRange(new object[4] { "çº¿æ§", "å¾å", "è§åº¦", "å¯¹ç§°" });
			this.CmbGradientStyle_JB.Location = new System.Drawing.Point(94, 110);
			this.CmbGradientStyle_JB.Name = "CmbGradientStyle_JB";
			this.CmbGradientStyle_JB.Size = new System.Drawing.Size(112, 20);
			this.CmbGradientStyle_JB.TabIndex = 86;
			this.CmbGradientStyle_JB.SelectedIndexChanged += new System.EventHandler(CmbGradientStyle_JB_SelectedIndexChanged);
			this.label56.AutoSize = true;
			this.label56.Location = new System.Drawing.Point(34, 113);
			this.label56.Name = "label56";
			this.label56.Size = new System.Drawing.Size(41, 12);
			this.label56.TabIndex = 85;
			this.label56.Text = "æ ·å¼ï¼";
			this.label55.AutoSize = true;
			this.label55.Location = new System.Drawing.Point(267, 171);
			this.label55.Name = "label55";
			this.label55.Size = new System.Drawing.Size(11, 12);
			this.label55.TabIndex = 84;
			this.label55.Text = "%";
			this.label53.AutoSize = true;
			this.label53.Location = new System.Drawing.Point(267, 144);
			this.label53.Name = "label53";
			this.label53.Size = new System.Drawing.Size(17, 12);
			this.label53.TabIndex = 83;
			this.label53.Text = "åº¦";
			this.Angle_JB.Location = new System.Drawing.Point(190, 140);
			this.Angle_JB.Maximum = new decimal(new int[4] { 180, 0, 0, 0 });
			this.Angle_JB.Minimum = new decimal(new int[4] { 180, 0, 0, -2147483648 });
			this.Angle_JB.Name = "Angle_JB";
			this.Angle_JB.Size = new System.Drawing.Size(65, 21);
			this.Angle_JB.TabIndex = 82;
			this.Angle_JB.ValueChanged += new System.EventHandler(Angle_JB_ValueChanged);
			this.TB_Angle_JB.AutoSize = false;
			this.TB_Angle_JB.Location = new System.Drawing.Point(87, 139);
			this.TB_Angle_JB.Maximum = 180;
			this.TB_Angle_JB.Minimum = -180;
			this.TB_Angle_JB.Name = "TB_Angle_JB";
			this.TB_Angle_JB.Size = new System.Drawing.Size(100, 20);
			this.TB_Angle_JB.TabIndex = 81;
			this.TB_Angle_JB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Angle_JB.Value = 30;
			this.TB_Angle_JB.Scroll += new System.EventHandler(TB_Angle_JB_Scroll);
			this.label54.AutoSize = true;
			this.label54.Location = new System.Drawing.Point(33, 143);
			this.label54.Name = "label54";
			this.label54.Size = new System.Drawing.Size(41, 12);
			this.label54.TabIndex = 80;
			this.label54.Text = "è§åº¦ï¼";
			this.ChkInvert_JB.AutoSize = true;
			this.ChkInvert_JB.Location = new System.Drawing.Point(217, 87);
			this.ChkInvert_JB.Name = "ChkInvert_JB";
			this.ChkInvert_JB.Size = new System.Drawing.Size(48, 16);
			this.ChkInvert_JB.TabIndex = 79;
			this.ChkInvert_JB.Text = "åå";
			this.ChkInvert_JB.UseVisualStyleBackColor = true;
			this.ChkInvert_JB.CheckedChanged += new System.EventHandler(ChkInvert_JB_CheckedChanged);
			this.CmbGradient_JB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbGradient_JB.FormattingEnabled = true;
			this.CmbGradient_JB.Items.AddRange(new object[7] { "é»è²å°ç½è²", "é»è²å°éæ", "çº¢ç»¿æ¸å", "ç´«æ©æ¸å", "èçº¢é»æ¸å", "èé»èæ¸å", "éæå½©è¹æ¸å" });
			this.CmbGradient_JB.Location = new System.Drawing.Point(94, 83);
			this.CmbGradient_JB.Name = "CmbGradient_JB";
			this.CmbGradient_JB.Size = new System.Drawing.Size(112, 20);
			this.CmbGradient_JB.TabIndex = 78;
			this.CmbGradient_JB.SelectedIndexChanged += new System.EventHandler(CmbGradient_JB_SelectedIndexChanged);
			this.Zoom_JB.Location = new System.Drawing.Point(190, 170);
			this.Zoom_JB.Maximum = new decimal(new int[4] { 400, 0, 0, 0 });
			this.Zoom_JB.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Zoom_JB.Name = "Zoom_JB";
			this.Zoom_JB.Size = new System.Drawing.Size(65, 21);
			this.Zoom_JB.TabIndex = 77;
			this.Zoom_JB.Value = new decimal(new int[4] { 100, 0, 0, 0 });
			this.Zoom_JB.ValueChanged += new System.EventHandler(Zoom_JB_ValueChanged);
			this.TB_Zoom_JB.AutoSize = false;
			this.TB_Zoom_JB.Location = new System.Drawing.Point(87, 170);
			this.TB_Zoom_JB.Maximum = 400;
			this.TB_Zoom_JB.Minimum = 10;
			this.TB_Zoom_JB.Name = "TB_Zoom_JB";
			this.TB_Zoom_JB.Size = new System.Drawing.Size(100, 20);
			this.TB_Zoom_JB.TabIndex = 76;
			this.TB_Zoom_JB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Zoom_JB.Value = 100;
			this.TB_Zoom_JB.Scroll += new System.EventHandler(TB_Zoom_JB_Scroll);
			this.label49.AutoSize = true;
			this.label49.Location = new System.Drawing.Point(34, 175);
			this.label49.Name = "label49";
			this.label49.Size = new System.Drawing.Size(41, 12);
			this.label49.TabIndex = 75;
			this.label49.Text = "ç¼©æ¾ï¼";
			this.label50.AutoSize = true;
			this.label50.Location = new System.Drawing.Point(34, 86);
			this.label50.Name = "label50";
			this.label50.Size = new System.Drawing.Size(41, 12);
			this.label50.TabIndex = 74;
			this.label50.Text = "æ¸åï¼";
			this.TB_Opacity_JB.AutoSize = false;
			this.TB_Opacity_JB.Location = new System.Drawing.Point(87, 53);
			this.TB_Opacity_JB.Maximum = 100;
			this.TB_Opacity_JB.Name = "TB_Opacity_JB";
			this.TB_Opacity_JB.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_JB.TabIndex = 73;
			this.TB_Opacity_JB.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_JB.Value = 100;
			this.TB_Opacity_JB.Scroll += new System.EventHandler(TB_Opacity_JB_Scroll);
			this.Opacity_JB.Location = new System.Drawing.Point(199, 54);
			this.Opacity_JB.Name = "Opacity_JB";
			this.Opacity_JB.Size = new System.Drawing.Size(65, 21);
			this.Opacity_JB.TabIndex = 72;
			this.Opacity_JB.Value = new decimal(new int[4] { 100, 0, 0, 0 });
			this.Opacity_JB.ValueChanged += new System.EventHandler(Opacity_JB_ValueChanged);
			this.label51.AutoSize = true;
			this.label51.Location = new System.Drawing.Point(16, 54);
			this.label51.Name = "label51";
			this.label51.Size = new System.Drawing.Size(65, 12);
			this.label51.TabIndex = 71;
			this.label51.Text = "ä¸éæåº¦ï¼";
			this.CmbBlendMode_JB.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_JB.FormattingEnabled = true;
			this.CmbBlendMode_JB.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_JB.Location = new System.Drawing.Point(98, 21);
			this.CmbBlendMode_JB.Name = "CmbBlendMode_JB";
			this.CmbBlendMode_JB.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_JB.TabIndex = 69;
			this.CmbBlendMode_JB.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_JB_SelectedIndexChanged);
			this.label52.AutoSize = true;
			this.label52.Location = new System.Drawing.Point(16, 24);
			this.label52.Name = "label52";
			this.label52.Size = new System.Drawing.Size(65, 12);
			this.label52.TabIndex = 68;
			this.label52.Text = "æ··åæ¨¡å¼ï¼";
			this.label10.AutoSize = true;
			this.label10.Location = new System.Drawing.Point(23, 200);
			this.label10.Name = "label10";
			this.label10.Size = new System.Drawing.Size(53, 12);
			this.label10.TabIndex = 84;
			this.label10.Text = "ç­é«çº¿ï¼";
			this.label11.AutoSize = true;
			this.label11.Location = new System.Drawing.Point(275, 167);
			this.label11.Name = "label11";
			this.label11.Size = new System.Drawing.Size(29, 12);
			this.label11.TabIndex = 83;
			this.label11.Text = "åç´ ";
			this.Size_TY.Location = new System.Drawing.Point(195, 164);
			this.Size_TY.Name = "Size_TY";
			this.Size_TY.Size = new System.Drawing.Size(65, 21);
			this.Size_TY.TabIndex = 82;
			this.Size_TY.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Size_TY.ValueChanged += new System.EventHandler(Size_TY_ValueChanged);
			this.TB_Size_TY.AutoSize = false;
			this.TB_Size_TY.Location = new System.Drawing.Point(82, 167);
			this.TB_Size_TY.Maximum = 100;
			this.TB_Size_TY.Name = "TB_Size_TY";
			this.TB_Size_TY.Size = new System.Drawing.Size(100, 20);
			this.TB_Size_TY.TabIndex = 81;
			this.TB_Size_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Size_TY.Value = 10;
			this.TB_Size_TY.Scroll += new System.EventHandler(TB_Size_TY_Scroll);
			this.label33.AutoSize = true;
			this.label33.Location = new System.Drawing.Point(35, 171);
			this.label33.Name = "label33";
			this.label33.Size = new System.Drawing.Size(41, 12);
			this.label33.TabIndex = 80;
			this.label33.Text = "å¤§å°ï¼";
			this.label34.AutoSize = true;
			this.label34.Location = new System.Drawing.Point(275, 140);
			this.label34.Name = "label34";
			this.label34.Size = new System.Drawing.Size(11, 12);
			this.label34.TabIndex = 79;
			this.label34.Text = "%";
			this.Choke_TY.Location = new System.Drawing.Point(195, 137);
			this.Choke_TY.Name = "Choke_TY";
			this.Choke_TY.Size = new System.Drawing.Size(65, 21);
			this.Choke_TY.TabIndex = 78;
			this.Choke_TY.Value = new decimal(new int[4] { 50, 0, 0, 0 });
			this.Choke_TY.ValueChanged += new System.EventHandler(Choke_TY_ValueChanged);
			this.TB_Choke_TY.AutoSize = false;
			this.TB_Choke_TY.Location = new System.Drawing.Point(82, 140);
			this.TB_Choke_TY.Maximum = 100;
			this.TB_Choke_TY.Name = "TB_Choke_TY";
			this.TB_Choke_TY.Size = new System.Drawing.Size(100, 20);
			this.TB_Choke_TY.TabIndex = 77;
			this.TB_Choke_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Choke_TY.Value = 50;
			this.TB_Choke_TY.Scroll += new System.EventHandler(TB_Choke_TY_Scroll);
			this.label35.AutoSize = true;
			this.label35.Location = new System.Drawing.Point(35, 144);
			this.label35.Name = "label35";
			this.label35.Size = new System.Drawing.Size(41, 12);
			this.label35.TabIndex = 76;
			this.label35.Text = "é»å¡ï¼";
			this.label36.AutoSize = true;
			this.label36.Location = new System.Drawing.Point(275, 114);
			this.label36.Name = "label36";
			this.label36.Size = new System.Drawing.Size(29, 12);
			this.label36.TabIndex = 75;
			this.label36.Text = "åç´ ";
			this.Distance_TY.Location = new System.Drawing.Point(195, 109);
			this.Distance_TY.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Distance_TY.Name = "Distance_TY";
			this.Distance_TY.Size = new System.Drawing.Size(65, 21);
			this.Distance_TY.TabIndex = 74;
			this.Distance_TY.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.Distance_TY.ValueChanged += new System.EventHandler(Distance_TY_ValueChanged);
			this.TB_Distance_TY.AutoSize = false;
			this.TB_Distance_TY.Location = new System.Drawing.Point(82, 110);
			this.TB_Distance_TY.Maximum = 100;
			this.TB_Distance_TY.Minimum = 1;
			this.TB_Distance_TY.Name = "TB_Distance_TY";
			this.TB_Distance_TY.Size = new System.Drawing.Size(100, 20);
			this.TB_Distance_TY.TabIndex = 73;
			this.TB_Distance_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Distance_TY.Value = 5;
			this.TB_Distance_TY.Scroll += new System.EventHandler(TB_Distance_TY_Scroll);
			this.label37.AutoSize = true;
			this.label37.Location = new System.Drawing.Point(35, 114);
			this.label37.Name = "label37";
			this.label37.Size = new System.Drawing.Size(41, 12);
			this.label37.TabIndex = 72;
			this.label37.Text = "è·ç¦»ï¼";
			this.label38.AutoSize = true;
			this.label38.Location = new System.Drawing.Point(274, 87);
			this.label38.Name = "label38";
			this.label38.Size = new System.Drawing.Size(17, 12);
			this.label38.TabIndex = 71;
			this.label38.Text = "åº¦";
			this.Angle_TY.Location = new System.Drawing.Point(195, 83);
			this.Angle_TY.Maximum = new decimal(new int[4] { 180, 0, 0, 0 });
			this.Angle_TY.Minimum = new decimal(new int[4] { 180, 0, 0, -2147483648 });
			this.Angle_TY.Name = "Angle_TY";
			this.Angle_TY.Size = new System.Drawing.Size(65, 21);
			this.Angle_TY.TabIndex = 70;
			this.Angle_TY.Value = new decimal(new int[4] { 30, 0, 0, 0 });
			this.Angle_TY.ValueChanged += new System.EventHandler(Angle_TY_ValueChanged);
			this.TB_Angle_TY.AutoSize = false;
			this.TB_Angle_TY.Location = new System.Drawing.Point(83, 82);
			this.TB_Angle_TY.Maximum = 180;
			this.TB_Angle_TY.Minimum = -180;
			this.TB_Angle_TY.Name = "TB_Angle_TY";
			this.TB_Angle_TY.Size = new System.Drawing.Size(100, 20);
			this.TB_Angle_TY.TabIndex = 69;
			this.TB_Angle_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Angle_TY.Value = 30;
			this.TB_Angle_TY.Scroll += new System.EventHandler(TB_Angle_TY_Scroll);
			this.label39.AutoSize = true;
			this.label39.Location = new System.Drawing.Point(35, 82);
			this.label39.Name = "label39";
			this.label39.Size = new System.Drawing.Size(41, 12);
			this.label39.TabIndex = 68;
			this.label39.Text = "è§åº¦ï¼";
			this.TB_Opacity_TY.AutoSize = false;
			this.TB_Opacity_TY.Location = new System.Drawing.Point(83, 55);
			this.TB_Opacity_TY.Maximum = 100;
			this.TB_Opacity_TY.Name = "TB_Opacity_TY";
			this.TB_Opacity_TY.Size = new System.Drawing.Size(100, 20);
			this.TB_Opacity_TY.TabIndex = 67;
			this.TB_Opacity_TY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Opacity_TY.Value = 75;
			this.TB_Opacity_TY.Scroll += new System.EventHandler(TB_Opacity_TY_Scroll);
			this.label40.AutoSize = true;
			this.label40.Location = new System.Drawing.Point(275, 60);
			this.label40.Name = "label40";
			this.label40.Size = new System.Drawing.Size(11, 12);
			this.label40.TabIndex = 66;
			this.label40.Text = "%";
			this.Opacity_TY.Location = new System.Drawing.Point(195, 56);
			this.Opacity_TY.Name = "Opacity_TY";
			this.Opacity_TY.Size = new System.Drawing.Size(65, 21);
			this.Opacity_TY.TabIndex = 47;
			this.Opacity_TY.Value = new decimal(new int[4] { 75, 0, 0, 0 });
			this.Opacity_TY.ValueChanged += new System.EventHandler(Opacity_TY_ValueChanged);
			this.label41.AutoSize = true;
			this.label41.Location = new System.Drawing.Point(12, 56);
			this.label41.Name = "label41";
			this.label41.Size = new System.Drawing.Size(65, 12);
			this.label41.TabIndex = 46;
			this.label41.Text = "ä¸éæåº¦ï¼";
			this.PicColor_TY.BackColor = System.Drawing.Color.Black;
			this.PicColor_TY.Location = new System.Drawing.Point(212, 24);
			this.PicColor_TY.Name = "PicColor_TY";
			this.PicColor_TY.Size = new System.Drawing.Size(48, 19);
			this.PicColor_TY.TabIndex = 45;
			this.PicColor_TY.TabStop = false;
			this.PicColor_TY.Click += new System.EventHandler(PicColor_TY_Click);
			this.CmbBlendMode_TY.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbBlendMode_TY.FormattingEnabled = true;
			this.CmbBlendMode_TY.Items.AddRange(new object[27]
			{
				"æ­£å¸¸", "æº¶è§£", "åæ", "æ­£çå åº", "é¢è²å æ·±", "çº¿æ§å æ·±", "æ·±è²", "åäº®", "æ»¤è²", "é¢è²åæ·¡",
				"çº¿æ§åæ·¡", "æµè²", "å å ", "æå", "å¼ºå", "äº®å", "çº¿æ§å", "ç¹å", "å®è²æ··å", "å·®å¼",
				"æé¤", "åå»", "åå", "è²ç¸", "é¥±ååº¦", "é¢è²", "æåº¦"
			});
			this.CmbBlendMode_TY.Location = new System.Drawing.Point(94, 23);
			this.CmbBlendMode_TY.Name = "CmbBlendMode_TY";
			this.CmbBlendMode_TY.Size = new System.Drawing.Size(112, 20);
			this.CmbBlendMode_TY.TabIndex = 44;
			this.CmbBlendMode_TY.SelectedIndexChanged += new System.EventHandler(CmbBlendMode_TY_SelectedIndexChanged);
			this.label42.AutoSize = true;
			this.label42.Location = new System.Drawing.Point(12, 26);
			this.label42.Name = "label42";
			this.label42.Size = new System.Drawing.Size(65, 12);
			this.label42.TabIndex = 43;
			this.label42.Text = "æ··åæ¨¡å¼ï¼";
			this.ChkSoften.Location = new System.Drawing.Point(217, 112);
			this.ChkSoften.Name = "ChkSoften";
			this.ChkSoften.Size = new System.Drawing.Size(80, 16);
			this.ChkSoften.TabIndex = 112;
			this.ChkSoften.Text = "æå";
			this.ChkSoften.UseVisualStyleBackColor = true;
			this.ChkSoften.CheckedChanged += new System.EventHandler(ChkSoften_CheckedChanged);
			this.Noise_NYY.Location = new System.Drawing.Point(201, 226);
			this.Noise_NYY.Name = "Noise_NYY";
			this.Noise_NYY.Size = new System.Drawing.Size(66, 21);
			this.Noise_NYY.TabIndex = 108;
			this.Noise_NYY.ValueChanged += new System.EventHandler(Noise_NYY_ValueChanged);
			this.TB_Noise_NYY.AutoSize = false;
			this.TB_Noise_NYY.Location = new System.Drawing.Point(78, 226);
			this.TB_Noise_NYY.Maximum = 100;
			this.TB_Noise_NYY.Name = "TB_Noise_NYY";
			this.TB_Noise_NYY.Size = new System.Drawing.Size(106, 20);
			this.TB_Noise_NYY.TabIndex = 107;
			this.TB_Noise_NYY.TickStyle = System.Windows.Forms.TickStyle.None;
			this.TB_Noise_NYY.Scroll += new System.EventHandler(TB_Noise_NYY_Scroll);
			this.label78.AutoSize = true;
			this.label78.Location = new System.Drawing.Point(41, 229);
			this.label78.Name = "label78";
			this.label78.Size = new System.Drawing.Size(41, 12);
			this.label78.TabIndex = 106;
			this.label78.Text = "åªé³ï¼";
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(1477, 791);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.CmdCancel);
			base.Controls.Add(this.CmdOk);
			base.Controls.Add(this.GP_Frame);
			base.Controls.Add(this.panel1);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmLayerStyle";
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "å¾å±æ ·å¼";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(FrmLayerStyle_FormClosing);
			base.Load += new System.EventHandler(FrmLayerStyle_Load);
			this.panel1.ResumeLayout(false);
			this.panel1.PerformLayout();
			this.GP_MB_JG.ResumeLayout(false);
			this.GP_MB_JG.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Noise_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Soft_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Soft_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opaciyt_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Size_MB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opaicty_MB).EndInit();
			this.GP_MB_TC.ResumeLayout(false);
			this.GP_MB_TC.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.PicColor_MB).EndInit();
			this.GP_NYY_JG.ResumeLayout(false);
			this.GP_NYY_JG.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Size_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Choke_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Choke_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opaciyt_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opaicty_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_NYY).EndInit();
			this.GP_GZ.ResumeLayout(false);
			this.GP_GZ.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Size_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_GZ).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_GZ).EndInit();
			this.GP_Frame.ResumeLayout(false);
			this.GP_XMFD.ResumeLayout(false);
			this.GP_XMFD.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.TB_SoftenSize_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.SoftenSize_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_XMFD_S).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_XMFD_S).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_XMFD_H).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_XMFD_H).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Depth_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Depth_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicShadow_XFMD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicHighlight_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Height_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Height_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_XMFD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_XFMD).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Size_XMFD).EndInit();
			this.GP_TA.ResumeLayout(false);
			this.GP_TA.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Zoom_TA).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Zoom_TA).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_TA).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_TA).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicPattern_TA).EndInit();
			this.GP_YS.ResumeLayout(false);
			this.GP_YS.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_YS).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_YS).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_YS).EndInit();
			this.GP_TY_JG.ResumeLayout(false);
			this.GP_TY_JG.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Noise_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_TY).EndInit();
			this.GP_JB.ResumeLayout(false);
			this.GP_JB.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Angle_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Zoom_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Zoom_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_JB).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Size_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Size_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Choke_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Choke_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Distance_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Distance_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Angle_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Angle_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Opacity_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Opacity_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.PicColor_TY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Noise_NYY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TB_Noise_NYY).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class VarLocalThresholdDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Locked;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private TrackBar MaskSizeX;

		private Label label1;

		private TrackBar MaskSizeY;

		private Label label2;

		private CheckBox ChkPreview;

		private TrackBar StdDevScale;

		private Label label3;

		private TrackBar AbsThreshold;

		private Label label4;

		private Label lblAbsThreshold;

		private Label lblStdDevScale;

		private Label lblMaskSizeY;

		private Label lblMaskSizeX;

		private Label label5;

		private ComboBox CmbLightDark;

		private Label label6;

		private TrackBar Gamma;

		private Label label7;

		private CheckBox ChkImaginary;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_VarLocalThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaskSizeX, int MaskSizeY, int StdDevScale, int AbsThreshold, int LightDark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetGaborKernel(float* Kernel, int KernelW, int KernelH, float Sigma, float Theta, float Lambd, float Gamma, float Psi, bool Imaginary);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowGaborKernel(float* Kernel, byte* Dest, int KernelW, int KernelH, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowGaborFFT(float* Kernel, byte* Dest, int KernelW, int KernelH, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaborFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int KernelW, int KernelH, float Sigma, float Theta, float Lambd, float Gamma, float Psi);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetLogGaborFilter(float* Kernel_FFT, int KernelW, int KernelH, float Frequency, float SigmaR, float Orientation, float SigmaA, bool Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowLogGaborFilter(float* Kernel, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LogGaborFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, float Frequency, float SigmaR, float Orientation, float SigmaA);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_PhansalkarThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float P, float Q, float K, float R);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe VarLocalThresholdDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (Locked)
			{
				return;
			}
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				if (Text.Equals("Var Threshold"))
				{
					IM_VarLocalThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, MaskSizeX.Value, MaskSizeY.Value, StdDevScale.Value, AbsThreshold.Value, CmbLightDark.SelectedIndex);
				}
				else if (Text.Equals("Gaboræ»¤æ³¢"))
				{
					int num = MaskSizeX.Value * 2 + 1;
					if (CmbLightDark.SelectedIndex == 2)
					{
						IM_GaborFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, num, num, MaskSizeY.Value, StdDevScale.Value, AbsThreshold.Value, (float)Gamma.Value * 0.1f, 0f);
					}
					else
					{
						float* ptr = (float*)(void*)Marshal.AllocHGlobal(num * num * 4);
						IM_GetGaborKernel(ptr, num, num, MaskSizeY.Value, StdDevScale.Value, AbsThreshold.Value, (float)Gamma.Value * 0.1f, 0f, ChkImaginary.Checked);
						if (CmbLightDark.SelectedIndex == 0)
						{
							IM_ShowGaborKernel(ptr, canvas.ImageData, num, num, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						else if (CmbLightDark.SelectedIndex == 1)
						{
							IM_ShowGaborFFT(ptr, canvas.ImageData, num, num, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						}
						Marshal.FreeHGlobal((IntPtr)ptr);
					}
				}
				else if (Text.Equals("LogGaboræ»¤æ³¢"))
				{
					if (CmbLightDark.SelectedIndex == 1)
					{
						IM_LogGaborFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)MaskSizeX.Value * 0.01f, (float)MaskSizeY.Value * 0.01f, StdDevScale.Value, (float)AbsThreshold.Value * 0.01f);
					}
					else
					{
						float* ptr2 = (float*)(void*)Marshal.AllocHGlobal(canvas.Image.Width * canvas.Image.Height * 4);
						IM_GetLogGaborFilter(ptr2, canvas.Image.Width, canvas.Image.Height, (float)MaskSizeX.Value * 0.01f, (float)MaskSizeY.Value * 0.01f, StdDevScale.Value, (float)AbsThreshold.Value * 0.01f, ChkImaginary.Checked);
						IM_ShowLogGaborFilter(ptr2, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
						Marshal.FreeHGlobal((IntPtr)ptr2);
					}
				}
				else if (Text.Equals("Phansalkar"))
				{
					IM_PhansalkarThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, MaskSizeX.Value, (float)MaskSizeY.Value * 0.01f, StdDevScale.Value, (float)AbsThreshold.Value * 0.01f, (float)Gamma.Value * 0.01f);
				}
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void MaskSizeX_Scroll(object sender, EventArgs e)
		{
			if (Text.Equals("LogGaboræ»¤æ³¢"))
			{
				lblMaskSizeX.Text = ((double)MaskSizeX.Value * 0.01).ToString();
			}
			else
			{
				lblMaskSizeX.Text = MaskSizeX.Value.ToString();
			}
			UpdateCanvas();
		}

		private void MaskSizeY_Scroll(object sender, EventArgs e)
		{
			if (Text.Equals("LogGaboræ»¤æ³¢"))
			{
				lblMaskSizeY.Text = ((double)MaskSizeY.Value * 0.01).ToString();
			}
			else if (Text.Equals("Phansalkar"))
			{
				lblMaskSizeY.Text = ((double)MaskSizeY.Value * 0.01).ToString();
			}
			else
			{
				lblMaskSizeY.Text = MaskSizeY.Value.ToString();
			}
			UpdateCanvas();
		}

		private void StdDevScale_Scroll(object sender, EventArgs e)
		{
			lblStdDevScale.Text = StdDevScale.Value.ToString();
			UpdateCanvas();
		}

		private void AbsThreshold_Scroll(object sender, EventArgs e)
		{
			if (Text.Equals("LogGaboræ»¤æ³¢"))
			{
				lblAbsThreshold.Text = ((double)AbsThreshold.Value * 0.01).ToString();
			}
			if (Text.Equals("Phansalkar"))
			{
				lblAbsThreshold.Text = ((double)AbsThreshold.Value * 0.01).ToString();
			}
			else
			{
				lblAbsThreshold.Text = AbsThreshold.Value.ToString();
			}
			UpdateCanvas();
		}

		private void CmbLightDark_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Gamma_Scroll(object sender, EventArgs e)
		{
			if (Text.Equals("LogGaboræ»¤æ³¢"))
			{
				label6.Text = ((double)Gamma.Value * 0.01).ToString();
			}
			else
			{
				label6.Text = ((float)((double)Gamma.Value * 0.01)).ToString();
			}
			UpdateCanvas();
		}

		private void ChkImaginary_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void VarLocalThresholdDialog_Load(object sender, EventArgs e)
		{
			Locked = true;
			if (Text.Equals("Var Threshold"))
			{
				CmbLightDark.Items.Add("dark");
				CmbLightDark.Items.Add("equal");
				CmbLightDark.Items.Add("light");
				CmbLightDark.Items.Add("not_equal");
				CmbLightDark.SelectedIndex = 0;
			}
			else if (Text.Equals("Gaboræ»¤æ³¢"))
			{
				label1.Text = "æ ¸åå¾";
				MaskSizeX.Minimum = 1;
				MaskSizeX.Maximum = Math.Min(canvas.Image.Width, canvas.Height) / 2;
				MaskSizeX.Value = 15;
				lblMaskSizeX.Text = "15";
				this.label2.Text = "é«æ¯æ åå·®";
				MaskSizeY.Minimum = 1;
				MaskSizeY.Maximum = 256;
				MaskSizeY.Value = 10;
				lblMaskSizeY.Text = "10";
				this.label3.Text = "å¾æè§åº¦";
				StdDevScale.Minimum = 0;
				StdDevScale.Maximum = 360;
				StdDevScale.Value = 0;
				lblStdDevScale.Text = "0";
				this.label4.Text = "æ³¢é¿";
				AbsThreshold.Minimum = 1;
				AbsThreshold.Maximum = 20;
				AbsThreshold.Value = 10;
				lblAbsThreshold.Text = "10";
				Label label = label6;
				Label label2 = label7;
				bool flag2 = (Gamma.Enabled = true);
				bool enabled = (label2.Enabled = flag2);
				label.Enabled = enabled;
				label7.Text = "é¿å®½æ¯";
				this.label5.Text = "æ¾ç¤º:";
				ChkImaginary.Visible = true;
				CmbLightDark.Items.Add("æ ¸å¿å¼");
				CmbLightDark.Items.Add("æ ¸å¿FFT");
				CmbLightDark.Items.Add("Gaboræ»¤æ³¢");
				CmbLightDark.SelectedIndex = 2;
			}
			else if (Text.Equals("LogGaboræ»¤æ³¢"))
			{
				label1.Text = "ä¸­å¿é¢ç";
				MaskSizeX.Minimum = 1;
				MaskSizeX.Maximum = 100;
				MaskSizeX.Value = 20;
				lblMaskSizeX.Text = "0.2";
				this.label2.Text = "å¾åå¸¦å®½";
				MaskSizeY.Minimum = 1;
				MaskSizeY.Maximum = 200;
				MaskSizeY.Value = 10;
				lblMaskSizeY.Text = "0.1";
				this.label3.Text = "æ¹å";
				StdDevScale.Minimum = 0;
				StdDevScale.Maximum = 180;
				StdDevScale.Value = 0;
				lblStdDevScale.Text = "0";
				this.label4.Text = "è§åå¸¦å®½";
				AbsThreshold.Minimum = 1;
				AbsThreshold.Maximum = 100;
				AbsThreshold.Value = 20;
				lblAbsThreshold.Text = "0.2";
				Label label3 = label6;
				Label label4 = label7;
				bool flag2 = (Gamma.Enabled = false);
				bool enabled = (label4.Enabled = flag2);
				label3.Enabled = enabled;
				this.label5.Text = "æ¾ç¤º:";
				ChkImaginary.Visible = true;
				ChkImaginary.Text = "åå¨æ¾ç¤º";
				CmbLightDark.Items.Add("FFTå¼");
				CmbLightDark.Items.Add("LogGaboræ»¤æ³¢");
				CmbLightDark.SelectedIndex = 1;
			}
			else if (Text.Equals("Phansalkar"))
			{
				label1.Text = "åå¾";
				MaskSizeX.Minimum = 1;
				MaskSizeX.Maximum = 80;
				MaskSizeX.Value = 12;
				lblMaskSizeX.Text = "12";
				this.label2.Text = "P";
				MaskSizeY.Minimum = 1;
				MaskSizeY.Maximum = 1000;
				MaskSizeY.Value = 300;
				lblMaskSizeY.Text = "3";
				this.label3.Text = "Q";
				StdDevScale.Minimum = 1;
				StdDevScale.Maximum = 100;
				StdDevScale.Value = 10;
				lblStdDevScale.Text = "10";
				this.label4.Text = "K";
				AbsThreshold.Minimum = 20;
				AbsThreshold.Maximum = 50;
				AbsThreshold.Value = 25;
				lblAbsThreshold.Text = "0.25";
				label7.Text = "R:";
				TrackBar gamma = Gamma;
				Label label5 = label6;
				bool flag2 = (label7.Enabled = true);
				bool enabled = (label5.Enabled = flag2);
				gamma.Enabled = enabled;
				Gamma.Minimum = 1;
				Gamma.Maximum = 100;
				Gamma.Value = 50;
				ChkImaginary.Visible = false;
				CmbLightDark.Enabled = false;
				Locked = false;
			}
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.label6 = new System.Windows.Forms.Label();
			this.Gamma = new System.Windows.Forms.TrackBar();
			this.label7 = new System.Windows.Forms.Label();
			this.CmbLightDark = new System.Windows.Forms.ComboBox();
			this.label5 = new System.Windows.Forms.Label();
			this.lblAbsThreshold = new System.Windows.Forms.Label();
			this.lblStdDevScale = new System.Windows.Forms.Label();
			this.lblMaskSizeY = new System.Windows.Forms.Label();
			this.lblMaskSizeX = new System.Windows.Forms.Label();
			this.AbsThreshold = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.StdDevScale = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.MaskSizeY = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.MaskSizeX = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkImaginary = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Gamma).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.AbsThreshold).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.StdDevScale).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.MaskSizeY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.MaskSizeX).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(440, 100);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(102, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(440, 34);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(102, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.Gamma);
			this.groupBox.Controls.Add(this.label7);
			this.groupBox.Controls.Add(this.CmbLightDark);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.lblAbsThreshold);
			this.groupBox.Controls.Add(this.lblStdDevScale);
			this.groupBox.Controls.Add(this.lblMaskSizeY);
			this.groupBox.Controls.Add(this.lblMaskSizeX);
			this.groupBox.Controls.Add(this.AbsThreshold);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.StdDevScale);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.MaskSizeY);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.MaskSizeX);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(18, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(398, 524);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.label6.AutoSize = true;
			this.label6.Enabled = false;
			this.label6.Location = new System.Drawing.Point(316, 390);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(17, 18);
			this.label6.TabIndex = 22;
			this.label6.Text = "1";
			this.Gamma.AutoSize = false;
			this.Gamma.Enabled = false;
			this.Gamma.LargeChange = 2;
			this.Gamma.Location = new System.Drawing.Point(9, 412);
			this.Gamma.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Gamma.Maximum = 100;
			this.Gamma.Minimum = 1;
			this.Gamma.Name = "Gamma";
			this.Gamma.Size = new System.Drawing.Size(375, 39);
			this.Gamma.TabIndex = 21;
			this.Gamma.TickFrequency = 0;
			this.Gamma.Value = 10;
			this.Gamma.Scroll += new System.EventHandler(Gamma_Scroll);
			this.label7.AutoSize = true;
			this.label7.Enabled = false;
			this.label7.Location = new System.Drawing.Point(6, 374);
			this.label7.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(71, 18);
			this.label7.TabIndex = 20;
			this.label7.Text = "é¿å®½æ¯:";
			this.CmbLightDark.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbLightDark.FormattingEnabled = true;
			this.CmbLightDark.Location = new System.Drawing.Point(184, 470);
			this.CmbLightDark.Name = "CmbLightDark";
			this.CmbLightDark.Size = new System.Drawing.Size(200, 26);
			this.CmbLightDark.TabIndex = 19;
			this.CmbLightDark.SelectedIndexChanged += new System.EventHandler(CmbLightDark_SelectedIndexChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(10, 474);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(89, 18);
			this.label5.TabIndex = 18;
			this.label5.Text = "éå¼ç±»å:";
			this.lblAbsThreshold.AutoSize = true;
			this.lblAbsThreshold.Location = new System.Drawing.Point(320, 297);
			this.lblAbsThreshold.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.lblAbsThreshold.Name = "lblAbsThreshold";
			this.lblAbsThreshold.Size = new System.Drawing.Size(17, 18);
			this.lblAbsThreshold.TabIndex = 17;
			this.lblAbsThreshold.Text = "2";
			this.lblStdDevScale.AutoSize = true;
			this.lblStdDevScale.Location = new System.Drawing.Point(320, 213);
			this.lblStdDevScale.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.lblStdDevScale.Name = "lblStdDevScale";
			this.lblStdDevScale.Size = new System.Drawing.Size(26, 18);
			this.lblStdDevScale.TabIndex = 16;
			this.lblStdDevScale.Text = "20";
			this.lblMaskSizeY.AutoSize = true;
			this.lblMaskSizeY.Location = new System.Drawing.Point(320, 126);
			this.lblMaskSizeY.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.lblMaskSizeY.Name = "lblMaskSizeY";
			this.lblMaskSizeY.Size = new System.Drawing.Size(26, 18);
			this.lblMaskSizeY.TabIndex = 15;
			this.lblMaskSizeY.Text = "15";
			this.lblMaskSizeX.AutoSize = true;
			this.lblMaskSizeX.Location = new System.Drawing.Point(320, 44);
			this.lblMaskSizeX.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.lblMaskSizeX.Name = "lblMaskSizeX";
			this.lblMaskSizeX.Size = new System.Drawing.Size(26, 18);
			this.lblMaskSizeX.TabIndex = 14;
			this.lblMaskSizeX.Text = "15";
			this.AbsThreshold.AutoSize = false;
			this.AbsThreshold.LargeChange = 2;
			this.AbsThreshold.Location = new System.Drawing.Point(12, 332);
			this.AbsThreshold.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.AbsThreshold.Maximum = 32;
			this.AbsThreshold.Minimum = -32;
			this.AbsThreshold.Name = "AbsThreshold";
			this.AbsThreshold.Size = new System.Drawing.Size(375, 39);
			this.AbsThreshold.TabIndex = 13;
			this.AbsThreshold.TickFrequency = 0;
			this.AbsThreshold.Value = 2;
			this.AbsThreshold.Scroll += new System.EventHandler(AbsThreshold_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(9, 294);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(107, 18);
			this.label4.TabIndex = 12;
			this.label4.Text = "æå°ç°åº¦å·®:";
			this.StdDevScale.AutoSize = false;
			this.StdDevScale.LargeChange = 2;
			this.StdDevScale.Location = new System.Drawing.Point(9, 250);
			this.StdDevScale.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.StdDevScale.Maximum = 200;
			this.StdDevScale.Minimum = -200;
			this.StdDevScale.Name = "StdDevScale";
			this.StdDevScale.Size = new System.Drawing.Size(375, 39);
			this.StdDevScale.TabIndex = 10;
			this.StdDevScale.TickFrequency = 0;
			this.StdDevScale.Value = 20;
			this.StdDevScale.Scroll += new System.EventHandler(StdDevScale_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 213);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(143, 18);
			this.label3.TabIndex = 9;
			this.label3.Text = "æ åå·®ç¼©æ¾å å­:";
			this.MaskSizeY.AutoSize = false;
			this.MaskSizeY.LargeChange = 2;
			this.MaskSizeY.Location = new System.Drawing.Point(12, 166);
			this.MaskSizeY.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.MaskSizeY.Maximum = 90;
			this.MaskSizeY.Minimum = 1;
			this.MaskSizeY.Name = "MaskSizeY";
			this.MaskSizeY.Size = new System.Drawing.Size(375, 39);
			this.MaskSizeY.TabIndex = 7;
			this.MaskSizeY.TickFrequency = 0;
			this.MaskSizeY.Value = 15;
			this.MaskSizeY.Scroll += new System.EventHandler(MaskSizeY_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(9, 126);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(134, 18);
			this.label2.TabIndex = 6;
			this.label2.Text = "åç´æ¹ååå¾ï¼";
			this.MaskSizeX.AutoSize = false;
			this.MaskSizeX.LargeChange = 2;
			this.MaskSizeX.Location = new System.Drawing.Point(12, 82);
			this.MaskSizeX.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.MaskSizeX.Maximum = 90;
			this.MaskSizeX.Minimum = 1;
			this.MaskSizeX.Name = "MaskSizeX";
			this.MaskSizeX.Size = new System.Drawing.Size(375, 39);
			this.MaskSizeX.TabIndex = 3;
			this.MaskSizeX.TickFrequency = 0;
			this.MaskSizeX.Value = 15;
			this.MaskSizeX.Scroll += new System.EventHandler(MaskSizeX_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(9, 44);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(134, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "æ°´å¹³æ¹ååå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(436, 200);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkImaginary.AutoSize = true;
			this.ChkImaginary.Location = new System.Drawing.Point(436, 249);
			this.ChkImaginary.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkImaginary.Name = "ChkImaginary";
			this.ChkImaginary.Size = new System.Drawing.Size(70, 22);
			this.ChkImaginary.TabIndex = 18;
			this.ChkImaginary.Text = "èé¨";
			this.ChkImaginary.UseVisualStyleBackColor = true;
			this.ChkImaginary.Visible = false;
			this.ChkImaginary.CheckedChanged += new System.EventHandler(ChkImaginary_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(556, 555);
			base.Controls.Add(this.ChkImaginary);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "VarLocalThresholdDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "åææ»¤æ³¢";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing);
			base.Load += new System.EventHandler(VarLocalThresholdDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Gamma).EndInit();
			((System.ComponentModel.ISupportInitialize)this.AbsThreshold).EndInit();
			((System.ComponentModel.ISupportInitialize)this.StdDevScale).EndInit();
			((System.ComponentModel.ISupportInitialize)this.MaskSizeY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.MaskSizeX).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class ShadingFilterDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private CheckBox ChkPreview;

		private Label label3;

		private Label label4;

		private ComboBox CmbExtractColor;

		private Label label5;

		private Label label2;

		private NumericUpDown ReductionSize;

		private Label label1;

		private ComboBox CmbCorrection;

		private Label lblb;

		private Label lbld;

		private NumericUpDown NoiseCut1;

		private Label label10;

		private Label label11;

		private NumericUpDown Gain1;

		private CheckBox ChkUniform;

		private NumericUpDown NoiseCut2;

		private Label label9;

		private NumericUpDown Gain2;

		private Label label6;

		private ComboBox CmbDirection;

		private Label label7;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShadingCorrectionFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Correction, int ReductionSize, int Direction, int ExtractColor, float Gain1, int NoiseCut1, float Gain2, int NoiseCut2, int UniformContrast);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe ShadingFilterDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (Text.Equals("æµæ·¡è¡¥æ­£"))
				{
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					IM_ShadingCorrectionFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbCorrection.SelectedIndex, (int)ReductionSize.Value, CmbDirection.SelectedIndex, CmbExtractColor.SelectedIndex, (float)Gain1.Value, (int)NoiseCut1.Value, (float)Gain2.Value, (int)NoiseCut2.Value, (!ChkUniform.Checked) ? 1 : 0);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void CmbCorrection_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (CmbCorrection.SelectedIndex == 0 || CmbCorrection.SelectedIndex == 1)
			{
				ReductionSize.Enabled = false;
				CmbDirection.Enabled = false;
			}
			else
			{
				ReductionSize.Enabled = true;
				CmbDirection.Enabled = true;
			}
			UpdateCanvas();
		}

		private void CmbExtractColor_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (CmbExtractColor.SelectedIndex == 3)
			{
				Label label = lblb;
				bool visible = (lbld.Visible = true);
				label.Visible = visible;
				NumericUpDown gain = Gain2;
				visible = (NoiseCut2.Visible = true);
				gain.Visible = visible;
			}
			else
			{
				Label label2 = lblb;
				bool visible = (lbld.Visible = false);
				label2.Visible = visible;
				NumericUpDown gain2 = Gain2;
				visible = (NoiseCut2.Visible = false);
				gain2.Visible = visible;
			}
			UpdateCanvas();
		}

		private void ShadingFilterDialog_Load(object sender, EventArgs e)
		{
			CmbCorrection.SelectedIndex = 2;
			CmbDirection.SelectedIndex = 2;
			CmbExtractColor.SelectedIndex = 2;
			UpdateCanvas();
		}

		private unsafe void ShadingFilterDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void ReductionSize_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Gain1_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void NoiseCut1_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Gain2_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void NoiseCut2_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkUniform_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbDirection_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void btnOk_Click(object sender, EventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbDirection = new System.Windows.Forms.ComboBox();
			this.label7 = new System.Windows.Forms.Label();
			this.lblb = new System.Windows.Forms.Label();
			this.lbld = new System.Windows.Forms.Label();
			this.NoiseCut1 = new System.Windows.Forms.NumericUpDown();
			this.label10 = new System.Windows.Forms.Label();
			this.label11 = new System.Windows.Forms.Label();
			this.Gain1 = new System.Windows.Forms.NumericUpDown();
			this.ChkUniform = new System.Windows.Forms.CheckBox();
			this.NoiseCut2 = new System.Windows.Forms.NumericUpDown();
			this.label9 = new System.Windows.Forms.Label();
			this.Gain2 = new System.Windows.Forms.NumericUpDown();
			this.label6 = new System.Windows.Forms.Label();
			this.CmbExtractColor = new System.Windows.Forms.ComboBox();
			this.label5 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.ReductionSize = new System.Windows.Forms.NumericUpDown();
			this.label1 = new System.Windows.Forms.Label();
			this.CmbCorrection = new System.Windows.Forms.ComboBox();
			this.label4 = new System.Windows.Forms.Label();
			this.label3 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.NoiseCut1).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Gain1).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.NoiseCut2).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Gain2).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ReductionSize).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 45);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(307, 12);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.btnOk.Click += new System.EventHandler(btnOk_Click);
			this.groupBox.Controls.Add(this.CmbDirection);
			this.groupBox.Controls.Add(this.label7);
			this.groupBox.Controls.Add(this.lblb);
			this.groupBox.Controls.Add(this.lbld);
			this.groupBox.Controls.Add(this.NoiseCut1);
			this.groupBox.Controls.Add(this.label10);
			this.groupBox.Controls.Add(this.label11);
			this.groupBox.Controls.Add(this.Gain1);
			this.groupBox.Controls.Add(this.ChkUniform);
			this.groupBox.Controls.Add(this.NoiseCut2);
			this.groupBox.Controls.Add(this.label9);
			this.groupBox.Controls.Add(this.Gain2);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.CmbExtractColor);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.ReductionSize);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Controls.Add(this.CmbCorrection);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(275, 312);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbDirection.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbDirection.FormattingEnabled = true;
			this.CmbDirection.Items.AddRange(new object[3] { "X", "Y", "XY" });
			this.CmbDirection.Location = new System.Drawing.Point(106, 108);
			this.CmbDirection.Name = "CmbDirection";
			this.CmbDirection.Size = new System.Drawing.Size(109, 20);
			this.CmbDirection.TabIndex = 37;
			this.CmbDirection.SelectedIndexChanged += new System.EventHandler(CmbDirection_SelectedIndexChanged);
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(20, 111);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(65, 12);
			this.label7.TabIndex = 36;
			this.label7.Text = "æ½åæ¹åï¼";
			this.lblb.AutoSize = true;
			this.lblb.Location = new System.Drawing.Point(184, 191);
			this.lblb.Name = "lblb";
			this.lblb.Size = new System.Drawing.Size(29, 12);
			this.lblb.TabIndex = 35;
			this.lblb.Text = "æé¨";
			this.lbld.AutoSize = true;
			this.lbld.Location = new System.Drawing.Point(104, 190);
			this.lbld.Name = "lbld";
			this.lbld.Size = new System.Drawing.Size(29, 12);
			this.lbld.TabIndex = 34;
			this.lbld.Text = "æé¨";
			this.NoiseCut1.Location = new System.Drawing.Point(165, 234);
			this.NoiseCut1.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.NoiseCut1.Name = "NoiseCut1";
			this.NoiseCut1.Size = new System.Drawing.Size(60, 21);
			this.NoiseCut1.TabIndex = 33;
			this.NoiseCut1.Value = new decimal(new int[4] { 16, 0, 0, 0 });
			this.NoiseCut1.ValueChanged += new System.EventHandler(NoiseCut1_ValueChanged);
			this.label10.AutoSize = true;
			this.label10.Location = new System.Drawing.Point(232, 237);
			this.label10.Name = "label10";
			this.label10.Size = new System.Drawing.Size(29, 12);
			this.label10.TabIndex = 32;
			this.label10.Text = "è²é¶";
			this.label11.AutoSize = true;
			this.label11.Location = new System.Drawing.Point(232, 210);
			this.label11.Name = "label11";
			this.label11.Size = new System.Drawing.Size(17, 12);
			this.label11.TabIndex = 31;
			this.label11.Text = "å";
			this.Gain1.DecimalPlaces = 2;
			this.Gain1.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Gain1.Location = new System.Drawing.Point(165, 206);
			this.Gain1.Maximum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Gain1.Name = "Gain1";
			this.Gain1.Size = new System.Drawing.Size(60, 21);
			this.Gain1.TabIndex = 30;
			this.Gain1.Value = new decimal(new int[4] { 2, 0, 0, 0 });
			this.Gain1.ValueChanged += new System.EventHandler(Gain1_ValueChanged);
			this.ChkUniform.AutoSize = true;
			this.ChkUniform.Location = new System.Drawing.Point(160, 276);
			this.ChkUniform.Name = "ChkUniform";
			this.ChkUniform.Size = new System.Drawing.Size(96, 16);
			this.ChkUniform.TabIndex = 29;
			this.ChkUniform.Text = "å¯¹æ¯åº¦å¹³åå";
			this.ChkUniform.UseVisualStyleBackColor = true;
			this.ChkUniform.CheckedChanged += new System.EventHandler(ChkUniform_CheckedChanged);
			this.NoiseCut2.Location = new System.Drawing.Point(91, 234);
			this.NoiseCut2.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.NoiseCut2.Name = "NoiseCut2";
			this.NoiseCut2.Size = new System.Drawing.Size(60, 21);
			this.NoiseCut2.TabIndex = 28;
			this.NoiseCut2.Value = new decimal(new int[4] { 16, 0, 0, 0 });
			this.NoiseCut2.ValueChanged += new System.EventHandler(NoiseCut2_ValueChanged);
			this.label9.AutoSize = true;
			this.label9.Location = new System.Drawing.Point(20, 239);
			this.label9.Name = "label9";
			this.label9.Size = new System.Drawing.Size(65, 12);
			this.label9.TabIndex = 25;
			this.label9.Text = "é¤å»å¹²æ°ï¼";
			this.Gain2.DecimalPlaces = 2;
			this.Gain2.Increment = new decimal(new int[4] { 1, 0, 0, 131072 });
			this.Gain2.Location = new System.Drawing.Point(91, 206);
			this.Gain2.Maximum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.Gain2.Name = "Gain2";
			this.Gain2.Size = new System.Drawing.Size(60, 21);
			this.Gain2.TabIndex = 23;
			this.Gain2.Value = new decimal(new int[4] { 2, 0, 0, 0 });
			this.Gain2.ValueChanged += new System.EventHandler(Gain2_ValueChanged);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(20, 210);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(41, 12);
			this.label6.TabIndex = 22;
			this.label6.Text = "å¢çï¼";
			this.CmbExtractColor.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbExtractColor.FormattingEnabled = true;
			this.CmbExtractColor.Items.AddRange(new object[4] { "æ", "æ", "ææ", "ææï¼ç¬ç«ï¼" });
			this.CmbExtractColor.Location = new System.Drawing.Point(106, 152);
			this.CmbExtractColor.Name = "CmbExtractColor";
			this.CmbExtractColor.Size = new System.Drawing.Size(109, 20);
			this.CmbExtractColor.TabIndex = 21;
			this.CmbExtractColor.SelectedIndexChanged += new System.EventHandler(CmbExtractColor_SelectedIndexChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(20, 155);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(65, 12);
			this.label5.TabIndex = 20;
			this.label5.Text = "æææ½åï¼";
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(220, 83);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(29, 12);
			this.label2.TabIndex = 19;
			this.label2.Text = "åç´ ";
			this.ReductionSize.Increment = new decimal(new int[4] { 4, 0, 0, 0 });
			this.ReductionSize.Location = new System.Drawing.Point(137, 79);
			this.ReductionSize.Maximum = new decimal(new int[4] { 508, 0, 0, 0 });
			this.ReductionSize.Minimum = new decimal(new int[4] { 4, 0, 0, 0 });
			this.ReductionSize.Name = "ReductionSize";
			this.ReductionSize.Size = new System.Drawing.Size(77, 21);
			this.ReductionSize.TabIndex = 18;
			this.ReductionSize.Value = new decimal(new int[4] { 16, 0, 0, 0 });
			this.ReductionSize.ValueChanged += new System.EventHandler(ReductionSize_ValueChanged);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(20, 79);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(65, 12);
			this.label1.TabIndex = 13;
			this.label1.Text = "æ½åå¤§å°ï¼";
			this.CmbCorrection.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbCorrection.FormattingEnabled = true;
			this.CmbCorrection.Items.AddRange(new object[4] { "å¹³åå¼è¡¥æ­£", "ä¸­é´å¼è¡¥æ­£", "é´å½±è¡¥æ­£", "é«éé´å½±è¡¥æ­£" });
			this.CmbCorrection.Location = new System.Drawing.Point(32, 47);
			this.CmbCorrection.Name = "CmbCorrection";
			this.CmbCorrection.Size = new System.Drawing.Size(204, 20);
			this.CmbCorrection.TabIndex = 12;
			this.CmbCorrection.SelectedIndexChanged += new System.EventHandler(CmbCorrection_SelectedIndexChanged);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(5, 128);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(251, 12);
			this.label4.TabIndex = 11;
			this.label4.Text = "_________________________________________";
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(20, 25);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(65, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "è¡¥æ­£æ¹æ³ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 91);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(376, 336);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ShadingFilterDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "AdjustDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(ShadingFilterDialog_FormClosing);
			base.Load += new System.EventHandler(ShadingFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.NoiseCut1).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Gain1).EndInit();
			((System.ComponentModel.ISupportInitialize)this.NoiseCut2).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Gain2).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ReductionSize).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class DynamicThresholdDialog : Form
	{
		private unsafe byte* ThresholdImage = null;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private CheckBox ChkPreview;

		private ComboBox CmbLightDark;

		private Label label3;

		private NumericUpDown OffsetUpDown;

		private TrackBar Offset;

		private Label label2;

		private ComboBox CmbThresholdImage;

		private Label label5;

		private Label label4;

		private Label label6;

		private ComboBox CmbDirection;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DynamicThresholding(byte* Src, byte* ThresholdImage, byte* Dest, int Width, int Height, int Stride, int Offset, int LightDark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BoxBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Hori_BoxBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vert_BoxBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Hori_GaussBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vert_GaussBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe DynamicThresholdDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (Text.Equals("Dynamic Threshold"))
				{
					if (CmbThresholdImage.SelectedIndex == 0)
					{
						if (CmbDirection.SelectedIndex == 0)
						{
							IM_Hori_BoxBlur(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (CmbDirection.SelectedIndex == 1)
						{
							IM_Vert_BoxBlur(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else
						{
							IM_BoxBlur_SSE(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
					}
					else if (CmbThresholdImage.SelectedIndex == 1)
					{
						if (CmbDirection.SelectedIndex == 0)
						{
							IM_Hori_GaussBlur(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (CmbDirection.SelectedIndex == 1)
						{
							IM_Vert_GaussBlur(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else
						{
							IM_GaussBlur_SSE(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
					}
					else if (CmbThresholdImage.SelectedIndex == 2)
					{
						IM_MedianBlur_SSE(Clone, ThresholdImage, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 50);
					}
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					IM_DynamicThresholding(Clone, ThresholdImage, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Offset.Value, CmbLightDark.SelectedIndex);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
			if (ThresholdImage != null)
			{
				Marshal.FreeHGlobal((IntPtr)ThresholdImage);
			}
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void DynamicThresholdDialog_Load(object sender, EventArgs e)
		{
			ThresholdImage = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CmbLightDark.SelectedIndex = 2;
			CmbDirection.SelectedIndex = 2;
			CmbThresholdImage.SelectedIndex = 0;
			UpdateCanvas();
		}

		private void OffsetUpDown_ValueChanged(object sender, EventArgs e)
		{
			Offset.Value = (int)OffsetUpDown.Value;
			UpdateCanvas();
		}

		private void Offset_Scroll(object sender, EventArgs e)
		{
			OffsetUpDown.Value = Offset.Value;
		}

		private void CmbLightDark_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void CmbThresholdImage_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (CmbThresholdImage.SelectedIndex == 3)
			{
				TrackBar radius = Radius;
				bool enabled = (RadiusUpDown.Enabled = false);
				radius.Enabled = enabled;
				OpenFileDialog openFileDialog = new OpenFileDialog
				{
					Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
				};
				if (openFileDialog.ShowDialog() == DialogResult.OK)
				{
					Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
					if (bitmap.PixelFormat != PixelFormat.Format8bppIndexed || bitmap.Width != canvas.Width || bitmap.Height != canvas.Height)
					{
						MessageBox.Show("ä½ éæ©äºä¸å¹ååå¾ä¸å¹éçå¾å.");
					}
					else
					{
						BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
						CopyMemory(ThresholdImage, (void*)bitmapData.Scan0, bitmap.Height * bitmapData.Stride);
						bitmap.UnlockBits(bitmapData);
					}
					bitmap.Dispose();
					UpdateCanvas();
				}
				openFileDialog.Dispose();
			}
			else
			{
				TrackBar radius2 = Radius;
				NumericUpDown radiusUpDown = RadiusUpDown;
				bool flag3 = (CmbDirection.Enabled = true);
				bool enabled = (radiusUpDown.Enabled = flag3);
				radius2.Enabled = enabled;
			}
			UpdateCanvas();
		}

		private void CmbDirection_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbThresholdImage = new System.Windows.Forms.ComboBox();
			this.label5 = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.CmbLightDark = new System.Windows.Forms.ComboBox();
			this.label3 = new System.Windows.Forms.Label();
			this.OffsetUpDown = new System.Windows.Forms.NumericUpDown();
			this.Offset = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.label6 = new System.Windows.Forms.Label();
			this.CmbDirection = new System.Windows.Forms.ComboBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.OffsetUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Offset).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 45);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(307, 12);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.CmbDirection);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.CmbThresholdImage);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.CmbLightDark);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.OffsetUpDown);
			this.groupBox.Controls.Add(this.Offset);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(275, 284);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbThresholdImage.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbThresholdImage.FormattingEnabled = true;
			this.CmbThresholdImage.Items.AddRange(new object[4] { "Box Blur", "Guass Blur", "Median Blur", "From File....." });
			this.CmbThresholdImage.Location = new System.Drawing.Point(107, 141);
			this.CmbThresholdImage.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.CmbThresholdImage.Name = "CmbThresholdImage";
			this.CmbThresholdImage.Size = new System.Drawing.Size(135, 20);
			this.CmbThresholdImage.TabIndex = 13;
			this.CmbThresholdImage.SelectedIndexChanged += new System.EventHandler(CmbThresholdImage_SelectedIndexChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(5, 143);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(101, 12);
			this.label5.TabIndex = 12;
			this.label5.Text = "ThresholdImageï¼";
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(5, 112);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(251, 12);
			this.label4.TabIndex = 11;
			this.label4.Text = "_________________________________________";
			this.CmbLightDark.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbLightDark.FormattingEnabled = true;
			this.CmbLightDark.Items.AddRange(new object[4] { "dark", "equal", "light", "not_equal" });
			this.CmbLightDark.Location = new System.Drawing.Point(107, 79);
			this.CmbLightDark.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.CmbLightDark.Name = "CmbLightDark";
			this.CmbLightDark.Size = new System.Drawing.Size(135, 20);
			this.CmbLightDark.TabIndex = 10;
			this.CmbLightDark.SelectedIndexChanged += new System.EventHandler(CmbLightDark_SelectedIndexChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(5, 83);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(71, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "LightDarkï¼";
			this.OffsetUpDown.Location = new System.Drawing.Point(191, 21);
			this.OffsetUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.OffsetUpDown.Name = "OffsetUpDown";
			this.OffsetUpDown.Size = new System.Drawing.Size(50, 21);
			this.OffsetUpDown.TabIndex = 7;
			this.OffsetUpDown.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.OffsetUpDown.ValueChanged += new System.EventHandler(OffsetUpDown_ValueChanged);
			this.Offset.AutoSize = false;
			this.Offset.LargeChange = 2;
			this.Offset.Location = new System.Drawing.Point(4, 47);
			this.Offset.Maximum = 255;
			this.Offset.Name = "Offset";
			this.Offset.Size = new System.Drawing.Size(250, 26);
			this.Offset.TabIndex = 6;
			this.Offset.TickFrequency = 0;
			this.Offset.Value = 5;
			this.Offset.Scroll += new System.EventHandler(Offset_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(2, 21);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(53, 12);
			this.label2.TabIndex = 8;
			this.label2.Text = "Offsetï¼";
			this.RadiusUpDown.Location = new System.Drawing.Point(193, 211);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 20, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(6, 236);
			this.Radius.Maximum = 200;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(250, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 20;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(4, 211);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(53, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "Radiusï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 91);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(4, 183);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(71, 12);
			this.label6.TabIndex = 14;
			this.label6.Text = "Directionï¼";
			this.CmbDirection.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbDirection.FormattingEnabled = true;
			this.CmbDirection.Items.AddRange(new object[3] { "X", "Y", "XY" });
			this.CmbDirection.Location = new System.Drawing.Point(132, 179);
			this.CmbDirection.Name = "CmbDirection";
			this.CmbDirection.Size = new System.Drawing.Size(109, 20);
			this.CmbDirection.TabIndex = 38;
			this.CmbDirection.SelectedIndexChanged += new System.EventHandler(CmbDirection_SelectedIndexChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(385, 308);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "DynamicThresholdDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "AdjustDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(DynamicThresholdDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.OffsetUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Offset).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class FrmMiscDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Busy;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Label label1;

		private CheckBox ChkPreview;

		private Label label3;

		private Label label2;

		private ComboBox CmbFilterShift;

		private ComboBox CmbFilterSize;

		private ComboBox CmbFilterType;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vibrance(byte* Src, byte* Dest, int Width, int Height, int Stride, int Adjustment);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LawstextureFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int FilterType, int Shift, int FilterSize);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe FrmMiscDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				if (Text.Equals("Laws Texture Filter"))
				{
					IM_LawstextureFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Convert.ToInt32(CmbFilterType.SelectedIndex), Convert.ToInt32(CmbFilterShift.SelectedItem.ToString()), Convert.ToInt32(CmbFilterSize.SelectedItem.ToString()));
				}
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float num = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + num;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void AddTypeItem(ComboBox CB, int Size)
		{
			CB.Items.Clear();
			string[] array = new string[7] { "l", "e", "s", "w", "r", "u", "o" };
			for (int i = 0; i < Size * Size; i++)
			{
				int num = i / Size;
				int num2 = i % Size;
				CB.Items.Add("'" + array[num] + array[num2] + "'");
			}
			CB.SelectedIndex = Size;
			CmbFilterShift.SelectedIndex = Size - 3;
		}

		private void FrmMiscDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (Text.Equals("Laws Texture Filter"))
			{
				CmbFilterSize.Items.Add("3");
				CmbFilterSize.Items.Add("5");
				CmbFilterSize.Items.Add("7");
				CmbFilterSize.SelectedIndex = 1;
				CmbFilterShift.Items.Add("0");
				CmbFilterShift.Items.Add("1");
				CmbFilterShift.Items.Add("2");
				CmbFilterShift.Items.Add("3");
				CmbFilterShift.Items.Add("4");
				CmbFilterShift.Items.Add("5");
				CmbFilterShift.Items.Add("6");
				CmbFilterShift.Items.Add("7");
				CmbFilterShift.Items.Add("8");
				CmbFilterShift.Items.Add("9");
				CmbFilterShift.SelectedIndex = 2;
				AddTypeItem(CmbFilterType, 5);
				UpdateCanvas();
			}
			Busy = false;
		}

		private unsafe void FrmMiscDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void CmbFilterSize_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!Busy)
			{
				Busy = true;
				AddTypeItem(CmbFilterType, Convert.ToInt32(CmbFilterSize.SelectedItem.ToString()));
				Busy = false;
				UpdateCanvas();
			}
		}

		private void CmbFilterType_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!Busy)
			{
				UpdateCanvas();
			}
		}

		private void CmbFilterShift_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!Busy)
			{
				UpdateCanvas();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.label3 = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.CmbFilterShift = new System.Windows.Forms.ComboBox();
			this.CmbFilterSize = new System.Windows.Forms.ComboBox();
			this.CmbFilterType = new System.Windows.Forms.ComboBox();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 45);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(307, 12);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.CmbFilterShift);
			this.groupBox.Controls.Add(this.CmbFilterSize);
			this.groupBox.Controls.Add(this.CmbFilterType);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(272, 138);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 102);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(65, 12);
			this.label3.TabIndex = 23;
			this.label3.Text = "æ¾ç¤ºä½ç§»ï¼";
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 65);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(77, 12);
			this.label2.TabIndex = 22;
			this.label2.Text = "æ»¤æ³¢å¨å¤§å°ï¼";
			this.CmbFilterShift.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbFilterShift.FormattingEnabled = true;
			this.CmbFilterShift.Location = new System.Drawing.Point(141, 99);
			this.CmbFilterShift.Name = "CmbFilterShift";
			this.CmbFilterShift.Size = new System.Drawing.Size(115, 20);
			this.CmbFilterShift.TabIndex = 21;
			this.CmbFilterShift.SelectedIndexChanged += new System.EventHandler(CmbFilterShift_SelectedIndexChanged);
			this.CmbFilterSize.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbFilterSize.FormattingEnabled = true;
			this.CmbFilterSize.Location = new System.Drawing.Point(141, 62);
			this.CmbFilterSize.Name = "CmbFilterSize";
			this.CmbFilterSize.Size = new System.Drawing.Size(115, 20);
			this.CmbFilterSize.TabIndex = 20;
			this.CmbFilterSize.SelectedIndexChanged += new System.EventHandler(CmbFilterSize_SelectedIndexChanged);
			this.CmbFilterType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbFilterType.FormattingEnabled = true;
			this.CmbFilterType.Location = new System.Drawing.Point(141, 26);
			this.CmbFilterType.Name = "CmbFilterType";
			this.CmbFilterType.Size = new System.Drawing.Size(115, 20);
			this.CmbFilterType.TabIndex = 19;
			this.CmbFilterType.SelectedIndexChanged += new System.EventHandler(CmbFilterType_SelectedIndexChanged);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(77, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "æ»¤æ³¢å¨ç±»åï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 91);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(370, 160);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmMiscDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "MiscDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(FrmMiscDialog_FormClosing);
			base.Load += new System.EventHandler(FrmMiscDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class AdjustDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private CheckBox ChkPreview;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vibrance(byte* Src, byte* Dest, int Width, int Height, int Stride, int Adjustment);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe AdjustDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				if (Text.Equals("èªç¶é¥±ååº¦"))
				{
					IM_Vibrance(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
				}
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 45);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(307, 12);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(275, 105);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.RadiusUpDown.Location = new System.Drawing.Point(195, 29);
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 100, 0, 0, -2147483648 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(8, 55);
			this.Radius.Maximum = 100;
			this.Radius.Minimum = -100;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(250, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 91);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(374, 131);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "AdjustDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "AdjustDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class BinaryInfoDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private int EulerNumber;

		private int ContinuousBlockAmount;

		private int WhitePixelAmount;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown BlockSize;

		private Label label1;

		private TextBox TxtInfo;

		private RadioButton Connected8;

		private RadioButton Connected4;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetContinuousBlockAmount(byte* Src, int Width, int Height, int Stride, int SmallestArea, ref int Amount, int ConnectedArea);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetEulerNumber(byte* Src, int Width, int Height, int Stride, ref int Amount, int ConnectedArea);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetWhitePixelAmount(byte* Src, int Width, int Height, int Stride, ref int Amount);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe BinaryInfoDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
			Busy = true;
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private unsafe void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			IM_GetEulerNumber(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref EulerNumber, Connected4.Checked ? 4 : 8);
			IM_GetContinuousBlockAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)BlockSize.Value, ref ContinuousBlockAmount, Connected4.Checked ? 4 : 8);
			IM_GetWhitePixelAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref WhitePixelAmount);
			TxtInfo.Text = "æ»åç´ ä¸ªæ°ä¸ºï¼" + canvas.Image.Width * canvas.Image.Height + Environment.NewLine + Environment.NewLine;
			TextBox txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "ç½è²çåç´ ä¸ªæ°ä¸ºï¼" + WhitePixelAmount + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "æ¾å°ç¬¦åæ¡ä»¶çè¿ç»­åï¼" + ContinuousBlockAmount + "ä¸ª" + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "å¾åçæ¬§ææ°ä¸ºï¼" + EulerNumber + Environment.NewLine + Environment.NewLine;
			Busy = false;
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private unsafe void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Busy = true;
			IM_GetEulerNumber(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref EulerNumber, Connected4.Checked ? 4 : 8);
			IM_GetContinuousBlockAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)BlockSize.Value, ref ContinuousBlockAmount, Connected4.Checked ? 4 : 8);
			IM_GetWhitePixelAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref WhitePixelAmount);
			TxtInfo.Text = "æ»åç´ ä¸ªæ°ä¸ºï¼" + canvas.Image.Width * canvas.Image.Height + Environment.NewLine + Environment.NewLine;
			TextBox txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "ç½è²çåç´ ä¸ªæ°ä¸ºï¼" + WhitePixelAmount + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "æ¾å°ç¬¦åæ¡ä»¶çè¿ç»­åï¼" + ContinuousBlockAmount + "ä¸ª" + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "å¾åçæ¬§ææ°ä¸ºï¼" + EulerNumber + Environment.NewLine + Environment.NewLine;
			Busy = false;
		}

		private unsafe void Connected4_CheckedChanged(object sender, EventArgs e)
		{
			Busy = true;
			IM_GetEulerNumber(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref EulerNumber, Connected4.Checked ? 4 : 8);
			IM_GetContinuousBlockAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)BlockSize.Value, ref ContinuousBlockAmount, Connected4.Checked ? 4 : 8);
			IM_GetWhitePixelAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref WhitePixelAmount);
			TxtInfo.Text = "æ»åç´ ä¸ªæ°ä¸ºï¼" + canvas.Image.Width * canvas.Image.Height + Environment.NewLine + Environment.NewLine;
			TextBox txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "ç½è²çåç´ ä¸ªæ°ä¸ºï¼" + WhitePixelAmount + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "æ¾å°ç¬¦åæ¡ä»¶çè¿ç»­åï¼" + ContinuousBlockAmount + "ä¸ª" + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "å¾åçæ¬§ææ°ä¸ºï¼" + EulerNumber + Environment.NewLine + Environment.NewLine;
			Busy = false;
		}

		private unsafe void Connected8_CheckedChanged(object sender, EventArgs e)
		{
			Busy = true;
			IM_GetEulerNumber(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref EulerNumber, Connected4.Checked ? 4 : 8);
			IM_GetContinuousBlockAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)BlockSize.Value, ref ContinuousBlockAmount, Connected4.Checked ? 4 : 8);
			IM_GetWhitePixelAmount(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref WhitePixelAmount);
			TxtInfo.Text = "æ»åç´ ä¸ªæ°ä¸ºï¼" + canvas.Image.Width * canvas.Image.Height + Environment.NewLine + Environment.NewLine;
			TextBox txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "ç½è²çåç´ ä¸ªæ°ä¸ºï¼" + WhitePixelAmount + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "æ¾å°ç¬¦åæ¡ä»¶çè¿ç»­åï¼" + ContinuousBlockAmount + "ä¸ª" + Environment.NewLine + Environment.NewLine;
			txtInfo = TxtInfo;
			txtInfo.Text = txtInfo.Text + "å¾åçæ¬§ææ°ä¸ºï¼" + EulerNumber + Environment.NewLine + Environment.NewLine;
			Busy = false;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.Connected8 = new System.Windows.Forms.RadioButton();
			this.Connected4 = new System.Windows.Forms.RadioButton();
			this.BlockSize = new System.Windows.Forms.NumericUpDown();
			this.label1 = new System.Windows.Forms.Label();
			this.TxtInfo = new System.Windows.Forms.TextBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.BlockSize).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(347, 53);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(348, 21);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.Connected8);
			this.groupBox.Controls.Add(this.Connected4);
			this.groupBox.Controls.Add(this.BlockSize);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(9, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(326, 60);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.Connected8.AutoSize = true;
			this.Connected8.Location = new System.Drawing.Point(259, 29);
			this.Connected8.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.Connected8.Name = "Connected8";
			this.Connected8.Size = new System.Drawing.Size(53, 16);
			this.Connected8.TabIndex = 7;
			this.Connected8.Text = "8é¢å";
			this.Connected8.UseVisualStyleBackColor = true;
			this.Connected8.CheckedChanged += new System.EventHandler(Connected8_CheckedChanged);
			this.Connected4.AutoSize = true;
			this.Connected4.Checked = true;
			this.Connected4.Location = new System.Drawing.Point(174, 29);
			this.Connected4.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.Connected4.Name = "Connected4";
			this.Connected4.Size = new System.Drawing.Size(53, 16);
			this.Connected4.TabIndex = 6;
			this.Connected4.TabStop = true;
			this.Connected4.Text = "4é¢å";
			this.Connected4.UseVisualStyleBackColor = true;
			this.Connected4.CheckedChanged += new System.EventHandler(Connected4_CheckedChanged);
			this.BlockSize.Location = new System.Drawing.Point(89, 27);
			this.BlockSize.Maximum = new decimal(new int[4] { 65536, 0, 0, 0 });
			this.BlockSize.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.BlockSize.Name = "BlockSize";
			this.BlockSize.Size = new System.Drawing.Size(50, 21);
			this.BlockSize.TabIndex = 4;
			this.BlockSize.Value = new decimal(new int[4] { 12, 0, 0, 0 });
			this.BlockSize.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(77, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "è¿ç»­åå¤§å°ï¼";
			this.TxtInfo.Location = new System.Drawing.Point(8, 77);
			this.TxtInfo.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.TxtInfo.Multiline = true;
			this.TxtInfo.Name = "TxtInfo";
			this.TxtInfo.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
			this.TxtInfo.Size = new System.Drawing.Size(329, 209);
			this.TxtInfo.TabIndex = 17;
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(411, 304);
			base.Controls.Add(this.TxtInfo);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "BinaryInfoDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "BinaryInfoDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.BlockSize).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class FrmHistgram : Form
	{
		private Canvas canvas;

		private int[] countPixel = new int[256];

		private int maxPixel;

		private IContainer components;

		public FrmHistgram()
		{
			InitializeComponent();
		}

		public unsafe FrmHistgram(Canvas Parent)
		{
			InitializeComponent();
			canvas = Parent;
			maxPixel = 0;
			Array.Clear(countPixel, 0, 256);
			byte* imageData = canvas.ImageData;
			if (canvas.Image.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				for (int i = 0; i < canvas.Image.Height; i++)
				{
					int num = i * canvas.Stride;
					for (int j = 0; j < canvas.Image.Width; j++)
					{
						countPixel[imageData[num++]]++;
					}
				}
			}
			else
			{
				for (int k = 0; k < canvas.Image.Height; k++)
				{
					int num2 = k * canvas.Stride;
					for (int l = 0; l < canvas.Image.Width; l++)
					{
						countPixel[imageData[num2++]]++;
						countPixel[imageData[num2++]]++;
						countPixel[imageData[num2++]]++;
					}
				}
				for (int m = 0; m < 256; m++)
				{
					countPixel[m] /= 3;
				}
			}
			for (int n = 0; n < 256; n++)
			{
				if (maxPixel < countPixel[n])
				{
					maxPixel = countPixel[n];
				}
			}
		}

		private void FrmHistgram_Load(object sender, EventArgs e)
		{
		}

		private void FrmHistgram_Paint(object sender, PaintEventArgs e)
		{
			if (maxPixel != 0)
			{
				Graphics graphics = e.Graphics;
				Pen pen = new Pen(Brushes.Black, 1f);
				graphics.DrawLine(pen, 50, 240, 320, 240);
				graphics.DrawLine(pen, 50, 240, 50, 30);
				graphics.DrawLine(pen, 100, 240, 100, 242);
				graphics.DrawLine(pen, 150, 240, 150, 242);
				graphics.DrawLine(pen, 200, 240, 200, 242);
				graphics.DrawLine(pen, 250, 240, 250, 242);
				graphics.DrawLine(pen, 300, 240, 300, 242);
				graphics.DrawString("0", new Font("New Timer", 8f), Brushes.Black, new PointF(46f, 242f));
				graphics.DrawString("50", new Font("New Timer", 8f), Brushes.Black, new PointF(92f, 242f));
				graphics.DrawString("100", new Font("New Timer", 8f), Brushes.Black, new PointF(139f, 242f));
				graphics.DrawString("150", new Font("New Timer", 8f), Brushes.Black, new PointF(189f, 242f));
				graphics.DrawString("200", new Font("New Timer", 8f), Brushes.Black, new PointF(239f, 242f));
				graphics.DrawString("250", new Font("New Timer", 8f), Brushes.Black, new PointF(289f, 242f));
				graphics.DrawLine(pen, 48, 40, 50, 40);
				graphics.DrawString("0", new Font("New Timer", 8f), Brushes.Black, new PointF(34f, 234f));
				graphics.DrawString(maxPixel.ToString(), new Font("New Timer", 8f), Brushes.Black, new PointF(18f, 34f));
				double num = 0.0;
				for (int i = 0; i < 256; i++)
				{
					num = 200.0 * (double)countPixel[i] / (double)maxPixel;
					graphics.DrawLine(pen, 50 + i, 240, 50 + i, 240 - (int)num);
				}
				pen.Dispose();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			base.SuspendLayout();
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(540, 422);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "FrmHistgram";
			this.Text = "ç´æ¹å¾";
			base.Load += new System.EventHandler(FrmHistgram_Load);
			base.Paint += new System.Windows.Forms.PaintEventHandler(FrmHistgram_Paint);
			base.ResumeLayout(false);
		}
	}
	public class GlobalBinaryDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown ThresholdUpDown;

		private TrackBar Threshold;

		private Label label1;

		private CheckBox ChkPreview;

		private ComboBox CmbMethod;

		private Label label2;

		private CheckBox ChkSpeed;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Threshold_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Threshold_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Threshold_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetOSTUThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMaxEntropyThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetIterativeBestThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMinimumThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetHuangFuzzyThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetTriangleThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSimpleStatisticsThreshold(byte* Src, int Width, int Height, int Stride, ref int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe GlobalBinaryDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
			Busy = true;
		}

		private void GlobalBinaryDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbMethod.Items.Add("èªå®ä¹");
			CmbMethod.Items.Add("OSTU");
			CmbMethod.Items.Add("MaxEntropy");
			CmbMethod.Items.Add("IterativeBest");
			CmbMethod.Items.Add("Minimum");
			CmbMethod.Items.Add("HuangFuzzy");
			CmbMethod.Items.Add("Triangle");
			CmbMethod.Items.Add("SimpleStatistics");
			CmbMethod.SelectedIndex = 0;
			Busy = false;
			UpdateCanvas();
		}

		private unsafe void GlobalBinaryDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void ThresholdUpDown_ValueChanged(object sender, EventArgs e)
		{
			Threshold.Value = (int)ThresholdUpDown.Value;
			UpdateCanvas();
		}

		private void Threshold_Scroll(object sender, EventArgs e)
		{
			ThresholdUpDown.Value = Threshold.Value;
			CmbMethod.SelectedIndex = 0;
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				Busy = true;
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				int num = 1;
				if (ChkSpeed.Checked)
				{
					num = 100;
				}
				TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
				TimeUse.GetCurrentParent().Refresh();
				for (int i = 0; i < num; i++)
				{
					if (OptPureC.Checked)
					{
						IM_Threshold_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Threshold.Value);
					}
					else if (OptSSE.Checked)
					{
						IM_Threshold_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Threshold.Value);
					}
					else if (OptAvx.Checked)
					{
						IM_Threshold_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Threshold.Value);
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void CmbMethod_SelectedIndexChanged(object sender, EventArgs e)
		{
			int Threshold = this.Threshold.Value;
			if (CmbMethod.SelectedIndex == 1)
			{
				IM_GetOSTUThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 2)
			{
				IM_GetMaxEntropyThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 3)
			{
				IM_GetIterativeBestThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 4)
			{
				IM_GetMinimumThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 5)
			{
				IM_GetHuangFuzzyThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 6)
			{
				IM_GetTriangleThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			else if (CmbMethod.SelectedIndex == 7)
			{
				IM_GetSimpleStatisticsThreshold(Clone, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ref Threshold);
			}
			this.Threshold.Value = Threshold;
			ThresholdUpDown.Value = Threshold;
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbMethod = new System.Windows.Forms.ComboBox();
			this.label2 = new System.Windows.Forms.Label();
			this.ThresholdUpDown = new System.Windows.Forms.NumericUpDown();
			this.Threshold = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.ThresholdUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Threshold).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(453, 50);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(454, 17);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.CmbMethod);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.ThresholdUpDown);
			this.groupBox.Controls.Add(this.Threshold);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(9, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(425, 114);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbMethod.FormattingEnabled = true;
			this.CmbMethod.Location = new System.Drawing.Point(99, 19);
			this.CmbMethod.Margin = new System.Windows.Forms.Padding(2);
			this.CmbMethod.Name = "CmbMethod";
			this.CmbMethod.Size = new System.Drawing.Size(309, 20);
			this.CmbMethod.TabIndex = 7;
			this.CmbMethod.SelectedIndexChanged += new System.EventHandler(CmbMethod_SelectedIndexChanged);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(15, 21);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(65, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "ä½¿ç¨æ¹æ³ï¼";
			this.ThresholdUpDown.Location = new System.Drawing.Point(322, 48);
			this.ThresholdUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.ThresholdUpDown.Name = "ThresholdUpDown";
			this.ThresholdUpDown.Size = new System.Drawing.Size(85, 21);
			this.ThresholdUpDown.TabIndex = 4;
			this.ThresholdUpDown.Value = new decimal(new int[4] { 127, 0, 0, 0 });
			this.ThresholdUpDown.ValueChanged += new System.EventHandler(ThresholdUpDown_ValueChanged);
			this.Threshold.AutoSize = false;
			this.Threshold.LargeChange = 2;
			this.Threshold.Location = new System.Drawing.Point(5, 80);
			this.Threshold.Maximum = 255;
			this.Threshold.Name = "Threshold";
			this.Threshold.Size = new System.Drawing.Size(402, 26);
			this.Threshold.TabIndex = 3;
			this.Threshold.TickFrequency = 0;
			this.Threshold.Value = 127;
			this.Threshold.Scroll += new System.EventHandler(Threshold_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(13, 57);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "éå¼ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(453, 93);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(454, 122);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(72, 16);
			this.ChkSpeed.TabIndex = 24;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Location = new System.Drawing.Point(9, 132);
			this.Optimization.Name = "Optimization";
			this.Optimization.Size = new System.Drawing.Size(425, 74);
			this.Optimization.TabIndex = 23;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(322, 34);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(89, 16);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(205, 34);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(89, 16);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(22, 34);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(161, 16);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(535, 217);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "GlobalBinaryDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "GlobalBinaryDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(GlobalBinaryDialog_FormClosing);
			base.Load += new System.EventHandler(GlobalBinaryDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.ThresholdUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Threshold).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class BandPassFilterDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private TrackBar Sigma;

		private Label label1;

		private TrackBar High;

		private Label label2;

		private CheckBox ChkPreview;

		private Label label3;

		private TrackBar C;

		private Label label4;

		private Label lbltolerance;

		private Label lblsmall;

		private Label lblLarge;

		private ComboBox CmbStripes;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BandPassFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int LargeDelta, int SmallDelta, int Stripes, int ToleranceDia);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe BandPassFilterDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (!Busy)
				{
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					IM_BandPassFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, High.Value, CmbStripes.SelectedIndex, C.Value);
					stopwatch.Stop();
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void HazeRemovalBasedOnDarkChannelPriorDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbStripes.Items.Add("None");
			CmbStripes.Items.Add("Horizontal");
			CmbStripes.Items.Add("Vertical");
			CmbStripes.SelectedIndex = 0;
			Busy = false;
			UpdateCanvas();
		}

		private void Sigma_Scroll(object sender, EventArgs e)
		{
			lblLarge.Text = Sigma.Value.ToString();
			UpdateCanvas();
		}

		private void High_Scroll(object sender, EventArgs e)
		{
			lblsmall.Text = High.Value.ToString();
			UpdateCanvas();
		}

		private void C_Scroll(object sender, EventArgs e)
		{
			lbltolerance.Text = C.Value.ToString();
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbStripes_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbStripes = new System.Windows.Forms.ComboBox();
			this.lbltolerance = new System.Windows.Forms.Label();
			this.lblsmall = new System.Windows.Forms.Label();
			this.lblLarge = new System.Windows.Forms.Label();
			this.C = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.label3 = new System.Windows.Forms.Label();
			this.High = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.Sigma = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.C).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.High).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 67);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(306, 23);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.CmbStripes);
			this.groupBox.Controls.Add(this.lbltolerance);
			this.groupBox.Controls.Add(this.lblsmall);
			this.groupBox.Controls.Add(this.lblLarge);
			this.groupBox.Controls.Add(this.C);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.High);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.Sigma);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(265, 253);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbStripes.FormattingEnabled = true;
			this.CmbStripes.Location = new System.Drawing.Point(123, 142);
			this.CmbStripes.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.CmbStripes.Name = "CmbStripes";
			this.CmbStripes.Size = new System.Drawing.Size(123, 20);
			this.CmbStripes.TabIndex = 18;
			this.CmbStripes.SelectedIndexChanged += new System.EventHandler(CmbStripes_SelectedIndexChanged);
			this.lbltolerance.AutoSize = true;
			this.lbltolerance.Location = new System.Drawing.Point(213, 186);
			this.lbltolerance.Name = "lbltolerance";
			this.lbltolerance.Size = new System.Drawing.Size(11, 12);
			this.lbltolerance.TabIndex = 17;
			this.lbltolerance.Text = "5";
			this.lblsmall.AutoSize = true;
			this.lblsmall.Location = new System.Drawing.Point(213, 84);
			this.lblsmall.Name = "lblsmall";
			this.lblsmall.Size = new System.Drawing.Size(11, 12);
			this.lblsmall.TabIndex = 15;
			this.lblsmall.Text = "4";
			this.lblLarge.AutoSize = true;
			this.lblLarge.Location = new System.Drawing.Point(213, 29);
			this.lblLarge.Name = "lblLarge";
			this.lblLarge.Size = new System.Drawing.Size(17, 12);
			this.lblLarge.TabIndex = 14;
			this.lblLarge.Text = "40";
			this.C.AutoSize = false;
			this.C.LargeChange = 2;
			this.C.Location = new System.Drawing.Point(8, 211);
			this.C.Maximum = 50;
			this.C.Name = "C";
			this.C.Size = new System.Drawing.Size(250, 26);
			this.C.TabIndex = 13;
			this.C.TickFrequency = 0;
			this.C.Value = 5;
			this.C.Scroll += new System.EventHandler(C_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 186);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(143, 12);
			this.label4.TabIndex = 12;
			this.label4.Text = "Tolerance of direction:";
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(4, 142);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(107, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "Suppress stripes:";
			this.High.AutoSize = false;
			this.High.LargeChange = 2;
			this.High.Location = new System.Drawing.Point(8, 111);
			this.High.Maximum = 256;
			this.High.Name = "High";
			this.High.Size = new System.Drawing.Size(250, 26);
			this.High.TabIndex = 7;
			this.High.TickFrequency = 0;
			this.High.Value = 4;
			this.High.Scroll += new System.EventHandler(High_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(185, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "Filter small structures up to:";
			this.Sigma.AutoSize = false;
			this.Sigma.LargeChange = 2;
			this.Sigma.Location = new System.Drawing.Point(8, 55);
			this.Sigma.Maximum = 512;
			this.Sigma.Name = "Sigma";
			this.Sigma.Size = new System.Drawing.Size(250, 26);
			this.Sigma.TabIndex = 3;
			this.Sigma.TickFrequency = 0;
			this.Sigma.Value = 40;
			this.Sigma.Scroll += new System.EventHandler(Sigma_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(197, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "Filter large structures down to:";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 128);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(374, 275);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "BandPassFilterDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "BandPassFilter";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing);
			base.Load += new System.EventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.C).EndInit();
			((System.ComponentModel.ISupportInitialize)this.High).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class LaplacePyramidFusionDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Button CmdFeature;

		private TextBox TxtFeature;

		private Label label3;

		private NumericUpDown Level;

		private Label label4;

		private CheckBox ChkPreview;

		private ComboBox CmbHighFreq;

		private Label label2;

		private ComboBox CmbLowFreq;

		private Label label1;

		private Label label5;

		private Label label6;

		private CheckBox ChkSailency;

		private CheckBox ChkLocalContrast;

		private CheckBox ChkEdge;

		private CheckBox ChkSaturation;

		private CheckBox ChkExpose;

		private Button CmdMask;

		private TextBox TxtMask;

		private Label label7;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LaplacePyramidFusion(byte* SrcA, byte* SrcB, byte* Dest, int Width, int Height, int Stride, int Low, int High, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_GetMaxPyramidLevel(int Width, int Height, int MinSize);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetFusionMask(byte* SrcA, byte* SrcB, byte* Dest, int Width, int Height, int Stride, int Method);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LaplacePyramidFusionWithMask(byte* SrcA, byte* SrcB, byte* Mask, byte* Dest, int Width, int Height, int Stride, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe LaplacePyramidFusionDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				if (Text.Equals("LaplacePyramidFusion") || Text.Equals("NormalizedCrossCorrelation(NCC)") || Text.Equals("LaplacePyramidFusionWithMask"))
				{
					try
					{
						Bitmap bitmap = (Bitmap)Image.FromFile(TxtFeature.Text);
						if (bitmap.PixelFormat == canvas.Image.PixelFormat && bitmap.Width == canvas.Image.Width && bitmap.Height == canvas.Image.Height)
						{
							if (TxtMask.Text == "")
							{
								BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
								if (Text.Equals("LaplacePyramidFusion"))
								{
									IM_LaplacePyramidFusion(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbLowFreq.SelectedIndex, CmbHighFreq.SelectedIndex, (int)Level.Value);
								}
								if (Text.Equals("LaplacePyramidFusionWithMask"))
								{
									byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Width * canvas.Image.Height);
									int num = 0;
									if (ChkSailency.Checked)
									{
										num |= 1;
									}
									if (ChkEdge.Checked)
									{
										num |= 2;
									}
									if (ChkLocalContrast.Checked)
									{
										num |= 4;
									}
									if (ChkSaturation.Checked)
									{
										num |= 8;
									}
									if (ChkExpose.Checked)
									{
										num |= 0x10;
									}
									IM_GetFusionMask(Clone, (byte*)(void*)bitmapData.Scan0, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Stride, num);
									IM_LaplacePyramidFusionWithMask(Clone, (byte*)(void*)bitmapData.Scan0, ptr, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)Level.Value);
									Marshal.FreeHGlobal((IntPtr)ptr);
								}
								bitmap.UnlockBits(bitmapData);
							}
							else
							{
								Bitmap bitmap2 = (Bitmap)Image.FromFile(TxtMask.Text);
								if (bitmap2.PixelFormat == PixelFormat.Format8bppIndexed && bitmap2.Width == canvas.Image.Width && bitmap2.Height == canvas.Image.Height)
								{
									BitmapData bitmapData2 = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
									BitmapData bitmapData3 = bitmap2.LockBits(new Rectangle(0, 0, bitmap2.Width, bitmap2.Height), ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
									IM_LaplacePyramidFusionWithMask(Clone, (byte*)(void*)bitmapData2.Scan0, (byte*)(void*)bitmapData3.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (int)Level.Value);
									bitmap.UnlockBits(bitmapData2);
									bitmap2.UnlockBits(bitmapData3);
								}
								bitmap2.Dispose();
							}
						}
						else
						{
							MessageBox.Show("ç¹å¾å¾å¿é¡»ååå¾åä¸æ ¼å¼åå¤§å°ã");
						}
						bitmap.Dispose();
					}
					catch
					{
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbLowFreq.Items.Add("Source A");
			CmbLowFreq.Items.Add("Source B");
			CmbLowFreq.Items.Add("Average A + B");
			CmbLowFreq.SelectedIndex = 2;
			CmbHighFreq.Items.Add("Abs Max");
			CmbHighFreq.Items.Add("3X3 Abs Max");
			CmbHighFreq.SelectedIndex = 1;
			Level.Minimum = 1m;
			Level.Maximum = IM_GetMaxPyramidLevel(canvas.Image.Width, canvas.Image.Height, 1);
			Level.Value = Level.Maximum;
			if (Text.Equals("BlendImage"))
			{
				base.Height = 175;
			}
			else if (!Text.Equals("NormalizedCrossCorrelation(NCC)"))
			{
				if (Text.Equals("LaplacePyramidFusion"))
				{
					label6.Enabled = false;
					CheckBox chkEdge = ChkEdge;
					CheckBox chkExpose = ChkExpose;
					CheckBox chkLocalContrast = ChkLocalContrast;
					CheckBox chkSailency = ChkSailency;
					bool flag2 = (ChkSaturation.Enabled = false);
					bool flag4 = (chkSailency.Enabled = flag2);
					bool flag6 = (chkLocalContrast.Enabled = flag4);
					bool enabled = (chkExpose.Enabled = flag6);
					chkEdge.Enabled = enabled;
				}
				else if (Text.Equals("LaplacePyramidFusionWithMask"))
				{
					label2.Enabled = false;
					label3.Enabled = false;
					CmbHighFreq.Enabled = false;
					CmbLowFreq.Enabled = false;
				}
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdFeature_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				TxtFeature.Text = openFileDialog.FileName;
				UpdateCanvas();
			}
			openFileDialog.Dispose();
		}

		private void ChkPreview_CheckedChanged_1(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbLowFreq_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbHighFreq_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Level_ValueChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkSailency_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkEdge_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkLocalContrast_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkSaturation_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkExpose_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdMask_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				TxtMask.Text = openFileDialog.FileName;
				UpdateCanvas();
			}
			openFileDialog.Dispose();
		}

		private void btnOk_Click(object sender, EventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmdMask = new System.Windows.Forms.Button();
			this.TxtMask = new System.Windows.Forms.TextBox();
			this.label7 = new System.Windows.Forms.Label();
			this.ChkExpose = new System.Windows.Forms.CheckBox();
			this.ChkSaturation = new System.Windows.Forms.CheckBox();
			this.ChkLocalContrast = new System.Windows.Forms.CheckBox();
			this.ChkEdge = new System.Windows.Forms.CheckBox();
			this.label6 = new System.Windows.Forms.Label();
			this.ChkSailency = new System.Windows.Forms.CheckBox();
			this.label5 = new System.Windows.Forms.Label();
			this.CmbHighFreq = new System.Windows.Forms.ComboBox();
			this.label2 = new System.Windows.Forms.Label();
			this.CmbLowFreq = new System.Windows.Forms.ComboBox();
			this.label1 = new System.Windows.Forms.Label();
			this.Level = new System.Windows.Forms.NumericUpDown();
			this.label4 = new System.Windows.Forms.Label();
			this.CmdFeature = new System.Windows.Forms.Button();
			this.TxtFeature = new System.Windows.Forms.TextBox();
			this.label3 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.Level).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(760, 82);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(82, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(760, 33);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(82, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.btnOk.Click += new System.EventHandler(btnOk_Click);
			this.groupBox.Controls.Add(this.CmdMask);
			this.groupBox.Controls.Add(this.TxtMask);
			this.groupBox.Controls.Add(this.label7);
			this.groupBox.Controls.Add(this.ChkExpose);
			this.groupBox.Controls.Add(this.ChkSaturation);
			this.groupBox.Controls.Add(this.ChkLocalContrast);
			this.groupBox.Controls.Add(this.ChkEdge);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.ChkSailency);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.CmbHighFreq);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.CmbLowFreq);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Controls.Add(this.Level);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.CmdFeature);
			this.groupBox.Controls.Add(this.TxtFeature);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Location = new System.Drawing.Point(14, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(732, 363);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmdMask.Location = new System.Drawing.Point(642, 134);
			this.CmdMask.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmdMask.Name = "CmdMask";
			this.CmdMask.Size = new System.Drawing.Size(82, 40);
			this.CmdMask.TabIndex = 36;
			this.CmdMask.Text = "éæ©";
			this.CmdMask.UseVisualStyleBackColor = true;
			this.CmdMask.Click += new System.EventHandler(CmdMask_Click);
			this.TxtMask.Enabled = false;
			this.TxtMask.Location = new System.Drawing.Point(114, 134);
			this.TxtMask.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.TxtMask.Name = "TxtMask";
			this.TxtMask.ReadOnly = true;
			this.TxtMask.Size = new System.Drawing.Size(520, 28);
			this.TxtMask.TabIndex = 35;
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(8, 138);
			this.label7.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(98, 18);
			this.label7.TabIndex = 34;
			this.label7.Text = "éæ©èçï¼";
			this.ChkExpose.AutoSize = true;
			this.ChkExpose.Location = new System.Drawing.Point(606, 302);
			this.ChkExpose.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkExpose.Name = "ChkExpose";
			this.ChkExpose.Size = new System.Drawing.Size(88, 22);
			this.ChkExpose.TabIndex = 33;
			this.ChkExpose.Text = "æååº¦";
			this.ChkExpose.UseVisualStyleBackColor = true;
			this.ChkExpose.CheckedChanged += new System.EventHandler(ChkExpose_CheckedChanged);
			this.ChkSaturation.AutoSize = true;
			this.ChkSaturation.Location = new System.Drawing.Point(456, 302);
			this.ChkSaturation.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkSaturation.Name = "ChkSaturation";
			this.ChkSaturation.Size = new System.Drawing.Size(88, 22);
			this.ChkSaturation.TabIndex = 32;
			this.ChkSaturation.Text = "é¥±ååº¦";
			this.ChkSaturation.UseVisualStyleBackColor = true;
			this.ChkSaturation.CheckedChanged += new System.EventHandler(ChkSaturation_CheckedChanged);
			this.ChkLocalContrast.AutoSize = true;
			this.ChkLocalContrast.Location = new System.Drawing.Point(302, 302);
			this.ChkLocalContrast.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkLocalContrast.Name = "ChkLocalContrast";
			this.ChkLocalContrast.Size = new System.Drawing.Size(124, 22);
			this.ChkLocalContrast.TabIndex = 31;
			this.ChkLocalContrast.Text = "å±é¨å¯¹æ¯åº¦";
			this.ChkLocalContrast.UseVisualStyleBackColor = true;
			this.ChkLocalContrast.CheckedChanged += new System.EventHandler(ChkLocalContrast_CheckedChanged);
			this.ChkEdge.AutoSize = true;
			this.ChkEdge.Checked = true;
			this.ChkEdge.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkEdge.Location = new System.Drawing.Point(141, 302);
			this.ChkEdge.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkEdge.Name = "ChkEdge";
			this.ChkEdge.Size = new System.Drawing.Size(124, 22);
			this.ChkEdge.TabIndex = 30;
			this.ChkEdge.Text = "è¾¹ç¼åçº¹ç";
			this.ChkEdge.UseVisualStyleBackColor = true;
			this.ChkEdge.CheckedChanged += new System.EventHandler(ChkEdge_CheckedChanged);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(4, 262);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(692, 18);
			this.label6.TabIndex = 29;
			this.label6.Text = "âââââââââââââââââèçç¹å¾âââââââââââââââââ";
			this.ChkSailency.AutoSize = true;
			this.ChkSailency.Location = new System.Drawing.Point(20, 302);
			this.ChkSailency.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkSailency.Name = "ChkSailency";
			this.ChkSailency.Size = new System.Drawing.Size(88, 22);
			this.ChkSailency.TabIndex = 28;
			this.ChkSailency.Text = "æ¾èæ§";
			this.ChkSailency.UseVisualStyleBackColor = true;
			this.ChkSailency.CheckedChanged += new System.EventHandler(ChkSailency_CheckedChanged);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(8, 42);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(188, 18);
			this.label5.TabIndex = 27;
			this.label5.Text = "éæ©å¾åAï¼ å³æ¬å¾ã";
			this.CmbHighFreq.FormattingEnabled = true;
			this.CmbHighFreq.Location = new System.Drawing.Point(543, 208);
			this.CmbHighFreq.Name = "CmbHighFreq";
			this.CmbHighFreq.Size = new System.Drawing.Size(176, 26);
			this.CmbHighFreq.TabIndex = 26;
			this.CmbHighFreq.SelectedIndexChanged += new System.EventHandler(CmbHighFreq_SelectedIndexChanged);
			this.label2.AutoSize = true;
			this.label2.Enabled = false;
			this.label2.Location = new System.Drawing.Point(453, 213);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(98, 18);
			this.label2.TabIndex = 25;
			this.label2.Text = "é«é¢æ··åï¼";
			this.CmbLowFreq.FormattingEnabled = true;
			this.CmbLowFreq.Location = new System.Drawing.Point(286, 207);
			this.CmbLowFreq.Name = "CmbLowFreq";
			this.CmbLowFreq.Size = new System.Drawing.Size(158, 26);
			this.CmbLowFreq.TabIndex = 24;
			this.CmbLowFreq.SelectedIndexChanged += new System.EventHandler(CmbLowFreq_SelectedIndexChanged);
			this.label1.AutoSize = true;
			this.label1.Enabled = false;
			this.label1.Location = new System.Drawing.Point(192, 210);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(98, 18);
			this.label1.TabIndex = 23;
			this.label1.Text = "ä½é¢æ··åï¼";
			this.Level.Location = new System.Drawing.Point(110, 206);
			this.Level.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Level.Maximum = new decimal(new int[4] { 64, 0, 0, 0 });
			this.Level.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.Level.Name = "Level";
			this.Level.Size = new System.Drawing.Size(75, 28);
			this.Level.TabIndex = 21;
			this.Level.Value = new decimal(new int[4] { 32, 0, 0, 0 });
			this.Level.ValueChanged += new System.EventHandler(Level_ValueChanged);
			this.label4.AutoSize = true;
			this.label4.Enabled = false;
			this.label4.Location = new System.Drawing.Point(3, 210);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(98, 18);
			this.label4.TabIndex = 22;
			this.label4.Text = "éå­å¡å±æ°";
			this.CmdFeature.Location = new System.Drawing.Point(642, 82);
			this.CmdFeature.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmdFeature.Name = "CmdFeature";
			this.CmdFeature.Size = new System.Drawing.Size(82, 40);
			this.CmdFeature.TabIndex = 15;
			this.CmdFeature.Text = "éæ©";
			this.CmdFeature.UseVisualStyleBackColor = true;
			this.CmdFeature.Click += new System.EventHandler(CmdFeature_Click);
			this.TxtFeature.Enabled = false;
			this.TxtFeature.Location = new System.Drawing.Point(114, 82);
			this.TxtFeature.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.TxtFeature.Name = "TxtFeature";
			this.TxtFeature.ReadOnly = true;
			this.TxtFeature.Size = new System.Drawing.Size(520, 28);
			this.TxtFeature.TabIndex = 9;
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(8, 87);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(107, 18);
			this.label3.TabIndex = 8;
			this.label3.Text = "éæ©å¾åBï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(770, 152);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 18;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged_1);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(861, 399);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "LaplacePyramidFusionDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "éå­å¡èå";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.Level).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class EdgeCannyDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown LowThresholdUpDown;

		private TrackBar LowThreshold;

		private Label label1;

		private NumericUpDown HighThresholdUpDown;

		private TrackBar HighThreshold;

		private Label label2;

		private CheckBox ChkPreview;

		private ComboBox CmbPreDeal;

		private Label label3;

		private Label label5;

		private ComboBox CmbNonMaximaSupression;

		private ComboBox CmbGradient;

		private Label label4;

		private ComboBox CmbTraceEdge;

		private Label label6;

		private Label label7;

		private ComboBox CmbOutputType;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Canny(byte* Src, byte* Dest, int Width, int Height, int Stride, int LowThreshold, int HighThreshold, bool L2gradient, bool PreciseNonMaximaSuppression, bool StrongEdge8Neighbourhood, int OutputType);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Deriche(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, int LowThreshold, int HighThreshold, bool L2gradient, bool PreciseNonMaximaSuppression, bool StrongEdge8Neighbourhood, int OutputType);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio, float eps);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio, float eps);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe EdgeCannyDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				if (!Busy)
				{
					Busy = true;
					if (Text == "EdgeCanny")
					{
						byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
						if (CmbPreDeal.SelectedIndex == 0)
						{
							CopyMemory(ptr, Clone, canvas.Image.Height * Stride);
						}
						else if (CmbPreDeal.SelectedIndex == 1)
						{
							IM_GaussBlur_SSE(Clone, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 0.5f);
						}
						else if (CmbPreDeal.SelectedIndex == 2)
						{
							IM_GaussBlur_SSE(Clone, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 1f);
						}
						else if (CmbPreDeal.SelectedIndex == 3)
						{
							IM_GaussBlur_SSE(Clone, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 2f);
						}
						else if (CmbPreDeal.SelectedIndex == 4)
						{
							IM_SelfGuidedFilter_SSE(Clone, ptr, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Math.Max(Math.Max(canvas.Image.Width, canvas.Image.Height) / 100, 4), 25, 20f);
						}
						Stopwatch stopwatch = new Stopwatch();
						stopwatch.Start();
						IM_Canny(ptr, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, LowThreshold.Value, HighThreshold.Value, (CmbGradient.SelectedIndex != 0) ? true : false, CmbNonMaximaSupression.SelectedIndex == 0, (CmbTraceEdge.SelectedIndex != 0) ? true : false, CmbOutputType.SelectedIndex);
						stopwatch.Stop();
						float PSNR = 0f;
						float MSE = 0f;
						float Mutual = 0f;
						IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
						IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
						IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
						TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
						Marshal.FreeHGlobal((IntPtr)ptr);
					}
					else if (Text == "EdgeDeriche")
					{
						Stopwatch stopwatch2 = new Stopwatch();
						stopwatch2.Start();
						IM_Edge_Deriche(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Convert.ToSingle(CmbPreDeal.Text), LowThreshold.Value, HighThreshold.Value, (CmbGradient.SelectedIndex != 0) ? true : false, CmbNonMaximaSupression.SelectedIndex == 0, (CmbTraceEdge.SelectedIndex != 0) ? true : false, CmbOutputType.SelectedIndex);
						stopwatch2.Stop();
						float PSNR2 = 0f;
						float MSE2 = 0f;
						float Mutual2 = 0f;
						IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR2);
						IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE2);
						IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual2);
						TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch2.ElapsedMilliseconds + "ms/  PSNR: " + PSNR2 + "/  MSE:" + MSE2 + "/  Mutual:" + Mutual2;
					}
					Busy = false;
				}
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private unsafe void EdgeCannyDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void EdgeCannyDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (Text == "EdgeCanny")
			{
				CmbPreDeal.Items.Add("æ ");
				CmbPreDeal.Items.Add("é«æ¯æ¨¡ç³-åå¾0.5");
				CmbPreDeal.Items.Add("é«æ¯æ¨¡ç³-åå¾1");
				CmbPreDeal.Items.Add("é«æ¯æ¨¡ç³-åå¾2");
				CmbPreDeal.Items.Add("ä¿è¾¹æ»¤æ³¢");
				CmbPreDeal.SelectedIndex = 0;
				CmbGradient.Items.Add("L1Gradient");
				CmbGradient.Items.Add("L2Gradient");
				CmbGradient.SelectedIndex = 1;
				CmbNonMaximaSupression.Items.Add("æå¼ç²¾ç¡®ç");
				CmbNonMaximaSupression.Items.Add("OpenCVç");
				CmbNonMaximaSupression.SelectedIndex = 1;
				CmbTraceEdge.Items.Add("8é¢åå¼ºè¾¹ç¼");
				CmbTraceEdge.Items.Add("å¼ºè¾¹ç¼8é¢å");
				CmbTraceEdge.SelectedIndex = 1;
				CmbOutputType.SelectedIndex = 4;
			}
			else if (Text == "EdgeDeriche")
			{
				label3.Text = "Sigma";
				CmbPreDeal.Items.Add("0.1");
				CmbPreDeal.Items.Add("0.2");
				CmbPreDeal.Items.Add("0.3");
				CmbPreDeal.Items.Add("0.4");
				CmbPreDeal.Items.Add("0.5");
				CmbPreDeal.Items.Add("0.6");
				CmbPreDeal.Items.Add("0.7");
				CmbPreDeal.Items.Add("0.8");
				CmbPreDeal.Items.Add("0.9");
				CmbPreDeal.Items.Add("1.0");
				CmbPreDeal.Items.Add("1.2");
				CmbPreDeal.Items.Add("1.5");
				CmbPreDeal.Items.Add("2.0");
				CmbPreDeal.Items.Add("2.5");
				CmbPreDeal.Items.Add("3.0");
				CmbPreDeal.Items.Add("3.5");
				CmbPreDeal.Items.Add("4.0");
				CmbPreDeal.Items.Add("5.0");
				CmbPreDeal.Items.Add("10.0");
				CmbPreDeal.SelectedIndex = 9;
				CmbGradient.Items.Add("L1Gradient");
				CmbGradient.Items.Add("L2Gradient");
				CmbGradient.SelectedIndex = 1;
				CmbNonMaximaSupression.Items.Add("æå¼ç²¾ç¡®ç");
				CmbNonMaximaSupression.Items.Add("OpenCVç");
				CmbNonMaximaSupression.SelectedIndex = 1;
				CmbTraceEdge.Items.Add("8é¢åå¼ºè¾¹ç¼");
				CmbTraceEdge.Items.Add("å¼ºè¾¹ç¼8é¢å");
				CmbTraceEdge.SelectedIndex = 1;
				CmbOutputType.SelectedIndex = 4;
			}
			Busy = false;
			UpdateCanvas();
		}

		private void HighThreshold_Scroll(object sender, EventArgs e)
		{
			HighThresholdUpDown.Value = HighThreshold.Value;
		}

		private void HighThresholdUpDown_ValueChanged(object sender, EventArgs e)
		{
			HighThreshold.Value = (int)HighThresholdUpDown.Value;
			UpdateCanvas();
		}

		private void LowThreshold_Scroll(object sender, EventArgs e)
		{
			LowThresholdUpDown.Value = LowThreshold.Value;
		}

		private void LowThresholdUpDown_ValueChanged(object sender, EventArgs e)
		{
			LowThreshold.Value = (int)LowThresholdUpDown.Value;
			UpdateCanvas();
		}

		private void CmbPreDeal_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbGradient_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbNonMaximaSupression_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbTraceEdge_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbOutputType_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (CmbOutputType.SelectedIndex != 4)
			{
				CmbTraceEdge.Enabled = false;
				CmbNonMaximaSupression.Enabled = false;
				LowThreshold.Enabled = false;
				HighThreshold.Enabled = false;
				LowThresholdUpDown.Enabled = false;
				HighThreshold.Enabled = false;
				HighThresholdUpDown.Enabled = false;
			}
			else
			{
				CmbTraceEdge.Enabled = true;
				CmbNonMaximaSupression.Enabled = true;
				LowThreshold.Enabled = true;
				HighThreshold.Enabled = true;
				LowThresholdUpDown.Enabled = true;
				HighThreshold.Enabled = true;
				HighThresholdUpDown.Enabled = true;
			}
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbTraceEdge = new System.Windows.Forms.ComboBox();
			this.label6 = new System.Windows.Forms.Label();
			this.label5 = new System.Windows.Forms.Label();
			this.CmbNonMaximaSupression = new System.Windows.Forms.ComboBox();
			this.CmbGradient = new System.Windows.Forms.ComboBox();
			this.label4 = new System.Windows.Forms.Label();
			this.CmbPreDeal = new System.Windows.Forms.ComboBox();
			this.label3 = new System.Windows.Forms.Label();
			this.HighThresholdUpDown = new System.Windows.Forms.NumericUpDown();
			this.HighThreshold = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.LowThresholdUpDown = new System.Windows.Forms.NumericUpDown();
			this.LowThreshold = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.CmbOutputType = new System.Windows.Forms.ComboBox();
			this.label7 = new System.Windows.Forms.Label();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.HighThresholdUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.HighThreshold).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.LowThresholdUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.LowThreshold).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(459, 100);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(82, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(459, 34);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(82, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.label7);
			this.groupBox.Controls.Add(this.CmbOutputType);
			this.groupBox.Controls.Add(this.CmbTraceEdge);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.CmbNonMaximaSupression);
			this.groupBox.Controls.Add(this.CmbGradient);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.CmbPreDeal);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.HighThresholdUpDown);
			this.groupBox.Controls.Add(this.HighThreshold);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.LowThresholdUpDown);
			this.groupBox.Controls.Add(this.LowThreshold);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(18, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(412, 427);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbTraceEdge.FormattingEnabled = true;
			this.CmbTraceEdge.Location = new System.Drawing.Point(146, 223);
			this.CmbTraceEdge.Name = "CmbTraceEdge";
			this.CmbTraceEdge.Size = new System.Drawing.Size(217, 26);
			this.CmbTraceEdge.TabIndex = 16;
			this.CmbTraceEdge.SelectedIndexChanged += new System.EventHandler(CmbTraceEdge_SelectedIndexChanged);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(7, 223);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(134, 18);
			this.label6.TabIndex = 15;
			this.label6.Text = "æ»åè¾¹çè·è¸ªï¼";
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(6, 177);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(134, 18);
			this.label5.TabIndex = 14;
			this.label5.Text = "éæå¤§å¼æå¶ï¼";
			this.CmbNonMaximaSupression.FormattingEnabled = true;
			this.CmbNonMaximaSupression.Location = new System.Drawing.Point(146, 173);
			this.CmbNonMaximaSupression.Name = "CmbNonMaximaSupression";
			this.CmbNonMaximaSupression.Size = new System.Drawing.Size(217, 26);
			this.CmbNonMaximaSupression.TabIndex = 13;
			this.CmbNonMaximaSupression.SelectedIndexChanged += new System.EventHandler(CmbNonMaximaSupression_SelectedIndexChanged);
			this.CmbGradient.FormattingEnabled = true;
			this.CmbGradient.Location = new System.Drawing.Point(148, 82);
			this.CmbGradient.Name = "CmbGradient";
			this.CmbGradient.Size = new System.Drawing.Size(217, 26);
			this.CmbGradient.TabIndex = 12;
			this.CmbGradient.SelectedIndexChanged += new System.EventHandler(CmbGradient_SelectedIndexChanged);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(8, 86);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(98, 18);
			this.label4.TabIndex = 11;
			this.label4.Text = "æ¢¯åº¦å¼ºåº¦ï¼";
			this.CmbPreDeal.FormattingEnabled = true;
			this.CmbPreDeal.Location = new System.Drawing.Point(148, 34);
			this.CmbPreDeal.Name = "CmbPreDeal";
			this.CmbPreDeal.Size = new System.Drawing.Size(217, 26);
			this.CmbPreDeal.TabIndex = 10;
			this.CmbPreDeal.SelectedIndexChanged += new System.EventHandler(CmbPreDeal_SelectedIndexChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(8, 38);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(80, 18);
			this.label3.TabIndex = 9;
			this.label3.Text = "åå¤çï¼";
			this.HighThresholdUpDown.Location = new System.Drawing.Point(290, 346);
			this.HighThresholdUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.HighThresholdUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.HighThresholdUpDown.Name = "HighThresholdUpDown";
			this.HighThresholdUpDown.Size = new System.Drawing.Size(75, 28);
			this.HighThresholdUpDown.TabIndex = 8;
			this.HighThresholdUpDown.Value = new decimal(new int[4] { 150, 0, 0, 0 });
			this.HighThresholdUpDown.ValueChanged += new System.EventHandler(HighThresholdUpDown_ValueChanged);
			this.HighThreshold.AutoSize = false;
			this.HighThreshold.LargeChange = 2;
			this.HighThreshold.Location = new System.Drawing.Point(10, 377);
			this.HighThreshold.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.HighThreshold.Maximum = 255;
			this.HighThreshold.Name = "HighThreshold";
			this.HighThreshold.Size = new System.Drawing.Size(375, 39);
			this.HighThreshold.TabIndex = 7;
			this.HighThreshold.TickFrequency = 0;
			this.HighThreshold.Value = 150;
			this.HighThreshold.Scroll += new System.EventHandler(HighThreshold_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(10, 349);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(80, 18);
			this.label2.TabIndex = 6;
			this.label2.Text = "é«éå¼ï¼";
			this.LowThresholdUpDown.Location = new System.Drawing.Point(290, 273);
			this.LowThresholdUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.LowThresholdUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.LowThresholdUpDown.Name = "LowThresholdUpDown";
			this.LowThresholdUpDown.Size = new System.Drawing.Size(75, 28);
			this.LowThresholdUpDown.TabIndex = 4;
			this.LowThresholdUpDown.Value = new decimal(new int[4] { 50, 0, 0, 0 });
			this.LowThresholdUpDown.ValueChanged += new System.EventHandler(LowThresholdUpDown_ValueChanged);
			this.LowThreshold.AutoSize = false;
			this.LowThreshold.LargeChange = 2;
			this.LowThreshold.Location = new System.Drawing.Point(10, 304);
			this.LowThreshold.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.LowThreshold.Maximum = 255;
			this.LowThreshold.Name = "LowThreshold";
			this.LowThreshold.Size = new System.Drawing.Size(375, 39);
			this.LowThreshold.TabIndex = 3;
			this.LowThreshold.TickFrequency = 0;
			this.LowThreshold.Value = 50;
			this.LowThreshold.Scroll += new System.EventHandler(LowThreshold_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(10, 277);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(80, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "ä½éå¼ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(459, 192);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.CmbOutputType.FormattingEnabled = true;
			this.CmbOutputType.Items.AddRange(new object[5] { "Xæ¹åæ¢¯åº¦", "Yæ¹åæ¢¯åº¦", "L1æ¢¯åº¦", "L2æ¢¯åº¦", "æå¶+è·è¸ª" });
			this.CmbOutputType.Location = new System.Drawing.Point(148, 130);
			this.CmbOutputType.Name = "CmbOutputType";
			this.CmbOutputType.Size = new System.Drawing.Size(217, 26);
			this.CmbOutputType.TabIndex = 17;
			this.CmbOutputType.SelectedIndexChanged += new System.EventHandler(CmbOutputType_SelectedIndexChanged);
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(10, 132);
			this.label7.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(98, 18);
			this.label7.TabIndex = 18;
			this.label7.Text = "è¾åºç±»åï¼";
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(556, 458);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "EdgeCannyDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "EdgeCanny";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(EdgeCannyDialog_FormClosing);
			base.Load += new System.EventHandler(EdgeCannyDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.HighThresholdUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.HighThreshold).EndInit();
			((System.ComponentModel.ISupportInitialize)this.LowThresholdUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.LowThreshold).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class ImageReconstructionDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Button CmdMarker;

		private TextBox TxtMarkder;

		private Label LblM;

		private NumericUpDown HUpDown;

		public TrackBar H;

		private Label labelH;

		private CheckBox ChkPreview;

		private RadioButton Rad8;

		private RadioButton Rad4;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ClearBorder(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HMax(byte* Src, byte* Dest, int Width, int Height, int Stride, int H, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HMin(byte* Src, byte* Dest, int Width, int Height, int Stride, int H, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExtendedMax(byte* Src, byte* Dest, int Width, int Height, int Stride, int H, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExtendedMin(byte* Src, byte* Dest, int Width, int Height, int Stride, int H, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ReConstruct(byte* Src, byte* Markder, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImposeMin(byte* Src, byte* Markder, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe ImageReconstructionDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				Busy = true;
				Stopwatch stopwatch = new Stopwatch();
				if (Text.Equals("å¾åéæ") || Text.Equals("å¼ºå¶æå°"))
				{
					try
					{
						Bitmap bitmap = (Bitmap)Image.FromFile(TxtMarkder.Text);
						if (bitmap.PixelFormat == canvas.Image.PixelFormat && bitmap.Width == canvas.Image.Width && bitmap.Height == canvas.Image.Height)
						{
							BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
							stopwatch.Start();
							if (Text.Equals("å¾åéæ"))
							{
								for (int i = 0; i < 100; i++)
								{
									IM_ReConstruct(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Rad4.Checked ? 4 : 8);
								}
							}
							else
							{
								IM_ImposeMin(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Rad4.Checked ? 4 : 8);
							}
							stopwatch.Stop();
							bitmap.UnlockBits(bitmapData);
						}
						else
						{
							MessageBox.Show("ç¹å¾å¾å¿é¡»ååå¾åä¸æ ¼å¼åå¤§å°ã");
						}
						bitmap.Dispose();
					}
					catch
					{
					}
				}
				else
				{
					stopwatch.Start();
					if (Text.Equals("HMaxéæ"))
					{
						IM_HMax(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, H.Value, Rad4.Checked ? 4 : 8);
					}
					else if (Text.Equals("HMinéæ"))
					{
						IM_HMin(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, H.Value, Rad4.Checked ? 4 : 8);
					}
					else if (Text.Equals("æ©å±çMaxéæ"))
					{
						IM_ExtendedMax(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, H.Value, Rad4.Checked ? 4 : 8);
					}
					else if (Text.Equals("æ©å±çMinéæ"))
					{
						IM_ExtendedMin(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, H.Value, Rad4.Checked ? 4 : 8);
					}
					stopwatch.Stop();
				}
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (Text.Equals("å¾åéæ") || Text.Equals("å¼ºå¶æå°"))
			{
				Label label = labelH;
				TrackBar h = H;
				bool flag2 = (HUpDown.Enabled = false);
				bool enabled = (h.Enabled = flag2);
				label.Enabled = enabled;
			}
			else
			{
				CmdMarker.Enabled = false;
				LblM.Enabled = false;
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdFeature_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				TxtMarkder.Text = openFileDialog.FileName;
			}
			openFileDialog.Dispose();
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged_1(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void H_Scroll(object sender, EventArgs e)
		{
			HUpDown.Value = H.Value;
		}

		private void HUpDown_ValueChanged(object sender, EventArgs e)
		{
			H.Value = (int)HUpDown.Value;
			UpdateCanvas();
		}

		private void Rad8_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Rad4_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.Rad8 = new System.Windows.Forms.RadioButton();
			this.Rad4 = new System.Windows.Forms.RadioButton();
			this.HUpDown = new System.Windows.Forms.NumericUpDown();
			this.H = new System.Windows.Forms.TrackBar();
			this.labelH = new System.Windows.Forms.Label();
			this.CmdMarker = new System.Windows.Forms.Button();
			this.TxtMarkder = new System.Windows.Forms.TextBox();
			this.LblM = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.HUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.H).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(389, 59);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(390, 26);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.Rad8);
			this.groupBox.Controls.Add(this.Rad4);
			this.groupBox.Controls.Add(this.HUpDown);
			this.groupBox.Controls.Add(this.H);
			this.groupBox.Controls.Add(this.labelH);
			this.groupBox.Controls.Add(this.CmdMarker);
			this.groupBox.Controls.Add(this.TxtMarkder);
			this.groupBox.Controls.Add(this.LblM);
			this.groupBox.Location = new System.Drawing.Point(9, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(372, 167);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.Rad8.AutoSize = true;
			this.Rad8.Checked = true;
			this.Rad8.Location = new System.Drawing.Point(142, 62);
			this.Rad8.Name = "Rad8";
			this.Rad8.Size = new System.Drawing.Size(65, 16);
			this.Rad8.TabIndex = 24;
			this.Rad8.TabStop = true;
			this.Rad8.Text = "8èéå";
			this.Rad8.UseVisualStyleBackColor = true;
			this.Rad8.CheckedChanged += new System.EventHandler(Rad8_CheckedChanged);
			this.Rad4.AutoSize = true;
			this.Rad4.Location = new System.Drawing.Point(15, 62);
			this.Rad4.Name = "Rad4";
			this.Rad4.Size = new System.Drawing.Size(65, 16);
			this.Rad4.TabIndex = 23;
			this.Rad4.Text = "4èéå";
			this.Rad4.UseVisualStyleBackColor = true;
			this.Rad4.CheckedChanged += new System.EventHandler(Rad4_CheckedChanged);
			this.HUpDown.Location = new System.Drawing.Point(306, 90);
			this.HUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.HUpDown.Name = "HUpDown";
			this.HUpDown.Size = new System.Drawing.Size(50, 21);
			this.HUpDown.TabIndex = 21;
			this.HUpDown.Value = new decimal(new int[4] { 32, 0, 0, 0 });
			this.HUpDown.ValueChanged += new System.EventHandler(HUpDown_ValueChanged);
			this.H.AutoSize = false;
			this.H.LargeChange = 2;
			this.H.Location = new System.Drawing.Point(15, 118);
			this.H.Maximum = 255;
			this.H.Name = "H";
			this.H.Size = new System.Drawing.Size(341, 26);
			this.H.TabIndex = 20;
			this.H.TickFrequency = 0;
			this.H.Value = 32;
			this.H.Scroll += new System.EventHandler(H_Scroll);
			this.labelH.AutoSize = true;
			this.labelH.Location = new System.Drawing.Point(4, 88);
			this.labelH.Name = "labelH";
			this.labelH.Size = new System.Drawing.Size(65, 12);
			this.labelH.TabIndex = 22;
			this.labelH.Text = "Altitude H";
			this.CmdMarker.Location = new System.Drawing.Point(303, 20);
			this.CmdMarker.Name = "CmdMarker";
			this.CmdMarker.Size = new System.Drawing.Size(55, 27);
			this.CmdMarker.TabIndex = 15;
			this.CmdMarker.Text = "éæ©";
			this.CmdMarker.UseVisualStyleBackColor = true;
			this.CmdMarker.Click += new System.EventHandler(CmdFeature_Click);
			this.TxtMarkder.Enabled = false;
			this.TxtMarkder.Location = new System.Drawing.Point(77, 24);
			this.TxtMarkder.Name = "TxtMarkder";
			this.TxtMarkder.ReadOnly = true;
			this.TxtMarkder.Size = new System.Drawing.Size(220, 21);
			this.TxtMarkder.TabIndex = 9;
			this.LblM.AutoSize = true;
			this.LblM.Location = new System.Drawing.Point(6, 29);
			this.LblM.Name = "LblM";
			this.LblM.Size = new System.Drawing.Size(77, 12);
			this.LblM.TabIndex = 8;
			this.LblM.Text = "Markerå¾åï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(396, 105);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 18;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged_1);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(456, 190);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ImageReconstructionDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "æ»¤æ³¢å¨";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.HUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.H).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class WeightedMedianBlurDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private Label label1;

		private CheckBox ChkFeature;

		private Button CmdFeature;

		private TextBox TxtFeature;

		private Label label3;

		private ComboBox CmbWeight;

		private Label label2;

		public TrackBar Radius;

		private NumericUpDown SigmaUpDown;

		public TrackBar Sigma;

		private Label label4;

		private CheckBox ChkPreview;

		private NumericUpDown EpsUpDown;

		public TrackBar Eps;

		private Label label5;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkSpeed;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GuidedFilter_PureC(byte* Src, byte* Guide, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GuidedFilter_SSE(byte* Src, byte* Guide, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GuidedFilter_AVX(byte* Src, byte* Guide, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SeparableBilateralFilter(byte* Src, byte* Joint, byte* Dest, int Width, int Height, int Stride, float SigmaS, float SigmaR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BilateralFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float SigmaSpace, float SigmaColor, int BorderType);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DomainTransformFilter(byte* Src, byte* Joint, byte* Dest, int Width, int Height, int Stride, float SigmaS, float SigmaR, int Iteration = 3);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WeightedMedianBlur(byte* Input, byte* FeatureMap, float* Weight, byte* Output, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe WeightedMedianBlurDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void GetGaussKernel(float* Kernel, int Radius)
		{
			float num = (float)Radius / 3f;
			float num2 = 2f * num * num;
			float num3 = num2 * 3.1415925f;
			double num4 = 0.0;
			int num5 = 0;
			for (int i = -Radius; i <= Radius; i++)
			{
				int num6 = i * i;
				int num7 = -Radius;
				while (num7 <= Radius)
				{
					Kernel[num5] = (float)(Math.Exp((0.0 - (double)(num6 + num7 * num7)) / (double)num2) / (double)num3);
					num4 += (double)Kernel[num5];
					num7++;
					num5++;
				}
			}
			int num8 = 0;
			for (int j = -Radius; j <= Radius; j++)
			{
				int num9 = -Radius;
				while (num9 <= Radius)
				{
					Kernel[num8] = (float)((double)Kernel[num8] / num4);
					num9++;
					num8++;
				}
			}
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				Busy = true;
				float* ptr = (float*)(void*)Marshal.AllocHGlobal(262144);
				float num = Sigma.Value;
				float num2 = 1f / (2f * num * num);
				if (CmbWeight.SelectedIndex == 0)
				{
					for (int i = 0; i < 256; i++)
					{
						int num3 = i * 256;
						for (int j = 0; j < 256; j++)
						{
							ptr[num3 + j] = (float)Math.Exp((float)(-(i - j) * (i - j)) * num2);
						}
					}
				}
				else if (CmbWeight.SelectedIndex == 1)
				{
					for (int k = 0; k < 256; k++)
					{
						int num4 = k * 256;
						for (int l = 0; l < 256; l++)
						{
							ptr[num4 + l] = 1f / ((float)((k - l) * (k - l)) + num * num);
						}
					}
				}
				else if (CmbWeight.SelectedIndex == 2)
				{
					for (int m = 0; m < 256; m++)
					{
						int num5 = m * 256;
						for (int n = 0; n < 256; n++)
						{
							ptr[num5 + n] = 1f / ((float)Math.Abs(m - n) + num);
						}
					}
				}
				else if (CmbWeight.SelectedIndex == 3)
				{
					for (int num6 = 0; num6 < 256; num6++)
					{
						int num7 = num6 * 256;
						for (int num8 = 0; num8 < 256; num8++)
						{
							if (Math.Max(num8, num6) == 0)
							{
								ptr[num7 + num8] = 1f;
							}
							else
							{
								ptr[num7 + num8] = (float)Math.Min(num8, num6) * 1f / (float)Math.Max(num8, num6);
							}
						}
					}
				}
				else
				{
					for (int num9 = 0; num9 < 256; num9++)
					{
						int num10 = num9 * 256;
						for (int num11 = 0; num11 < 256; num11++)
						{
							ptr[num10 + num11] = 0.5f;
						}
					}
				}
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				int num12 = 1;
				if (ChkSpeed.Checked)
				{
					num12 = 100;
				}
				if (Text.Equals("å æä¸­å¼æ¨¡ç³") || Text.Equals("åç¦»çåè¾¹æ»¤æ³¢") || Text.Equals("Domain Transform Filter") || Text.Equals("å¯¼åæ»¤æ³¢"))
				{
					if (ChkFeature.Checked)
					{
						TimeUse.Text = "æ­£å¨è¿è¡" + num12 + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
						TimeUse.GetCurrentParent().Refresh();
						for (int num13 = 0; num13 < num12; num13++)
						{
							if (OptPureC.Checked)
							{
								if (Text.Equals("å¯¼åæ»¤æ³¢"))
								{
									IM_SelfGuidedFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
								}
							}
							else if (OptAvx.Checked)
							{
								if (Text.Equals("å¯¼åæ»¤æ³¢"))
								{
									IM_SelfGuidedFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
								}
							}
							else if (OptSSE.Checked)
							{
								if (Text.Equals("å æä¸­å¼æ¨¡ç³"))
								{
									IM_WeightedMedianBlur(Clone, Clone, ptr, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (Text.Equals("åç¦»çåè¾¹æ»¤æ³¢"))
								{
									IM_SeparableBilateralFilter(Clone, Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value);
								}
								else if (Text.Equals("Domain Transform Filter"))
								{
									IM_DomainTransformFilter(Clone, Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, 2);
								}
								else if (Text.Equals("å¯¼åæ»¤æ³¢"))
								{
									IM_SelfGuidedFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
								}
							}
						}
					}
					else
					{
						try
						{
							Bitmap bitmap = (Bitmap)Image.FromFile(TxtFeature.Text);
							if (bitmap.PixelFormat == canvas.Image.PixelFormat && bitmap.Width == canvas.Image.Width && bitmap.Height == canvas.Image.Height)
							{
								BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
								TimeUse.Text = "æ­£å¨è¿è¡" + num12 + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
								TimeUse.GetCurrentParent().Refresh();
								for (int num14 = 0; num14 < num12; num14++)
								{
									if (OptPureC.Checked)
									{
										if (Text.Equals("å¯¼åæ»¤æ³¢"))
										{
											IM_GuidedFilter_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
										}
									}
									else if (OptAvx.Checked)
									{
										if (Text.Equals("å¯¼åæ»¤æ³¢"))
										{
											IM_GuidedFilter_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
										}
									}
									else if (OptSSE.Checked)
									{
										if (Text.Equals("å æä¸­å¼æ¨¡ç³"))
										{
											IM_WeightedMedianBlur(Clone, (byte*)(void*)bitmapData.Scan0, ptr, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
										}
										else if (Text.Equals("åç¦»çåè¾¹æ»¤æ³¢"))
										{
											IM_SeparableBilateralFilter(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value);
										}
										else if (Text.Equals("Domain Transform Filter"))
										{
											IM_DomainTransformFilter(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, 2);
										}
										else if (Text.Equals("å¯¼åæ»¤æ³¢"))
										{
											IM_GuidedFilter_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, Radius.Value, Eps.Value * Eps.Value);
										}
									}
								}
								bitmap.UnlockBits(bitmapData);
							}
							else
							{
								MessageBox.Show("ç¹å¾å¾å¿é¡»ååå¾åä¸æ ¼å¼åå¤§å°ã");
							}
							bitmap.Dispose();
						}
						catch
						{
						}
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num12, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
				Marshal.FreeHGlobal((IntPtr)ptr);
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbWeight.Items.Add("EXP");
			CmbWeight.Items.Add("IV2");
			CmbWeight.Items.Add("IV1");
			CmbWeight.Items.Add("Jacard");
			CmbWeight.Items.Add("Unweighted");
			CmbWeight.SelectedIndex = 0;
			if (Text.Equals("å æä¸­å¼æ¨¡ç³"))
			{
				Radius.Maximum = 64;
				RadiusUpDown.Maximum = 64m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
			}
			else if (Text.Equals("åç¦»çåè¾¹æ»¤æ³¢"))
			{
				label4.Text = "SigmaS";
				label1.Text = "SigmaR";
				Radius.Maximum = 255;
				RadiusUpDown.Maximum = 255m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				Sigma.Maximum = 255;
				SigmaUpDown.Maximum = 255m;
				Sigma.Minimum = 1;
				SigmaUpDown.Minimum = 1m;
				Sigma.Value = 50;
				SigmaUpDown.Value = 50m;
				CmbWeight.Enabled = false;
			}
			else if (Text.Equals("å¯¼åæ»¤æ³¢"))
			{
				label3.Text = "å¯¼åå¾";
				label4.Text = "åå¾";
				label1.Text = "ä¸åæ ·ç";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 10;
				RadiusUpDown.Minimum = 10m;
				Radius.Value = 25;
				RadiusUpDown.Value = 25m;
				Sigma.Maximum = 256;
				SigmaUpDown.Maximum = 256m;
				Sigma.Minimum = 1;
				SigmaUpDown.Minimum = 1m;
				Sigma.Value = 12;
				SigmaUpDown.Value = 12m;
				label5.Enabled = true;
				Eps.Enabled = true;
				EpsUpDown.Enabled = true;
				CmbWeight.Enabled = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("Domain Transform Filter"))
			{
				label4.Text = "SigmaS";
				label1.Text = "SigmaR";
				Radius.Maximum = 255;
				RadiusUpDown.Maximum = 255m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 50;
				RadiusUpDown.Value = 50m;
				Sigma.Maximum = 255;
				SigmaUpDown.Maximum = 255m;
				Sigma.Minimum = 1;
				SigmaUpDown.Minimum = 1m;
				Sigma.Value = 50;
				SigmaUpDown.Value = 50m;
				CmbWeight.Enabled = false;
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdFeature_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				TxtFeature.Text = openFileDialog.FileName;
			}
			openFileDialog.Dispose();
		}

		private void ChkFeature_CheckedChanged(object sender, EventArgs e)
		{
			CmdFeature.Enabled = !ChkFeature.Checked;
			TxtFeature.Enabled = !ChkFeature.Checked;
		}

		private void SigmaUpDown_ValueChanged(object sender, EventArgs e)
		{
			Sigma.Value = (int)SigmaUpDown.Value;
			UpdateCanvas();
		}

		private void Sigma_Scroll(object sender, EventArgs e)
		{
			SigmaUpDown.Value = Sigma.Value;
		}

		private void ChkPreview_CheckedChanged_1(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbWeight_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Eps_Scroll(object sender, EventArgs e)
		{
			EpsUpDown.Value = Eps.Value;
		}

		private void EpsUpDown_ValueChanged(object sender, EventArgs e)
		{
			Eps.Value = (int)EpsUpDown.Value;
			UpdateCanvas();
		}

		private void label5_Click(object sender, EventArgs e)
		{
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.EpsUpDown = new System.Windows.Forms.NumericUpDown();
			this.Eps = new System.Windows.Forms.TrackBar();
			this.label5 = new System.Windows.Forms.Label();
			this.SigmaUpDown = new System.Windows.Forms.NumericUpDown();
			this.Sigma = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.ChkFeature = new System.Windows.Forms.CheckBox();
			this.CmdFeature = new System.Windows.Forms.Button();
			this.TxtFeature = new System.Windows.Forms.TextBox();
			this.label3 = new System.Windows.Forms.Label();
			this.CmbWeight = new System.Windows.Forms.ComboBox();
			this.label2 = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.EpsUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Eps).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.SigmaUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(670, 77);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(120, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(671, 28);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(119, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.EpsUpDown);
			this.groupBox.Controls.Add(this.Eps);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.SigmaUpDown);
			this.groupBox.Controls.Add(this.Sigma);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.ChkFeature);
			this.groupBox.Controls.Add(this.CmdFeature);
			this.groupBox.Controls.Add(this.TxtFeature);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.CmbWeight);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(14, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(638, 394);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.EpsUpDown.Enabled = false;
			this.EpsUpDown.Location = new System.Drawing.Point(541, 303);
			this.EpsUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.EpsUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.EpsUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.EpsUpDown.Name = "EpsUpDown";
			this.EpsUpDown.Size = new System.Drawing.Size(75, 28);
			this.EpsUpDown.TabIndex = 24;
			this.EpsUpDown.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.EpsUpDown.ValueChanged += new System.EventHandler(EpsUpDown_ValueChanged);
			this.Eps.AutoSize = false;
			this.Eps.Enabled = false;
			this.Eps.LargeChange = 2;
			this.Eps.Location = new System.Drawing.Point(26, 341);
			this.Eps.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Eps.Maximum = 255;
			this.Eps.Minimum = 1;
			this.Eps.Name = "Eps";
			this.Eps.Size = new System.Drawing.Size(589, 39);
			this.Eps.TabIndex = 23;
			this.Eps.TickFrequency = 0;
			this.Eps.Value = 5;
			this.Eps.Scroll += new System.EventHandler(Eps_Scroll);
			this.label5.AutoSize = true;
			this.label5.Enabled = false;
			this.label5.Location = new System.Drawing.Point(9, 311);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(53, 18);
			this.label5.TabIndex = 25;
			this.label5.Text = "Epsï¼";
			this.label5.Click += new System.EventHandler(label5_Click);
			this.SigmaUpDown.Location = new System.Drawing.Point(538, 134);
			this.SigmaUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.SigmaUpDown.Maximum = new decimal(new int[4] { 64, 0, 0, 0 });
			this.SigmaUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.SigmaUpDown.Name = "SigmaUpDown";
			this.SigmaUpDown.Size = new System.Drawing.Size(75, 28);
			this.SigmaUpDown.TabIndex = 21;
			this.SigmaUpDown.Value = new decimal(new int[4] { 32, 0, 0, 0 });
			this.SigmaUpDown.ValueChanged += new System.EventHandler(SigmaUpDown_ValueChanged);
			this.Sigma.AutoSize = false;
			this.Sigma.LargeChange = 2;
			this.Sigma.Location = new System.Drawing.Point(22, 171);
			this.Sigma.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Sigma.Maximum = 64;
			this.Sigma.Minimum = 1;
			this.Sigma.Name = "Sigma";
			this.Sigma.Size = new System.Drawing.Size(591, 39);
			this.Sigma.TabIndex = 20;
			this.Sigma.TickFrequency = 0;
			this.Sigma.Value = 32;
			this.Sigma.Scroll += new System.EventHandler(Sigma_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 132);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(53, 18);
			this.label4.TabIndex = 22;
			this.label4.Text = "Sigma";
			this.ChkFeature.AutoSize = true;
			this.ChkFeature.Checked = true;
			this.ChkFeature.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkFeature.Location = new System.Drawing.Point(541, 86);
			this.ChkFeature.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkFeature.Name = "ChkFeature";
			this.ChkFeature.Size = new System.Drawing.Size(70, 22);
			this.ChkFeature.TabIndex = 19;
			this.ChkFeature.Text = "åå¾";
			this.ChkFeature.UseVisualStyleBackColor = true;
			this.ChkFeature.CheckedChanged += new System.EventHandler(ChkFeature_CheckedChanged);
			this.CmdFeature.Enabled = false;
			this.CmdFeature.Location = new System.Drawing.Point(533, 29);
			this.CmdFeature.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmdFeature.Name = "CmdFeature";
			this.CmdFeature.Size = new System.Drawing.Size(82, 40);
			this.CmdFeature.TabIndex = 15;
			this.CmdFeature.Text = "éæ©";
			this.CmdFeature.UseVisualStyleBackColor = true;
			this.CmdFeature.Click += new System.EventHandler(CmdFeature_Click);
			this.TxtFeature.Enabled = false;
			this.TxtFeature.Location = new System.Drawing.Point(116, 36);
			this.TxtFeature.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.TxtFeature.Name = "TxtFeature";
			this.TxtFeature.ReadOnly = true;
			this.TxtFeature.Size = new System.Drawing.Size(402, 28);
			this.TxtFeature.TabIndex = 9;
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(9, 44);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(80, 18);
			this.label3.TabIndex = 8;
			this.label3.Text = "ç¹å¾å¾ï¼";
			this.CmbWeight.FormattingEnabled = true;
			this.CmbWeight.Location = new System.Drawing.Point(116, 84);
			this.CmbWeight.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmbWeight.Name = "CmbWeight";
			this.CmbWeight.Size = new System.Drawing.Size(402, 26);
			this.CmbWeight.TabIndex = 7;
			this.CmbWeight.SelectedIndexChanged += new System.EventHandler(CmbWeight_SelectedIndexChanged);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(9, 88);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(98, 18);
			this.label2.TabIndex = 6;
			this.label2.Text = "æéå½æ°ï¼";
			this.RadiusUpDown.Location = new System.Drawing.Point(541, 217);
			this.RadiusUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 64, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(75, 28);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(26, 253);
			this.Radius.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Radius.Maximum = 64;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(587, 39);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 10;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(9, 221);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(62, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(680, 147);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 18;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged_1);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(14, 426);
			this.Optimization.Margin = new System.Windows.Forms.Padding(4);
			this.Optimization.Name = "Optimization";
			this.Optimization.Padding = new System.Windows.Forms.Padding(4);
			this.Optimization.Size = new System.Drawing.Size(638, 111);
			this.Optimization.TabIndex = 22;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(483, 51);
			this.OptAvx.Margin = new System.Windows.Forms.Padding(4);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(132, 22);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(308, 51);
			this.OptSSE.Margin = new System.Windows.Forms.Padding(4);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(132, 22);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(33, 51);
			this.OptPureC.Margin = new System.Windows.Forms.Padding(4);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(240, 22);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(680, 189);
			this.ChkSpeed.Margin = new System.Windows.Forms.Padding(4);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(106, 22);
			this.ChkSpeed.TabIndex = 23;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(803, 550);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "WeightedMedianBlurDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "æ»¤æ³¢å¨";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.EpsUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Eps).EndInit();
			((System.ComponentModel.ISupportInitialize)this.SigmaUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class MultImageDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Button CmdFeature;

		private TextBox TxtFeature;

		private Label label3;

		private NumericUpDown RadiusUpDown;

		public TrackBar Radius;

		private Label LblS;

		private CheckBox ChkPreview;

		private ComboBox CmbMode;

		private Label LblInfo;

		private NumericUpDown AddUpDown;

		public TrackBar Add;

		private Label LblA;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkSpeed;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BlendTwoImage_LinearLight(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Normalize_CrossCorrelation(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SubtractImage(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AddImage(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AbsDiffImage(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Mult_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Mult_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Mult_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Add_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Add_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Add_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Sub_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Sub_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Sub_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Div_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Div_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Div_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Scale_Image_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Scale_Image_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Scale_Image_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Mult, int Add);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Max_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Max_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Max_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Min_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Min_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Min_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_AbsDiff_Image_PureC(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_AbsDiff_Image_SSE(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_AbsDiff_Image_AVX(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe MultImageDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				if (Text.Equals("BlendImage") || Text.Equals("NormalizedCrossCorrelation(NCC)") || Text.Equals("å¾åç¸ä¹") || Text.Equals("å¾ååå¤§") || Text.Equals("å¾ååå°") || Text.Equals("å¾åç¸å ") || Text.Equals("å¾åç¸å") || Text.Equals("å¾åç¸é¤") || Text.Equals("å¾åç»å¯¹å¼å·®") || Text.Equals("å¾åç¸å") || Text.Equals("å¾åç¸é¤"))
				{
					try
					{
						Bitmap bitmap = (Bitmap)Image.FromFile(TxtFeature.Text);
						if (bitmap.PixelFormat == canvas.Image.PixelFormat && bitmap.Width == canvas.Image.Width && bitmap.Height == canvas.Image.Height)
						{
							BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
							long PerformanceFrequency = 0L;
							long lpPerformanceCount = 0L;
							long lpPerformanceCount2 = 0L;
							QueryPerformanceFrequency(ref PerformanceFrequency);
							QueryPerformanceCounter(ref lpPerformanceCount);
							int num = 1;
							if (ChkSpeed.Checked)
							{
								num = 100;
							}
							TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
							TimeUse.GetCurrentParent().Refresh();
							for (int i = 0; i < num; i++)
							{
								if (OptPureC.Checked)
								{
									if (Text.Equals("å¾åç»å¯¹å¼å·®"))
									{
										IM_Arithmetic_AbsDiff_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾åç¸é¤"))
									{
										IM_Arithmetic_Div_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾ååå¤§"))
									{
										IM_Arithmetic_Max_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾ååå°"))
									{
										IM_Arithmetic_Min_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾åç¸å "))
									{
										IM_Arithmetic_Add_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸å"))
									{
										IM_Arithmetic_Sub_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸ä¹"))
									{
										IM_Arithmetic_Mult_Image_PureC(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
								}
								else if (OptAvx.Checked)
								{
									if (Text.Equals("å¾åç»å¯¹å¼å·®"))
									{
										IM_Arithmetic_AbsDiff_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾åç¸é¤"))
									{
										IM_Arithmetic_Div_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾ååå¤§"))
									{
										IM_Arithmetic_Max_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾ååå°"))
									{
										IM_Arithmetic_Min_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾åç¸å "))
									{
										IM_Arithmetic_Add_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸å"))
									{
										IM_Arithmetic_Sub_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸ä¹"))
									{
										IM_Arithmetic_Mult_Image_AVX(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
								}
								else
								{
									if (!OptSSE.Checked)
									{
										continue;
									}
									if (Text.Equals("BlendImage"))
									{
										if (CmbMode.SelectedIndex == 0)
										{
											IM_AddImage(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
										}
										else if (CmbMode.SelectedIndex == 1)
										{
											IM_SubtractImage(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
										}
										else if (CmbMode.SelectedIndex == 2)
										{
											IM_AbsDiffImage(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
										}
										else if (CmbMode.SelectedIndex == 3)
										{
											IM_BlendTwoImage_LinearLight(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
										}
									}
									else if (Text.Equals("NormalizedCrossCorrelation(NCC)"))
									{
										IM_Normalize_CrossCorrelation(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
									}
									else if (Text.Equals("å¾åç¸ä¹"))
									{
										IM_Arithmetic_Mult_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸å "))
									{
										IM_Arithmetic_Add_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸å"))
									{
										IM_Arithmetic_Sub_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾åç¸é¤"))
									{
										IM_Arithmetic_Div_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
									}
									else if (Text.Equals("å¾ååå¤§"))
									{
										IM_Arithmetic_Max_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾ååå°"))
									{
										IM_Arithmetic_Min_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
									else if (Text.Equals("å¾åç»å¯¹å¼å·®"))
									{
										IM_Arithmetic_AbsDiff_Image_SSE(Clone, (byte*)(void*)bitmapData.Scan0, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride);
									}
								}
							}
							QueryPerformanceCounter(ref lpPerformanceCount2);
							float PSNR = 0f;
							float MSE = 0f;
							float Mutual = 0f;
							IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
							IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
							IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
							TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
							bitmap.UnlockBits(bitmapData);
						}
						else
						{
							MessageBox.Show("ç¹å¾å¾å¿é¡»ååå¾åä¸æ ¼å¼åå¤§å°ã");
						}
						bitmap.Dispose();
					}
					catch
					{
					}
				}
				else if (Text.Equals("å¾åå¼ç¼©æ¾"))
				{
					long PerformanceFrequency2 = 0L;
					long lpPerformanceCount3 = 0L;
					long lpPerformanceCount4 = 0L;
					QueryPerformanceFrequency(ref PerformanceFrequency2);
					QueryPerformanceCounter(ref lpPerformanceCount3);
					int num2 = 1;
					if (ChkSpeed.Checked)
					{
						num2 = 100;
					}
					TimeUse.Text = "æ­£å¨è¿è¡" + num2 + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
					TimeUse.GetCurrentParent().Refresh();
					for (int j = 0; j < num2; j++)
					{
						if (OptPureC.Checked)
						{
							IM_Arithmetic_Scale_Image_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
						}
						else if (OptAvx.Checked)
						{
							IM_Arithmetic_Scale_Image_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
						}
						else if (OptSSE.Checked)
						{
							IM_Arithmetic_Scale_Image_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Add.Value);
						}
					}
					QueryPerformanceCounter(ref lpPerformanceCount4);
					float PSNR2 = 0f;
					float MSE2 = 0f;
					float Mutual2 = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR2);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE2);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual2);
					TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount4 - lpPerformanceCount3) * 1000) / (double)PerformanceFrequency2 / (double)num2, 2) + "ms/  PSNR: " + PSNR2 + "/  MSE:" + MSE2 + "/  Mutual:" + Mutual2;
				}
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			CmbMode.Items.Add("Add");
			CmbMode.Items.Add("Subtract");
			CmbMode.Items.Add("AbsDiff");
			CmbMode.Items.Add("LinearLight");
			CmbMode.SelectedIndex = 0;
			if (Text.Equals("BlendImage"))
			{
				base.Height = 175;
			}
			else if (Text.Equals("NormalizedCrossCorrelation(NCC)"))
			{
				base.Height = 175;
				LblS.Text = "åå¾:";
				Label lblS = LblS;
				TrackBar radius = Radius;
				bool flag2 = (RadiusUpDown.Enabled = true);
				bool enabled = (radius.Enabled = flag2);
				lblS.Enabled = enabled;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				CmbMode.Enabled = false;
			}
			else if (Text.Equals("å¾åææ°åå"))
			{
				base.Height = 175;
				LblS.Text = "ææ°:";
				Label lblS2 = LblS;
				TrackBar radius2 = Radius;
				bool flag2 = (RadiusUpDown.Enabled = true);
				bool enabled = (radius2.Enabled = flag2);
				lblS2.Enabled = enabled;
				Radius.Minimum = -1000;
				RadiusUpDown.Minimum = -1000m;
				Radius.Maximum = 1000;
				RadiusUpDown.Maximum = 1000m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				CmbMode.Enabled = false;
			}
			else if (Text.Equals("å¾ååå¤§") || Text.Equals("å¾ååå°") || Text.Equals("å¾åç»å¯¹å¼å·®"))
			{
				Label lblS3 = LblS;
				TrackBar radius3 = Radius;
				bool flag2 = (RadiusUpDown.Enabled = false);
				bool enabled = (radius3.Enabled = flag2);
				lblS3.Enabled = enabled;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				CmbMode.Enabled = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å¾åç¸ä¹") || Text.Equals("å¾åç¸é¤") || Text.Equals("å¾åç¸å ") || Text.Equals("å¾åç¸å") || Text.Equals("å¾åå¼ç¼©æ¾"))
			{
				if (Text.Equals("å¾åå¼ç¼©æ¾"))
				{
					CmdFeature.Enabled = false;
				}
				LblS.Text = "ä¹ç§¯ç³»æ°:";
				Label lblS4 = LblS;
				TrackBar radius4 = Radius;
				bool flag2 = (RadiusUpDown.Enabled = true);
				bool enabled = (radius4.Enabled = flag2);
				lblS4.Enabled = enabled;
				Radius.Minimum = -1000;
				RadiusUpDown.Minimum = -1000m;
				Radius.Maximum = 1000;
				RadiusUpDown.Maximum = 1000m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				Label lblA = LblA;
				TrackBar add = Add;
				flag2 = (AddUpDown.Visible = true);
				enabled = (add.Visible = flag2);
				lblA.Visible = enabled;
				CmbMode.Enabled = false;
				Optimization.Enabled = true;
			}
			else if (!Text.Equals("å¯¼åæ»¤æ³¢"))
			{
				Text.Equals("Domain Transform Filter");
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdFeature_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				TxtFeature.Text = openFileDialog.FileName;
				UpdateCanvas();
			}
			openFileDialog.Dispose();
		}

		private void SigmaUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Sigma_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkPreview_CheckedChanged_1(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbWeight_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbMode_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void label4_Click(object sender, EventArgs e)
		{
		}

		private void Add_Scroll(object sender, EventArgs e)
		{
			AddUpDown.Value = Add.Value;
		}

		private void AddUpDown_ValueChanged(object sender, EventArgs e)
		{
			Add.Value = (int)AddUpDown.Value;
			UpdateCanvas();
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.AddUpDown = new System.Windows.Forms.NumericUpDown();
			this.Add = new System.Windows.Forms.TrackBar();
			this.LblA = new System.Windows.Forms.Label();
			this.CmbMode = new System.Windows.Forms.ComboBox();
			this.LblInfo = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.LblS = new System.Windows.Forms.Label();
			this.CmdFeature = new System.Windows.Forms.Button();
			this.TxtFeature = new System.Windows.Forms.TextBox();
			this.label3 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.AddUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Add).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(685, 95);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(100, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(686, 46);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(99, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.AddUpDown);
			this.groupBox.Controls.Add(this.Add);
			this.groupBox.Controls.Add(this.LblA);
			this.groupBox.Controls.Add(this.CmbMode);
			this.groupBox.Controls.Add(this.LblInfo);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.LblS);
			this.groupBox.Controls.Add(this.CmdFeature);
			this.groupBox.Controls.Add(this.TxtFeature);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Location = new System.Drawing.Point(14, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4);
			this.groupBox.Size = new System.Drawing.Size(637, 238);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.AddUpDown.Location = new System.Drawing.Point(541, 182);
			this.AddUpDown.Margin = new System.Windows.Forms.Padding(4);
			this.AddUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.AddUpDown.Minimum = new decimal(new int[4] { 255, 0, 0, -2147483648 });
			this.AddUpDown.Name = "AddUpDown";
			this.AddUpDown.Size = new System.Drawing.Size(75, 28);
			this.AddUpDown.TabIndex = 27;
			this.AddUpDown.Visible = false;
			this.AddUpDown.ValueChanged += new System.EventHandler(AddUpDown_ValueChanged);
			this.Add.AutoSize = false;
			this.Add.LargeChange = 2;
			this.Add.Location = new System.Drawing.Point(84, 184);
			this.Add.Margin = new System.Windows.Forms.Padding(4);
			this.Add.Maximum = 255;
			this.Add.Minimum = -255;
			this.Add.Name = "Add";
			this.Add.Size = new System.Drawing.Size(449, 39);
			this.Add.TabIndex = 25;
			this.Add.TickFrequency = 0;
			this.Add.Visible = false;
			this.Add.Scroll += new System.EventHandler(Add_Scroll);
			this.LblA.AutoSize = true;
			this.LblA.Location = new System.Drawing.Point(9, 189);
			this.LblA.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.LblA.Name = "LblA";
			this.LblA.Size = new System.Drawing.Size(62, 18);
			this.LblA.TabIndex = 26;
			this.LblA.Text = "åç½®å¼";
			this.LblA.Visible = false;
			this.CmbMode.FormattingEnabled = true;
			this.CmbMode.Location = new System.Drawing.Point(114, 88);
			this.CmbMode.Name = "CmbMode";
			this.CmbMode.Size = new System.Drawing.Size(502, 26);
			this.CmbMode.TabIndex = 24;
			this.CmbMode.SelectedIndexChanged += new System.EventHandler(CmbMode_SelectedIndexChanged);
			this.LblInfo.AutoSize = true;
			this.LblInfo.Location = new System.Drawing.Point(9, 92);
			this.LblInfo.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.LblInfo.Name = "LblInfo";
			this.LblInfo.Size = new System.Drawing.Size(98, 18);
			this.LblInfo.TabIndex = 23;
			this.LblInfo.Text = "æ··åæ¨¡å¼ï¼";
			this.RadiusUpDown.Enabled = false;
			this.RadiusUpDown.Location = new System.Drawing.Point(541, 136);
			this.RadiusUpDown.Margin = new System.Windows.Forms.Padding(4);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 64, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(75, 28);
			this.RadiusUpDown.TabIndex = 21;
			this.RadiusUpDown.Value = new decimal(new int[4] { 32, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(SigmaUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.Enabled = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(82, 136);
			this.Radius.Margin = new System.Windows.Forms.Padding(4);
			this.Radius.Maximum = 64;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(451, 39);
			this.Radius.TabIndex = 20;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 32;
			this.Radius.Scroll += new System.EventHandler(Sigma_Scroll);
			this.LblS.AutoSize = true;
			this.LblS.Enabled = false;
			this.LblS.Location = new System.Drawing.Point(8, 141);
			this.LblS.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.LblS.Name = "LblS";
			this.LblS.Size = new System.Drawing.Size(53, 18);
			this.LblS.TabIndex = 22;
			this.LblS.Text = "Sigma";
			this.LblS.Click += new System.EventHandler(label4_Click);
			this.CmdFeature.Location = new System.Drawing.Point(534, 29);
			this.CmdFeature.Margin = new System.Windows.Forms.Padding(4);
			this.CmdFeature.Name = "CmdFeature";
			this.CmdFeature.Size = new System.Drawing.Size(82, 40);
			this.CmdFeature.TabIndex = 15;
			this.CmdFeature.Text = "éæ©";
			this.CmdFeature.UseVisualStyleBackColor = true;
			this.CmdFeature.Click += new System.EventHandler(CmdFeature_Click);
			this.TxtFeature.Enabled = false;
			this.TxtFeature.Location = new System.Drawing.Point(116, 36);
			this.TxtFeature.Margin = new System.Windows.Forms.Padding(4);
			this.TxtFeature.Name = "TxtFeature";
			this.TxtFeature.ReadOnly = true;
			this.TxtFeature.Size = new System.Drawing.Size(391, 28);
			this.TxtFeature.TabIndex = 9;
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(9, 44);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(98, 18);
			this.label3.TabIndex = 8;
			this.label3.Text = "éæ©å¾åï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(695, 165);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 18;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged_1);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(13, 274);
			this.Optimization.Margin = new System.Windows.Forms.Padding(4);
			this.Optimization.Name = "Optimization";
			this.Optimization.Padding = new System.Windows.Forms.Padding(4);
			this.Optimization.Size = new System.Drawing.Size(638, 111);
			this.Optimization.TabIndex = 22;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(485, 51);
			this.OptAvx.Margin = new System.Windows.Forms.Padding(4);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(132, 22);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(314, 51);
			this.OptSSE.Margin = new System.Windows.Forms.Padding(4);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(132, 22);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(33, 51);
			this.OptPureC.Margin = new System.Windows.Forms.Padding(4);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(240, 22);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(695, 208);
			this.ChkSpeed.Margin = new System.Windows.Forms.Padding(4);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(106, 22);
			this.ChkSpeed.TabIndex = 23;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(813, 407);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "MultImageDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "å¤å¾æ··å";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.AddUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Add).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class CurvatureFilterDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private CheckBox ChkPreview;

		private RadioButton OptHL;

		private RadioButton OptGC;

		private RadioButton OptMC;

		private RadioButton OptTV;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_CurvatureFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int FilterType, int Iteration);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe CurvatureFilterDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				Busy = true;
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				if (OptTV.Checked)
				{
					IM_CurvatureFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 0, Radius.Value);
				}
				else if (OptMC.Checked)
				{
					IM_CurvatureFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 1, Radius.Value);
				}
				else if (OptGC.Checked)
				{
					IM_CurvatureFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 2, Radius.Value);
				}
				else
				{
					IM_CurvatureFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, 3, Radius.Value);
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Text.Equals("FFTå·ç§¯");
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptHL_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void groupBox_Enter(object sender, EventArgs e)
		{
		}

		private void OptTV_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptMC_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptGC_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.OptHL = new System.Windows.Forms.RadioButton();
			this.OptGC = new System.Windows.Forms.RadioButton();
			this.OptMC = new System.Windows.Forms.RadioButton();
			this.OptTV = new System.Windows.Forms.RadioButton();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 45);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(307, 12);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.OptHL);
			this.groupBox.Controls.Add(this.OptGC);
			this.groupBox.Controls.Add(this.OptMC);
			this.groupBox.Controls.Add(this.OptTV);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(9, 9);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(280, 123);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.groupBox.Enter += new System.EventHandler(groupBox_Enter);
			this.OptHL.AutoSize = true;
			this.OptHL.Location = new System.Drawing.Point(224, 97);
			this.OptHL.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.OptHL.Name = "OptHL";
			this.OptHL.Size = new System.Drawing.Size(35, 16);
			this.OptHL.TabIndex = 9;
			this.OptHL.TabStop = true;
			this.OptHL.Text = "HL";
			this.OptHL.UseVisualStyleBackColor = true;
			this.OptHL.CheckedChanged += new System.EventHandler(OptHL_CheckedChanged);
			this.OptGC.AutoSize = true;
			this.OptGC.Location = new System.Drawing.Point(149, 97);
			this.OptGC.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.OptGC.Name = "OptGC";
			this.OptGC.Size = new System.Drawing.Size(35, 16);
			this.OptGC.TabIndex = 8;
			this.OptGC.TabStop = true;
			this.OptGC.Text = "GC";
			this.OptGC.UseVisualStyleBackColor = true;
			this.OptGC.CheckedChanged += new System.EventHandler(OptGC_CheckedChanged);
			this.OptMC.AutoSize = true;
			this.OptMC.Location = new System.Drawing.Point(86, 97);
			this.OptMC.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.OptMC.Name = "OptMC";
			this.OptMC.Size = new System.Drawing.Size(35, 16);
			this.OptMC.TabIndex = 7;
			this.OptMC.TabStop = true;
			this.OptMC.Text = "MC";
			this.OptMC.UseVisualStyleBackColor = true;
			this.OptMC.CheckedChanged += new System.EventHandler(OptMC_CheckedChanged);
			this.OptTV.AutoSize = true;
			this.OptTV.Checked = true;
			this.OptTV.Location = new System.Drawing.Point(20, 97);
			this.OptTV.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.OptTV.Name = "OptTV";
			this.OptTV.Size = new System.Drawing.Size(35, 16);
			this.OptTV.TabIndex = 6;
			this.OptTV.TabStop = true;
			this.OptTV.Text = "TV";
			this.OptTV.UseVisualStyleBackColor = true;
			this.OptTV.CheckedChanged += new System.EventHandler(OptTV_CheckedChanged);
			this.RadiusUpDown.Location = new System.Drawing.Point(195, 29);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 20, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(8, 55);
			this.Radius.Maximum = 200;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(250, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 20;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(65, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "è¿­ä»£æ¬¡æ°ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 87);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(372, 153);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "CurvatureFilterDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "BlurBasedDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class Canvas : UserControl
	{
		private Bitmap image;

		private string imageFile = "";

		private double zoom = 1.0;

		private unsafe byte* imageData = null;

		private int channel = 3;

		private int stride;

		private IContainer components;

		public unsafe int Channel
		{
			get
			{
				return channel;
			}
			set
			{
				if (image != null)
				{
					int num = image.Width;
					int num2 = image.Height;
					if (channel != value)
					{
						Bitmap bitmap = new Bitmap(image.Width, image.Height, ChannelToPixelFormat(value));
						if (value == 1)
						{
							ColorPalette palette = bitmap.Palette;
							for (int i = 0; i < palette.Entries.Length; i++)
							{
								palette.Entries[i] = Color.FromArgb(255, i, i, i);
							}
							bitmap.Palette = palette;
						}
						BitmapData bitmapData = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), ImageLockMode.ReadWrite, ChannelToPixelFormat(channel));
						BitmapData bitmapData2 = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, ChannelToPixelFormat(value));
						imageData = (byte*)(void*)bitmapData2.Scan0;
						stride = bitmapData2.Stride;
						Stopwatch stopwatch = new Stopwatch();
						if (channel == 3 && value == 1)
						{
							stopwatch.Start();
							IM_RGB2Gray(bitmapData.Scan0, bitmapData2.Scan0, num, num2, bitmapData.Stride, bitmapData2.Stride);
							stopwatch.Stop();
						}
						else
						{
							for (int j = 0; j < num2; j++)
							{
								byte* ptr = (byte*)(void*)bitmapData.Scan0 + j * bitmapData.Stride;
								byte* ptr2 = (byte*)(void*)bitmapData2.Scan0 + j * bitmapData2.Stride;
								switch (value)
								{
								case 1:
								{
									for (int m = 0; m < num; m++)
									{
										ptr2[m] = (byte)(*ptr + ptr[1] + ptr[1] + ptr[2] >> 2);
										ptr += channel;
									}
									break;
								}
								case 3:
								{
									if (channel == 1)
									{
										for (int n = 0; n < num; n++)
										{
											*ptr2 = (ptr2[1] = (ptr2[2] = ptr[n]));
											ptr2 += 3;
										}
										break;
									}
									for (int num3 = 0; num3 < num; num3++)
									{
										*ptr2 = (byte)(*ptr * ptr[3] / 255);
										ptr2[1] = (byte)(ptr[1] * ptr[3] / 255);
										ptr2[2] = (byte)(ptr[2] * ptr[3] / 255);
										ptr += 4;
										ptr2 += 3;
									}
									break;
								}
								case 4:
								{
									if (channel == 1)
									{
										for (int k = 0; k < num; k++)
										{
											*ptr2 = (ptr2[1] = (ptr2[2] = ptr[k]));
											ptr2[3] = byte.MaxValue;
											ptr2 += 4;
										}
										break;
									}
									for (int l = 0; l < num; l++)
									{
										*ptr2 = *ptr;
										ptr2[1] = ptr[1];
										ptr2[2] = ptr[2];
										ptr2[3] = byte.MaxValue;
										ptr += 3;
										ptr2 += 4;
									}
									break;
								}
								}
							}
						}
						image.UnlockBits(bitmapData);
						bitmap.UnlockBits(bitmapData2);
						image.Dispose();
						image = bitmap;
						Invalidate();
					}
				}
				channel = value;
			}
		}

		public unsafe Bitmap Image
		{
			get
			{
				return image;
			}
			set
			{
				if (value != null)
				{
					int num = PixelFormatToChannel(value.PixelFormat);
					if (num == 1 || num == 3 || num == 4)
					{
						image = value;
						channel = num;
						BitmapData bitmapData = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), ImageLockMode.ReadWrite, image.PixelFormat);
						imageData = (byte*)(void*)bitmapData.Scan0;
						stride = bitmapData.Stride;
						image.UnlockBits(bitmapData);
						Invalidate();
					}
				}
			}
		}

		public unsafe byte* ImageData => imageData;

		public int Stride => stride;

		public unsafe string ImageFile
		{
			get
			{
				return imageFile;
			}
			set
			{
				imageFile = value;
				if (imageFile != "")
				{
					Bitmap bitmap = (Bitmap)System.Drawing.Image.FromStream(new MemoryStream(File.ReadAllBytes(imageFile)));
					int num = PixelFormatToChannel(bitmap.PixelFormat);
					if (num == 1 || num == 3 || num == 4)
					{
						image = bitmap;
						channel = num;
						BitmapData bitmapData = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), ImageLockMode.ReadWrite, image.PixelFormat);
						imageData = (byte*)(void*)bitmapData.Scan0;
						stride = bitmapData.Stride;
						image.UnlockBits(bitmapData);
						Invalidate();
					}
					else
					{
						bitmap.Dispose();
					}
				}
			}
		}

		public double Zoom
		{
			get
			{
				return zoom;
			}
			set
			{
				zoom = value;
				Invalidate();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_RGB2Gray(IntPtr Src, IntPtr Dest, int Width, int Height, int StrideS, int StrideD);

		private PixelFormat ChannelToPixelFormat(int Channel)
		{
			return Channel switch
			{
				1 => PixelFormat.Format8bppIndexed, 
				3 => PixelFormat.Format24bppRgb, 
				4 => PixelFormat.Format32bppArgb, 
				_ => PixelFormat.Undefined, 
			};
		}

		private int PixelFormatToChannel(PixelFormat Format)
		{
			switch (Format)
			{
			case PixelFormat.Format8bppIndexed:
				return 1;
			case PixelFormat.Format24bppRgb:
				return 3;
			case PixelFormat.Format32bppRgb:
			case PixelFormat.Format32bppArgb:
				return 4;
			default:
				if (Format == (PixelFormat)8207)
				{
					return 3;
				}
				return 0;
			}
		}

		private Bitmap CreateGrayBitmap(int Width, int Height)
		{
			Bitmap bitmap = new Bitmap(Width, Height, PixelFormat.Format8bppIndexed);
			ColorPalette palette = bitmap.Palette;
			for (int i = 0; i < palette.Entries.Length; i++)
			{
				palette.Entries[i] = Color.FromArgb(255, i, i, i);
			}
			bitmap.Palette = palette;
			return bitmap;
		}

		public unsafe Canvas()
		{
			InitializeComponent();
			base.ResizeRedraw = true;
			SetStyle(ControlStyles.UserPaint | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, value: true);
			SetStyle(ControlStyles.UserMouse, value: true);
		}

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			Color color = Color.FromArgb(255, 223, 223, 223);
			Color white = Color.White;
			Bitmap backgroundImage = new Bitmap(16, 16);
			Graphics graphics = Graphics.FromImage(backgroundImage);
			graphics.FillRectangle(new SolidBrush(color), 0, 0, 8, 8);
			graphics.FillRectangle(new SolidBrush(white), 8, 0, 8, 8);
			graphics.FillRectangle(new SolidBrush(white), 0, 8, 8, 8);
			graphics.FillRectangle(new SolidBrush(color), 8, 8, 8, 8);
			BackgroundImage = backgroundImage;
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			base.OnPaint(e);
			if (image != null)
			{
				base.Size = new Size((int)((double)image.Width * zoom), (int)((double)image.Height * zoom));
				e.Graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
				e.Graphics.DrawImage(image, new Rectangle(0, 0, base.Width, base.Height), new Rectangle(0, 0, image.Width, image.Height), GraphicsUnit.Pixel);
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			base.SuspendLayout();
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.DoubleBuffered = true;
			base.Name = "Canvas";
			base.Size = new System.Drawing.Size(444, 368);
			base.ResumeLayout(false);
		}
	}
	public class HomomorphicFilteringDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private TrackBar Sigma;

		private Label label1;

		private TrackBar High;

		private Label label2;

		private CheckBox ChkPreview;

		private TrackBar Low;

		private Label label3;

		private TrackBar C;

		private Label label4;

		private Label lblc;

		private Label lbllow;

		private Label lblhigh;

		private Label lblsigma;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HomomorphicFiltering(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, float High, float Low, float C);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EnhanceBasedOnErodeAndDilate_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int ErodeRadius, int ErodeAmount, int DilateRadius, int DialteAmount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EnhanceBasedOnErodeAndDilate_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int ErodeRadius, int ErodeAmount, int DilateRadius, int DialteAmount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe HomomorphicFilteringDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				if (OptPureC.Checked)
				{
					if (Text == "åææ»¤æ³¢")
					{
						IM_HomomorphicFiltering(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, (float)High.Value * 0.01f, (float)Low.Value * 0.01f, (float)C.Value * 0.01f);
					}
					else if (Text == "åºäºæå¼çå¢å¼º")
					{
						IM_EnhanceBasedOnErodeAndDilate_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, High.Value, Low.Value, C.Value);
					}
				}
				else if (OptSSE.Checked)
				{
					if (Text == "åææ»¤æ³¢")
					{
						IM_HomomorphicFiltering(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, (float)High.Value * 0.01f, (float)Low.Value * 0.01f, (float)C.Value * 0.01f);
					}
					else if (Text == "åºäºæå¼çå¢å¼º")
					{
						IM_EnhanceBasedOnErodeAndDilate_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Sigma.Value, High.Value, Low.Value, C.Value);
					}
				}
				else
				{
					_ = OptAvx.Checked;
				}
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void HazeRemovalBasedOnDarkChannelPriorDialog_Load(object sender, EventArgs e)
		{
			if (Text == "åææ»¤æ³¢")
			{
				Sigma.Maximum = 3 * canvas.Image.Width;
				Sigma.Value = canvas.Image.Width;
				lblsigma.Text = canvas.Image.Width.ToString();
			}
			else if (Text == "åºäºæå¼çå¢å¼º")
			{
				Sigma.Minimum = 1;
				Sigma.Maximum = 500;
				Sigma.Value = 200;
				lblsigma.Text = 200.ToString();
				label1.Text = "é«ååå¾";
				High.Minimum = 0;
				High.Maximum = 200;
				High.Value = 50;
				label2.Text = "é«åæ°é";
				lblhigh.Text = 50.ToString();
				Low.Minimum = 1;
				Low.Maximum = 500;
				Low.Value = 200;
				label3.Text = "æè°åå¾";
				lbllow.Text = 200.ToString();
				C.Minimum = 0;
				C.Maximum = 200;
				C.Value = 10;
				label4.Text = "æè°æ°é";
				lblc.Text = 10.ToString();
				Optimization.Enabled = true;
				OptAvx.Enabled = false;
			}
			UpdateCanvas();
		}

		private void Sigma_Scroll(object sender, EventArgs e)
		{
			lblsigma.Text = Sigma.Value.ToString();
			UpdateCanvas();
		}

		private void High_Scroll(object sender, EventArgs e)
		{
			if (Text == "åææ»¤æ³¢")
			{
				lblhigh.Text = ((float)High.Value * 0.01f).ToString();
			}
			else if (Text == "åºäºæå¼çå¢å¼º")
			{
				lblhigh.Text = High.Value.ToString();
			}
			UpdateCanvas();
		}

		private void Low_Scroll(object sender, EventArgs e)
		{
			if (Text == "åææ»¤æ³¢")
			{
				lbllow.Text = ((float)Low.Value * 0.01f).ToString();
			}
			else if (Text == "åºäºæå¼çå¢å¼º")
			{
				lbllow.Text = Low.Value.ToString();
			}
			UpdateCanvas();
		}

		private void C_Scroll(object sender, EventArgs e)
		{
			if (Text == "åææ»¤æ³¢")
			{
				lblc.Text = ((float)C.Value * 0.01f).ToString();
			}
			else if (Text == "åºäºæå¼çå¢å¼º")
			{
				lblc.Text = C.Value.ToString();
			}
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.lblc = new System.Windows.Forms.Label();
			this.lbllow = new System.Windows.Forms.Label();
			this.lblhigh = new System.Windows.Forms.Label();
			this.lblsigma = new System.Windows.Forms.Label();
			this.C = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.Low = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.High = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.Sigma = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.C).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Low).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.High).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 67);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(306, 23);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.lblc);
			this.groupBox.Controls.Add(this.lbllow);
			this.groupBox.Controls.Add(this.lblhigh);
			this.groupBox.Controls.Add(this.lblsigma);
			this.groupBox.Controls.Add(this.C);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.Low);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.High);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.Sigma);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(265, 269);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.lblc.AutoSize = true;
			this.lblc.Location = new System.Drawing.Point(213, 207);
			this.lblc.Name = "lblc";
			this.lblc.Size = new System.Drawing.Size(23, 12);
			this.lblc.TabIndex = 17;
			this.lblc.Text = "0.1";
			this.lbllow.AutoSize = true;
			this.lbllow.Location = new System.Drawing.Point(213, 142);
			this.lbllow.Name = "lbllow";
			this.lbllow.Size = new System.Drawing.Size(23, 12);
			this.lbllow.TabIndex = 16;
			this.lbllow.Text = "0.2";
			this.lblhigh.AutoSize = true;
			this.lblhigh.Location = new System.Drawing.Point(213, 84);
			this.lblhigh.Name = "lblhigh";
			this.lblhigh.Size = new System.Drawing.Size(23, 12);
			this.lblhigh.TabIndex = 15;
			this.lblhigh.Text = "2.0";
			this.lblsigma.AutoSize = true;
			this.lblsigma.Location = new System.Drawing.Point(213, 29);
			this.lblsigma.Name = "lblsigma";
			this.lblsigma.Size = new System.Drawing.Size(23, 12);
			this.lblsigma.TabIndex = 14;
			this.lblsigma.Text = "512";
			this.C.AutoSize = false;
			this.C.LargeChange = 2;
			this.C.Location = new System.Drawing.Point(8, 221);
			this.C.Maximum = 300;
			this.C.Minimum = 1;
			this.C.Name = "C";
			this.C.Size = new System.Drawing.Size(250, 26);
			this.C.TabIndex = 13;
			this.C.TickFrequency = 0;
			this.C.Value = 10;
			this.C.Scroll += new System.EventHandler(C_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 196);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(17, 12);
			this.label4.TabIndex = 12;
			this.label4.Text = "C:";
			this.Low.AutoSize = false;
			this.Low.LargeChange = 2;
			this.Low.Location = new System.Drawing.Point(6, 167);
			this.Low.Maximum = 100;
			this.Low.Name = "Low";
			this.Low.Size = new System.Drawing.Size(250, 26);
			this.Low.TabIndex = 10;
			this.Low.TickFrequency = 0;
			this.Low.Value = 20;
			this.Low.Scroll += new System.EventHandler(Low_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(4, 142);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(29, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "Low:";
			this.High.AutoSize = false;
			this.High.LargeChange = 2;
			this.High.Location = new System.Drawing.Point(8, 111);
			this.High.Maximum = 1000;
			this.High.Minimum = 100;
			this.High.Name = "High";
			this.High.Size = new System.Drawing.Size(250, 26);
			this.High.TabIndex = 7;
			this.High.TickFrequency = 0;
			this.High.Value = 200;
			this.High.Scroll += new System.EventHandler(High_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(41, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "Highï¼";
			this.Sigma.AutoSize = false;
			this.Sigma.LargeChange = 2;
			this.Sigma.Location = new System.Drawing.Point(8, 55);
			this.Sigma.Maximum = 1000;
			this.Sigma.Minimum = 100;
			this.Sigma.Name = "Sigma";
			this.Sigma.Size = new System.Drawing.Size(250, 26);
			this.Sigma.TabIndex = 3;
			this.Sigma.TickFrequency = 0;
			this.Sigma.Value = 512;
			this.Sigma.Scroll += new System.EventHandler(Sigma_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(47, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "Sigmaï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 128);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(5, 288);
			this.Optimization.Name = "Optimization";
			this.Optimization.Size = new System.Drawing.Size(272, 109);
			this.Optimization.TabIndex = 24;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(22, 50);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(89, 16);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(22, 22);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(161, 16);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(22, 78);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(89, 16);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(372, 407);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "HomomorphicFilteringDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "åææ»¤æ³¢";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing);
			base.Load += new System.EventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.C).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Low).EndInit();
			((System.ComponentModel.ISupportInitialize)this.High).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Sigma).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class HazeRemovalBasedOnDarkChannelPriorDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown BlockSizeUpDown;

		private TrackBar BlockSize;

		private Label label1;

		private NumericUpDown MaxAtomUpDown;

		private TrackBar MaxAtom;

		private Label label2;

		private CheckBox ChkPreview;

		private NumericUpDown OmegaUpDown;

		private TrackBar Omega;

		private Label label3;

		private NumericUpDown T0UpDown;

		private TrackBar T0;

		private Label label4;

		private NumericUpDown GammaUpDown;

		private TrackBar Gamma;

		private Label label5;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_HazeRemovalBasedOnDarkChannelPrior(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride, int BlockSize = 5, int GuideRadius = 20, int MaxAtom = 220, float Omega = 0.9f, float T0 = 0.1f, float Gamma = 0.9f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe HazeRemovalBasedOnDarkChannelPriorDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_HazeRemovalBasedOnDarkChannelPrior((IntPtr)Clone, (IntPtr)canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, BlockSize.Value, BlockSize.Value * 4, MaxAtom.Value, (float)Omega.Value * 0.01f, (float)T0.Value * 0.01f, (float)Gamma.Value * 0.01f);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void BlockSize_Scroll(object sender, EventArgs e)
		{
			BlockSizeUpDown.Value = BlockSize.Value;
		}

		private void BlockSizeUpDown_ValueChanged(object sender, EventArgs e)
		{
			BlockSize.Value = (int)BlockSizeUpDown.Value;
			UpdateCanvas();
		}

		private void MaxAtom_Scroll(object sender, EventArgs e)
		{
			MaxAtomUpDown.Value = MaxAtom.Value;
		}

		private void MaxAtomUpDown_ValueChanged(object sender, EventArgs e)
		{
			MaxAtom.Value = (int)MaxAtomUpDown.Value;
			UpdateCanvas();
		}

		private void Omega_Scroll(object sender, EventArgs e)
		{
			OmegaUpDown.Value = Omega.Value;
		}

		private void OmegaUpDown_ValueChanged(object sender, EventArgs e)
		{
			Omega.Value = (int)OmegaUpDown.Value;
			UpdateCanvas();
		}

		private void T0_Scroll(object sender, EventArgs e)
		{
			T0UpDown.Value = T0.Value;
		}

		private void T0UpDown_ValueChanged(object sender, EventArgs e)
		{
			T0.Value = (int)T0UpDown.Value;
			UpdateCanvas();
		}

		private void Gamma_Scroll(object sender, EventArgs e)
		{
			GammaUpDown.Value = Gamma.Value;
		}

		private void GammaUpDown_ValueChanged(object sender, EventArgs e)
		{
			Gamma.Value = (int)GammaUpDown.Value;
			UpdateCanvas();
		}

		private void HazeRemovalBasedOnDarkChannelPriorDialog_Load(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.GammaUpDown = new System.Windows.Forms.NumericUpDown();
			this.Gamma = new System.Windows.Forms.TrackBar();
			this.label5 = new System.Windows.Forms.Label();
			this.T0UpDown = new System.Windows.Forms.NumericUpDown();
			this.T0 = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.OmegaUpDown = new System.Windows.Forms.NumericUpDown();
			this.Omega = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.MaxAtomUpDown = new System.Windows.Forms.NumericUpDown();
			this.MaxAtom = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.BlockSizeUpDown = new System.Windows.Forms.NumericUpDown();
			this.BlockSize = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.GammaUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Gamma).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.T0UpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.T0).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.OmegaUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Omega).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.MaxAtomUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.MaxAtom).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.BlockSizeUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.BlockSize).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 67);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(306, 23);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.GammaUpDown);
			this.groupBox.Controls.Add(this.Gamma);
			this.groupBox.Controls.Add(this.label5);
			this.groupBox.Controls.Add(this.T0UpDown);
			this.groupBox.Controls.Add(this.T0);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.OmegaUpDown);
			this.groupBox.Controls.Add(this.Omega);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.MaxAtomUpDown);
			this.groupBox.Controls.Add(this.MaxAtom);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.BlockSizeUpDown);
			this.groupBox.Controls.Add(this.BlockSize);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(265, 316);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.GammaUpDown.Location = new System.Drawing.Point(191, 257);
			this.GammaUpDown.Minimum = new decimal(new int[4] { 75, 0, 0, 0 });
			this.GammaUpDown.Name = "GammaUpDown";
			this.GammaUpDown.Size = new System.Drawing.Size(50, 21);
			this.GammaUpDown.TabIndex = 17;
			this.GammaUpDown.Value = new decimal(new int[4] { 90, 0, 0, 0 });
			this.GammaUpDown.ValueChanged += new System.EventHandler(GammaUpDown_ValueChanged);
			this.Gamma.AutoSize = false;
			this.Gamma.LargeChange = 2;
			this.Gamma.Location = new System.Drawing.Point(6, 284);
			this.Gamma.Maximum = 100;
			this.Gamma.Minimum = 75;
			this.Gamma.Name = "Gamma";
			this.Gamma.Size = new System.Drawing.Size(250, 26);
			this.Gamma.TabIndex = 16;
			this.Gamma.TickFrequency = 0;
			this.Gamma.Value = 90;
			this.Gamma.Scroll += new System.EventHandler(Gamma_Scroll);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(6, 257);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(47, 12);
			this.label5.TabIndex = 15;
			this.label5.Text = "Gammaï¼";
			this.T0UpDown.Location = new System.Drawing.Point(193, 194);
			this.T0UpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.T0UpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.T0UpDown.Name = "T0UpDown";
			this.T0UpDown.Size = new System.Drawing.Size(50, 21);
			this.T0UpDown.TabIndex = 14;
			this.T0UpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.T0UpDown.ValueChanged += new System.EventHandler(T0UpDown_ValueChanged);
			this.T0.AutoSize = false;
			this.T0.LargeChange = 2;
			this.T0.Location = new System.Drawing.Point(8, 221);
			this.T0.Maximum = 50;
			this.T0.Minimum = 1;
			this.T0.Name = "T0";
			this.T0.Size = new System.Drawing.Size(250, 26);
			this.T0.TabIndex = 13;
			this.T0.TickFrequency = 0;
			this.T0.Value = 10;
			this.T0.Scroll += new System.EventHandler(T0_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 196);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(77, 12);
			this.label4.TabIndex = 12;
			this.label4.Text = "æå°éå°çï¼";
			this.OmegaUpDown.Location = new System.Drawing.Point(193, 140);
			this.OmegaUpDown.Minimum = new decimal(new int[4] { 75, 0, 0, 0 });
			this.OmegaUpDown.Name = "OmegaUpDown";
			this.OmegaUpDown.Size = new System.Drawing.Size(50, 21);
			this.OmegaUpDown.TabIndex = 11;
			this.OmegaUpDown.Value = new decimal(new int[4] { 90, 0, 0, 0 });
			this.OmegaUpDown.ValueChanged += new System.EventHandler(OmegaUpDown_ValueChanged);
			this.Omega.AutoSize = false;
			this.Omega.LargeChange = 2;
			this.Omega.Location = new System.Drawing.Point(6, 167);
			this.Omega.Maximum = 100;
			this.Omega.Minimum = 75;
			this.Omega.Name = "Omega";
			this.Omega.Size = new System.Drawing.Size(250, 26);
			this.Omega.TabIndex = 10;
			this.Omega.TickFrequency = 0;
			this.Omega.Value = 90;
			this.Omega.Scroll += new System.EventHandler(Omega_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(4, 142);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(65, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "å»é¾ç¨åº¦ï¼";
			this.MaxAtomUpDown.Location = new System.Drawing.Point(195, 84);
			this.MaxAtomUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.MaxAtomUpDown.Minimum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.MaxAtomUpDown.Name = "MaxAtomUpDown";
			this.MaxAtomUpDown.Size = new System.Drawing.Size(50, 21);
			this.MaxAtomUpDown.TabIndex = 8;
			this.MaxAtomUpDown.Value = new decimal(new int[4] { 240, 0, 0, 0 });
			this.MaxAtomUpDown.ValueChanged += new System.EventHandler(MaxAtomUpDown_ValueChanged);
			this.MaxAtom.AutoSize = false;
			this.MaxAtom.LargeChange = 2;
			this.MaxAtom.Location = new System.Drawing.Point(8, 111);
			this.MaxAtom.Maximum = 255;
			this.MaxAtom.Minimum = 200;
			this.MaxAtom.Name = "MaxAtom";
			this.MaxAtom.Size = new System.Drawing.Size(250, 26);
			this.MaxAtom.TabIndex = 7;
			this.MaxAtom.TickFrequency = 0;
			this.MaxAtom.Value = 240;
			this.MaxAtom.Scroll += new System.EventHandler(MaxAtom_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(77, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "æå¤§å¤§æ°åï¼";
			this.BlockSizeUpDown.Location = new System.Drawing.Point(195, 29);
			this.BlockSizeUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.BlockSizeUpDown.Minimum = new decimal(new int[4] { 2, 0, 0, 0 });
			this.BlockSizeUpDown.Name = "BlockSizeUpDown";
			this.BlockSizeUpDown.Size = new System.Drawing.Size(50, 21);
			this.BlockSizeUpDown.TabIndex = 4;
			this.BlockSizeUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.BlockSizeUpDown.ValueChanged += new System.EventHandler(BlockSizeUpDown_ValueChanged);
			this.BlockSize.AutoSize = false;
			this.BlockSize.LargeChange = 2;
			this.BlockSize.Location = new System.Drawing.Point(8, 55);
			this.BlockSize.Maximum = 50;
			this.BlockSize.Minimum = 2;
			this.BlockSize.Name = "BlockSize";
			this.BlockSize.Size = new System.Drawing.Size(250, 26);
			this.BlockSize.TabIndex = 3;
			this.BlockSize.TickFrequency = 0;
			this.BlockSize.Value = 10;
			this.BlockSize.Scroll += new System.EventHandler(BlockSize_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(77, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "æééåå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 128);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(374, 341);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "HazeRemovalBasedOnDarkChannelPriorDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "åºäºæééçå¾åå»é¾";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_FormClosing);
			base.Load += new System.EventHandler(HazeRemovalBasedOnDarkChannelPriorDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.GammaUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Gamma).EndInit();
			((System.ComponentModel.ISupportInitialize)this.T0UpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.T0).EndInit();
			((System.ComponentModel.ISupportInitialize)this.OmegaUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Omega).EndInit();
			((System.ComponentModel.ISupportInitialize)this.MaxAtomUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.MaxAtom).EndInit();
			((System.ComponentModel.ISupportInitialize)this.BlockSizeUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.BlockSize).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class MakeUpDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Locked;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown DenoiseLevelUpDown;

		private TrackBar DenoiseLevel;

		private Label label1;

		private NumericUpDown WhitenLevelUpDown;

		private TrackBar WhitenLevel;

		private Label label2;

		private CheckBox ChkPreview;

		private NumericUpDown TextureLevelUpDown;

		private TrackBar TextureLevel;

		private Label label3;

		private CheckBox ChkTexture;

		private CheckBox ChkStandand;

		private CheckBox ChkFast;

		private CheckBox ChkSpeed;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private RadioButton Opt1;

		private RadioButton Opt2;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Mosaic(byte* Src, byte* Dest, int Width, int Height, int Stride, int Angle, int BlockX, int BlockY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MakeUp(byte* Src, byte* Dest, int Width, int Height, int Stride, int DenoiseLevel, int WhiteLevel);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NewMakeUp(byte* Src, byte* Dest, int Width, int Height, int Stride, int DenoiseLevel, int WhiteLevel, int TextureLevel);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SoftGlow_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int Contrast);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SoftGlow_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int Contrast);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SoftGlow_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int Contrast);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighFrequencyEmphasizeFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold, int Base, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LocalLaplacianFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int SampleLevel, int DetailAmount, float Sigma, bool ReduceNosie);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Exposure_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Exposure, float Offset, float Gamma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Exposure_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Exposure, float Offset, float Gamma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdjustHSL_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int HueI, int SatI, int LightI);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdjustHSL_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int HueI, int SatI, int LightI);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SauvolaAdaptiveThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaskSize, int Scale, out int Range);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WanAdaptiveThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaskSize, int Scale, out int Range);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HysteresisThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Low, int High, int MaxLength);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WaveletSharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WaveletSharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussLaplacianPyramid_Sharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussLaplacianPyramid_Sharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RadialBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int CenterX, int CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RadialBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int CenterX, int CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Fibermetric_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxThickness, int Level, int StructureSensitivity, bool Dark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Fibermetric_Fast_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxThickness, int Level, int StructureSensitivity, bool Dark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_PureBackGround(byte* Src, byte* Dest, int Width, int Height, int Stride, int BlockSize = 8, int Depth = 10, int Contrast = 0, int Colorize = 0, int Standand = 0, int Fast = 0);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe MakeUpDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private void MakeUpDialog_Load(object sender, EventArgs e)
		{
			if (Text.Equals("æå"))
			{
				Locked = true;
				DenoiseLevel.Minimum = -50;
				DenoiseLevel.Maximum = 50;
				DenoiseLevel.Value = 0;
				DenoiseLevelUpDown.Minimum = -50m;
				DenoiseLevelUpDown.Maximum = 50m;
				DenoiseLevelUpDown.Value = 0m;
				label1.Text = "äº®åº¦";
				WhitenLevel.Minimum = -50;
				WhitenLevel.Maximum = 50;
				WhitenLevel.Value = 0;
				WhitenLevelUpDown.Minimum = -50m;
				WhitenLevelUpDown.Maximum = 50m;
				WhitenLevelUpDown.Value = 0m;
				label2.Text = "å¯¹æ¯åº¦";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 20;
				TextureLevel.Value = 10;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 20m;
				TextureLevelUpDown.Value = 10m;
				label3.Text = "åå¾";
				ChkTexture.Visible = false;
				ChkFast.Visible = false;
				Locked = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("çº¤ç»´åæ"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 1;
				DenoiseLevel.Maximum = 100;
				DenoiseLevel.Value = 10;
				DenoiseLevelUpDown.Minimum = 1m;
				DenoiseLevelUpDown.Maximum = 100m;
				DenoiseLevelUpDown.Value = 10m;
				label1.Text = "æå¤§å°ºåº¦";
				WhitenLevel.Minimum = 1;
				WhitenLevel.Maximum = 20;
				WhitenLevel.Value = 1;
				WhitenLevelUpDown.Minimum = 1m;
				WhitenLevelUpDown.Maximum = 20m;
				WhitenLevelUpDown.Value = 1m;
				label2.Text = "å°ºåº¦æ°é";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 255;
				TextureLevel.Value = 25;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 255m;
				TextureLevelUpDown.Value = 25m;
				label3.Text = "ç»ææææ§";
				ChkTexture.Visible = false;
				ChkFast.Visible = false;
				ChkStandand.Text = "ææ§ï¼æ";
				ChkStandand.Visible = true;
				Optimization.Enabled = false;
				OptPureC.Enabled = false;
				Opt1.Text = "Matlabç";
				Opt2.Text = "åå§ä½èç";
				Opt1.Checked = true;
				RadioButton opt = Opt1;
				bool visible = (Opt2.Visible = true);
				opt.Visible = visible;
				Locked = false;
			}
			else if (Text.Equals("å°æ³¢éå"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 1;
				DenoiseLevel.Maximum = 10;
				DenoiseLevel.Value = 5;
				DenoiseLevelUpDown.Minimum = 1m;
				DenoiseLevelUpDown.Maximum = 10m;
				DenoiseLevelUpDown.Value = 5m;
				label1.Text = "å±æ°";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = 200;
				WhitenLevel.Value = 50;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = 200m;
				WhitenLevelUpDown.Value = 50m;
				label2.Text = "æ°é";
				TextureLevel.Minimum = 0;
				TextureLevel.Maximum = 200;
				TextureLevel.Value = 50;
				TextureLevelUpDown.Minimum = 0m;
				TextureLevelUpDown.Maximum = 200m;
				TextureLevelUpDown.Value = 50m;
				label3.Text = "éå¼";
				ChkTexture.Visible = false;
				Locked = false;
				ChkFast.Visible = false;
				ChkStandand.Text = "åºäºå°æ³¢åè§£";
				ChkStandand.Visible = true;
				Optimization.Enabled = true;
				OptPureC.Enabled = false;
			}
			else if (Text.Equals("Hysteresis Threshold"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 0;
				DenoiseLevel.Maximum = 255;
				DenoiseLevel.Value = 10;
				DenoiseLevelUpDown.Minimum = 0m;
				DenoiseLevelUpDown.Maximum = 255m;
				DenoiseLevelUpDown.Value = 10m;
				label1.Text = "ä½éå¼";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = 255;
				WhitenLevel.Value = 20;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = 255m;
				WhitenLevelUpDown.Value = 20m;
				label2.Text = "é«éå¼";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 255;
				TextureLevel.Value = 10;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 255m;
				TextureLevelUpDown.Value = 10m;
				label3.Text = "æå¤§è·ç¦»";
				ChkTexture.Visible = false;
				Locked = false;
				ChkFast.Visible = false;
			}
			else if (Text.Equals("çº¯åèæ¯"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 4;
				DenoiseLevel.Maximum = 64;
				DenoiseLevel.Value = 8;
				DenoiseLevelUpDown.Minimum = 4m;
				DenoiseLevelUpDown.Maximum = 64m;
				DenoiseLevelUpDown.Value = 8m;
				label1.Text = "åå¤§å°";
				WhitenLevel.Minimum = 2;
				WhitenLevel.Maximum = 30;
				WhitenLevel.Value = 10;
				WhitenLevelUpDown.Minimum = 2m;
				WhitenLevelUpDown.Maximum = 30m;
				WhitenLevelUpDown.Value = 10m;
				label2.Text = "åç§»";
				TextureLevel.Minimum = 0;
				TextureLevel.Maximum = 16;
				TextureLevel.Value = 8;
				TextureLevelUpDown.Minimum = 0m;
				TextureLevelUpDown.Maximum = 16m;
				TextureLevelUpDown.Value = 8m;
				label3.Text = "å¯¹æ¯åº¦";
				ChkTexture.Text = "ä¿çå½©è²";
				ChkTexture.Checked = false;
				ChkStandand.Visible = true;
				ChkTexture.Visible = true;
				ChkFast.Visible = true;
				Locked = false;
			}
			else if (Text.Equals("Sauvolaäºå¼å") || Text.Equals("Wanäºå¼å"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 1;
				DenoiseLevel.Maximum = 90;
				DenoiseLevel.Value = 20;
				DenoiseLevelUpDown.Minimum = 1m;
				DenoiseLevelUpDown.Maximum = 90m;
				DenoiseLevelUpDown.Value = 20m;
				label1.Text = "åå¾";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = 100;
				WhitenLevel.Value = 20;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = 100m;
				WhitenLevelUpDown.Value = 20m;
				label2.Text = "ç³»æ°";
				TextureLevel.Minimum = 0;
				TextureLevel.Maximum = 255;
				TextureLevel.Value = 128;
				TextureLevelUpDown.Minimum = 0m;
				TextureLevelUpDown.Maximum = 255m;
				TextureLevelUpDown.Value = 128m;
				label3.Text = "æå¤§å±é¨åæ¹å·®";
				ChkTexture.Text = "èªå¨æ¹å·®";
				ChkTexture.Checked = false;
				ChkStandand.Visible = false;
				ChkTexture.Visible = true;
				ChkFast.Visible = false;
				Locked = false;
			}
			else if (Text.Equals("æååº¦"))
			{
				Locked = true;
				DenoiseLevel.Minimum = -2000;
				DenoiseLevel.Maximum = 2000;
				DenoiseLevel.Value = 0;
				DenoiseLevelUpDown.Minimum = -2000m;
				DenoiseLevelUpDown.Maximum = 2000m;
				DenoiseLevelUpDown.Value = 0m;
				label1.Text = "æååº¦";
				WhitenLevel.Minimum = -500;
				WhitenLevel.Maximum = 500;
				WhitenLevel.Value = 0;
				WhitenLevelUpDown.Minimum = -500m;
				WhitenLevelUpDown.Maximum = 500m;
				WhitenLevelUpDown.Value = 0m;
				label2.Text = "åç§»";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 999;
				TextureLevel.Value = 100;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 999m;
				TextureLevelUpDown.Value = 100m;
				label3.Text = "Gamma";
				ChkTexture.Visible = false;
				ChkFast.Visible = false;
				Locked = false;
				OptAvx.Checked = true;
				Optimization.Enabled = true;
				OptSSE.Enabled = false;
			}
			else if (Text.Equals("å¾åæ¨¡ç³"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 1;
				DenoiseLevel.Maximum = 100;
				DenoiseLevel.Value = 20;
				DenoiseLevelUpDown.Minimum = 1m;
				DenoiseLevelUpDown.Maximum = 100m;
				DenoiseLevelUpDown.Value = 20m;
				label1.Text = "æ¨¡ç³ç¨åº¦";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = canvas.Image.Width;
				WhitenLevel.Value = canvas.Image.Width / 2;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = canvas.Image.Width;
				WhitenLevelUpDown.Value = canvas.Image.Width / 2;
				label2.Text = "Xåç§»";
				TextureLevel.Minimum = 0;
				TextureLevel.Maximum = canvas.Image.Height;
				TextureLevel.Value = canvas.Image.Height / 2;
				TextureLevelUpDown.Minimum = 0m;
				TextureLevelUpDown.Maximum = canvas.Image.Height;
				TextureLevelUpDown.Value = canvas.Image.Height / 2;
				label3.Text = "Yåç§»";
				ChkTexture.Visible = false;
				ChkFast.Visible = false;
				Locked = false;
				OptSSE.Checked = true;
				Optimization.Enabled = true;
				OptAvx.Enabled = false;
			}
			else if (Text.Equals("è²ç¸é¥±ååº¦"))
			{
				Locked = true;
				DenoiseLevel.Minimum = -180;
				DenoiseLevel.Maximum = 180;
				DenoiseLevel.Value = 0;
				DenoiseLevelUpDown.Minimum = -180m;
				DenoiseLevelUpDown.Maximum = 180m;
				DenoiseLevelUpDown.Value = 0m;
				label1.Text = "è²ç¸";
				WhitenLevel.Minimum = -100;
				WhitenLevel.Maximum = 100;
				WhitenLevel.Value = 0;
				WhitenLevelUpDown.Minimum = -100m;
				WhitenLevelUpDown.Maximum = 100m;
				WhitenLevelUpDown.Value = 0m;
				label2.Text = "é¥±ååº¦";
				TextureLevel.Minimum = -100;
				TextureLevel.Maximum = 100;
				TextureLevel.Value = 0;
				TextureLevelUpDown.Minimum = -100m;
				TextureLevelUpDown.Maximum = 100m;
				TextureLevelUpDown.Value = 0m;
				label3.Text = "äº®åº¦";
				ChkTexture.Visible = false;
				Locked = false;
				ChkFast.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("é©¬èµå"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 0;
				DenoiseLevel.Maximum = 360;
				DenoiseLevel.Value = 45;
				DenoiseLevelUpDown.Minimum = 0m;
				DenoiseLevelUpDown.Maximum = 360m;
				DenoiseLevelUpDown.Value = 45m;
				label1.Text = "è§åº¦";
				WhitenLevel.Minimum = 1;
				WhitenLevel.Maximum = 200;
				WhitenLevel.Value = 32;
				WhitenLevelUpDown.Minimum = 1m;
				WhitenLevelUpDown.Maximum = 200m;
				WhitenLevelUpDown.Value = 32m;
				label2.Text = "æ°´å¹³å°ºå¯¸";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 200;
				TextureLevel.Value = 32;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 200m;
				TextureLevelUpDown.Value = 32m;
				label3.Text = "åç´å°ºå¯¸";
				ChkTexture.Visible = false;
				TextureLevel.Enabled = true;
				TextureLevelUpDown.Enabled = true;
				label3.Enabled = true;
				Locked = false;
				ChkTexture.Visible = false;
			}
			else if (Text.Equals("æµæ·¡è¡¥æ­£"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 4;
				DenoiseLevel.Maximum = 100;
				DenoiseLevel.Value = 12;
				DenoiseLevelUpDown.Minimum = 4m;
				DenoiseLevelUpDown.Maximum = 100m;
				DenoiseLevelUpDown.Value = 12m;
				label1.Text = "åæ ·æ°";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = 10;
				WhitenLevel.Value = 0;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = 10m;
				WhitenLevelUpDown.Value = 0m;
				label2.Text = "ç»èç¨åº¦";
				TextureLevel.Minimum = 0;
				TextureLevel.Maximum = 255;
				TextureLevel.Value = 2;
				TextureLevelUpDown.Minimum = 0m;
				TextureLevelUpDown.Maximum = 255m;
				TextureLevelUpDown.Value = 2m;
				label3.Text = "Sigma";
				ChkTexture.Visible = false;
				ChkTexture.Checked = false;
				ChkTexture.Text = "éä½åªé³";
				TextureLevel.Enabled = true;
				TextureLevelUpDown.Enabled = true;
				label3.Enabled = true;
				Locked = false;
				ChkTexture.Visible = true;
			}
			else if (Text.Equals("å±é¨ææ®ææ¯æ»¤æ³¢"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 4;
				DenoiseLevel.Maximum = 32;
				DenoiseLevel.Value = 12;
				DenoiseLevelUpDown.Minimum = 4m;
				DenoiseLevelUpDown.Maximum = 32m;
				DenoiseLevelUpDown.Value = 12m;
				label1.Text = "åæ ·æ°";
				WhitenLevel.Minimum = -200;
				WhitenLevel.Maximum = 400;
				WhitenLevel.Value = 200;
				WhitenLevelUpDown.Minimum = -200m;
				WhitenLevelUpDown.Maximum = 400m;
				WhitenLevelUpDown.Value = 200m;
				label2.Text = "ç»èç¨åº¦";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 100;
				TextureLevel.Value = 10;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 100m;
				TextureLevelUpDown.Value = 10m;
				label3.Text = "Sigma";
				ChkTexture.Visible = false;
				ChkTexture.Checked = false;
				ChkTexture.Text = "éä½åªé³";
				TextureLevel.Enabled = true;
				TextureLevelUpDown.Enabled = true;
				label3.Enabled = true;
				Locked = false;
				ChkTexture.Visible = true;
			}
			else if (Text.Equals("é«é¢å¼ºè°æ»¤æ³¢"))
			{
				Locked = true;
				DenoiseLevel.Minimum = 10;
				DenoiseLevel.Maximum = 300;
				DenoiseLevel.Value = 100;
				DenoiseLevelUpDown.Minimum = 10m;
				DenoiseLevelUpDown.Maximum = 300m;
				DenoiseLevelUpDown.Value = 100m;
				label1.Text = "æªè³é¢ç";
				WhitenLevel.Minimum = 0;
				WhitenLevel.Maximum = 200;
				WhitenLevel.Value = 100;
				WhitenLevelUpDown.Minimum = 0m;
				WhitenLevelUpDown.Maximum = 200m;
				WhitenLevelUpDown.Value = 100m;
				label2.Text = "äº®åº¦";
				TextureLevel.Minimum = 1;
				TextureLevel.Maximum = 500;
				TextureLevel.Value = 200;
				TextureLevelUpDown.Minimum = 1m;
				TextureLevelUpDown.Maximum = 500m;
				TextureLevelUpDown.Value = 200m;
				label3.Text = "æ°é";
				ChkTexture.Visible = false;
				Locked = false;
				ChkFast.Visible = false;
			}
			UpdateCanvas();
		}

		private unsafe void MakeUpDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private unsafe void UpdateCanvas()
		{
			if (Locked)
			{
				return;
			}
			if (ChkPreview.Checked)
			{
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				int num = 1;
				if (ChkSpeed.Checked)
				{
					num = 100;
				}
				TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
				TimeUse.GetCurrentParent().Refresh();
				for (int i = 0; i < num; i++)
				{
					if (OptPureC.Checked)
					{
						if (Text.Equals("æååº¦"))
						{
							IM_Exposure_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)DenoiseLevel.Value * 0.01f, (float)WhitenLevel.Value * 0.001f, (float)TextureLevel.Value * 0.01f);
						}
						else if (Text.Equals("æå"))
						{
							IM_SoftGlow_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, TextureLevel.Value, DenoiseLevel.Value, WhitenLevel.Value);
						}
						else if (Text.Equals("è²ç¸é¥±ååº¦"))
						{
							IM_AdjustHSL_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (Text.Equals("å¾åæ¨¡ç³"))
						{
							IM_RadialBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
					}
					else if (OptAvx.Checked)
					{
						if (Text.Equals("æååº¦"))
						{
							IM_Exposure_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)DenoiseLevel.Value * 0.01f, (float)WhitenLevel.Value * 0.001f, (float)TextureLevel.Value * 0.01f);
						}
						else if (Text.Equals("æå"))
						{
							IM_SoftGlow_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, TextureLevel.Value, DenoiseLevel.Value, WhitenLevel.Value);
						}
						else if (Text.Equals("å°æ³¢éå"))
						{
							if (ChkStandand.Checked)
							{
								IM_WaveletSharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
							}
							else
							{
								IM_GaussLaplacianPyramid_Sharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
							}
						}
					}
					else
					{
						if (!OptSSE.Checked)
						{
							continue;
						}
						if (Text.Equals("æå"))
						{
							IM_SoftGlow_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, TextureLevel.Value, DenoiseLevel.Value, WhitenLevel.Value);
						}
						else if (Text.Equals("å¾åæ¨¡ç³"))
						{
							IM_RadialBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (Text.Equals("é«é¢å¼ºè°æ»¤æ³¢"))
						{
							IM_HighFrequencyEmphasizeFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (Text.Equals("å±é¨ææ®ææ¯æ»¤æ³¢"))
						{
							IM_LocalLaplacianFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, (float)TextureLevel.Value * 0.01f, ChkTexture.Checked);
						}
						else if (Text.Equals("çº¯åèæ¯"))
						{
							IM_PureBackGround(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value, ChkTexture.Checked ? 1 : 0, ChkStandand.Checked ? 1 : 0, (!ChkFast.Checked) ? 1 : 0);
						}
						else if (Text.Equals("çº¤ç»´åæ"))
						{
							if (Opt1.Checked)
							{
								IM_Fibermetric_Fast_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value, ChkStandand.Checked);
							}
							else
							{
								IM_Fibermetric_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value, ChkStandand.Checked);
							}
						}
						else if (Text.Equals("å°æ³¢éå"))
						{
							if (ChkStandand.Checked)
							{
								IM_WaveletSharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
							}
							else
							{
								IM_GaussLaplacianPyramid_Sharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
							}
						}
						else if (Text.Equals("Hysteresis Threshold"))
						{
							IM_HysteresisThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (Text.Equals("Sauvolaäºå¼å"))
						{
							int num2 = 0;
							num2 = (ChkTexture.Checked ? (-1) : TextureLevel.Value);
							IM_SauvolaAdaptiveThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, out num2);
							if (ChkTexture.Checked)
							{
								TextureLevel.Value = num2;
								TextureLevelUpDown.Value = num2;
							}
						}
						else if (Text.Equals("Wanäºå¼å"))
						{
							int num3 = 0;
							num3 = (ChkTexture.Checked ? (-1) : TextureLevel.Value);
							IM_WanAdaptiveThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, out num3);
							if (ChkTexture.Checked)
							{
								TextureLevel.Value = num3;
								TextureLevelUpDown.Value = num3;
							}
						}
						else if (Text.Equals("è²ç¸é¥±ååº¦"))
						{
							IM_AdjustHSL_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (Text.Equals("é©¬èµå"))
						{
							IM_Mosaic(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
						else if (!ChkTexture.Checked)
						{
							IM_MakeUp(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value);
						}
						else
						{
							IM_NewMakeUp(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, DenoiseLevel.Value, WhitenLevel.Value, TextureLevel.Value);
						}
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void DenoiseLevelUpDown_ValueChanged(object sender, EventArgs e)
		{
			DenoiseLevel.Value = (int)DenoiseLevelUpDown.Value;
			UpdateCanvas();
		}

		private void DenoiseLevel_Scroll(object sender, EventArgs e)
		{
			DenoiseLevelUpDown.Value = DenoiseLevel.Value;
		}

		private void WhitenLevelUpDown_ValueChanged(object sender, EventArgs e)
		{
			WhitenLevel.Value = (int)WhitenLevelUpDown.Value;
			UpdateCanvas();
		}

		private void WhitenLevel_Scroll(object sender, EventArgs e)
		{
			WhitenLevelUpDown.Value = WhitenLevel.Value;
		}

		private void ChkTexture_CheckedChanged(object sender, EventArgs e)
		{
			if (Text.Equals("Sauvolaäºå¼å"))
			{
				if (ChkTexture.Checked)
				{
					TextureLevelUpDown.Enabled = false;
					TextureLevel.Enabled = false;
				}
				else
				{
					TextureLevelUpDown.Enabled = true;
					TextureLevel.Enabled = true;
				}
			}
			else if (!Text.Equals("çº¯åèæ¯"))
			{
				label3.Enabled = ChkTexture.Checked;
				TextureLevel.Enabled = ChkTexture.Checked;
				TextureLevelUpDown.Enabled = ChkTexture.Checked;
			}
			UpdateCanvas();
		}

		private void TextureLevel_Scroll(object sender, EventArgs e)
		{
			TextureLevelUpDown.Value = TextureLevel.Value;
		}

		private void TextureLevelUpDown_ValueChanged(object sender, EventArgs e)
		{
			TextureLevel.Value = (int)TextureLevelUpDown.Value;
			UpdateCanvas();
		}

		private void btnOk_Click(object sender, EventArgs e)
		{
		}

		private void ChkStandand_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkFast_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Optimization_Enter(object sender, EventArgs e)
		{
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Opt1_CheckedChanged(object sender, EventArgs e)
		{
			if (Opt1.Checked)
			{
				UpdateCanvas();
			}
		}

		private void Opt2_CheckedChanged(object sender, EventArgs e)
		{
			if (Opt2.Checked)
			{
				UpdateCanvas();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.TextureLevelUpDown = new System.Windows.Forms.NumericUpDown();
			this.TextureLevel = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.WhitenLevelUpDown = new System.Windows.Forms.NumericUpDown();
			this.WhitenLevel = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.DenoiseLevelUpDown = new System.Windows.Forms.NumericUpDown();
			this.DenoiseLevel = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkTexture = new System.Windows.Forms.CheckBox();
			this.ChkStandand = new System.Windows.Forms.CheckBox();
			this.ChkFast = new System.Windows.Forms.CheckBox();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.Opt1 = new System.Windows.Forms.RadioButton();
			this.Opt2 = new System.Windows.Forms.RadioButton();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.TextureLevelUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.TextureLevel).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.WhitenLevelUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.WhitenLevel).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DenoiseLevelUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DenoiseLevel).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(465, 60);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(97, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(465, 20);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(97, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.btnOk.Click += new System.EventHandler(btnOk_Click);
			this.groupBox.Controls.Add(this.Opt2);
			this.groupBox.Controls.Add(this.Opt1);
			this.groupBox.Controls.Add(this.TextureLevelUpDown);
			this.groupBox.Controls.Add(this.TextureLevel);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.WhitenLevelUpDown);
			this.groupBox.Controls.Add(this.WhitenLevel);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.DenoiseLevelUpDown);
			this.groupBox.Controls.Add(this.DenoiseLevel);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(425, 241);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.TextureLevelUpDown.Location = new System.Drawing.Point(360, 145);
			this.TextureLevelUpDown.Maximum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.TextureLevelUpDown.Name = "TextureLevelUpDown";
			this.TextureLevelUpDown.Size = new System.Drawing.Size(50, 21);
			this.TextureLevelUpDown.TabIndex = 11;
			this.TextureLevelUpDown.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.TextureLevelUpDown.ValueChanged += new System.EventHandler(TextureLevelUpDown_ValueChanged);
			this.TextureLevel.AutoSize = false;
			this.TextureLevel.LargeChange = 2;
			this.TextureLevel.Location = new System.Drawing.Point(8, 177);
			this.TextureLevel.Name = "TextureLevel";
			this.TextureLevel.Size = new System.Drawing.Size(402, 26);
			this.TextureLevel.TabIndex = 10;
			this.TextureLevel.TickFrequency = 0;
			this.TextureLevel.Value = 5;
			this.TextureLevel.Scroll += new System.EventHandler(TextureLevel_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 145);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(65, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "è´¨æç¨åº¦ï¼";
			this.WhitenLevelUpDown.Location = new System.Drawing.Point(360, 84);
			this.WhitenLevelUpDown.Maximum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.WhitenLevelUpDown.Name = "WhitenLevelUpDown";
			this.WhitenLevelUpDown.Size = new System.Drawing.Size(50, 21);
			this.WhitenLevelUpDown.TabIndex = 8;
			this.WhitenLevelUpDown.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.WhitenLevelUpDown.ValueChanged += new System.EventHandler(WhitenLevelUpDown_ValueChanged);
			this.WhitenLevel.AutoSize = false;
			this.WhitenLevel.LargeChange = 2;
			this.WhitenLevel.Location = new System.Drawing.Point(8, 116);
			this.WhitenLevel.Name = "WhitenLevel";
			this.WhitenLevel.Size = new System.Drawing.Size(402, 26);
			this.WhitenLevel.TabIndex = 7;
			this.WhitenLevel.TickFrequency = 0;
			this.WhitenLevel.Value = 5;
			this.WhitenLevel.Scroll += new System.EventHandler(WhitenLevel_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(65, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "ç¾ç½ç¨åº¦ï¼";
			this.DenoiseLevelUpDown.Location = new System.Drawing.Point(360, 29);
			this.DenoiseLevelUpDown.Maximum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.DenoiseLevelUpDown.Name = "DenoiseLevelUpDown";
			this.DenoiseLevelUpDown.Size = new System.Drawing.Size(50, 21);
			this.DenoiseLevelUpDown.TabIndex = 4;
			this.DenoiseLevelUpDown.Value = new decimal(new int[4] { 5, 0, 0, 0 });
			this.DenoiseLevelUpDown.ValueChanged += new System.EventHandler(DenoiseLevelUpDown_ValueChanged);
			this.DenoiseLevel.AutoSize = false;
			this.DenoiseLevel.LargeChange = 2;
			this.DenoiseLevel.Location = new System.Drawing.Point(8, 55);
			this.DenoiseLevel.Name = "DenoiseLevel";
			this.DenoiseLevel.Size = new System.Drawing.Size(402, 26);
			this.DenoiseLevel.TabIndex = 3;
			this.DenoiseLevel.TickFrequency = 0;
			this.DenoiseLevel.Value = 5;
			this.DenoiseLevel.Scroll += new System.EventHandler(DenoiseLevel_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(65, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "ç£¨ç®ç¨åº¦ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(465, 128);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkTexture.AutoSize = true;
			this.ChkTexture.Checked = true;
			this.ChkTexture.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkTexture.Location = new System.Drawing.Point(465, 183);
			this.ChkTexture.Name = "ChkTexture";
			this.ChkTexture.Size = new System.Drawing.Size(72, 16);
			this.ChkTexture.TabIndex = 18;
			this.ChkTexture.Text = "è´¨æç£¨ç®";
			this.ChkTexture.UseVisualStyleBackColor = true;
			this.ChkTexture.CheckedChanged += new System.EventHandler(ChkTexture_CheckedChanged);
			this.ChkStandand.AutoSize = true;
			this.ChkStandand.Location = new System.Drawing.Point(465, 156);
			this.ChkStandand.Name = "ChkStandand";
			this.ChkStandand.Size = new System.Drawing.Size(60, 16);
			this.ChkStandand.TabIndex = 19;
			this.ChkStandand.Text = "æ åå";
			this.ChkStandand.UseVisualStyleBackColor = true;
			this.ChkStandand.Visible = false;
			this.ChkStandand.CheckedChanged += new System.EventHandler(ChkStandand_CheckedChanged);
			this.ChkFast.AutoSize = true;
			this.ChkFast.Location = new System.Drawing.Point(465, 210);
			this.ChkFast.Name = "ChkFast";
			this.ChkFast.Size = new System.Drawing.Size(72, 16);
			this.ChkFast.TabIndex = 20;
			this.ChkFast.Text = "æ´å ç²¾ç»";
			this.ChkFast.UseVisualStyleBackColor = true;
			this.ChkFast.CheckedChanged += new System.EventHandler(ChkFast_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(465, 101);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(72, 16);
			this.ChkSpeed.TabIndex = 25;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(12, 259);
			this.Optimization.Name = "Optimization";
			this.Optimization.Size = new System.Drawing.Size(425, 74);
			this.Optimization.TabIndex = 24;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.Optimization.Enter += new System.EventHandler(Optimization_Enter);
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(322, 34);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(89, 16);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(205, 34);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(89, 16);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(22, 34);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(161, 16);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.Opt1.AutoSize = true;
			this.Opt1.Checked = true;
			this.Opt1.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.Opt1.Location = new System.Drawing.Point(22, 208);
			this.Opt1.Margin = new System.Windows.Forms.Padding(2);
			this.Opt1.Name = "Opt1";
			this.Opt1.Size = new System.Drawing.Size(59, 16);
			this.Opt1.TabIndex = 43;
			this.Opt1.TabStop = true;
			this.Opt1.Text = "ä¸­é´å¼";
			this.Opt1.UseVisualStyleBackColor = true;
			this.Opt1.Visible = false;
			this.Opt1.CheckedChanged += new System.EventHandler(Opt1_CheckedChanged);
			this.Opt2.AutoSize = true;
			this.Opt2.Checked = true;
			this.Opt2.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.Opt2.Location = new System.Drawing.Point(266, 208);
			this.Opt2.Margin = new System.Windows.Forms.Padding(2);
			this.Opt2.Name = "Opt2";
			this.Opt2.Size = new System.Drawing.Size(59, 16);
			this.Opt2.TabIndex = 44;
			this.Opt2.TabStop = true;
			this.Opt2.Text = "å¹³åå¼";
			this.Opt2.UseVisualStyleBackColor = true;
			this.Opt2.Visible = false;
			this.Opt2.CheckedChanged += new System.EventHandler(Opt2_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(570, 345);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkFast);
			base.Controls.Add(this.ChkStandand);
			base.Controls.Add(this.ChkTexture);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "MakeUpDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "ç£¨ç®";
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(MakeUpDialog_FormClosed);
			base.Load += new System.EventHandler(MakeUpDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.TextureLevelUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.TextureLevel).EndInit();
			((System.ComponentModel.ISupportInitialize)this.WhitenLevelUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.WhitenLevel).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DenoiseLevelUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DenoiseLevel).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class LocalBinaryDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Busy = true;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private NumericUpDown CofUpDown;

		private TrackBar Cof;

		private Label label2;

		private CheckBox ChkPreview;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WellnerLocalThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Cof = 20);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NiblackAdaptiveThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int K = 20);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe LocalBinaryDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			Busy = true;
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (Busy)
			{
				return;
			}
			if (ChkPreview.Checked)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				if (Text == "Niblackå±é¨äºå¼")
				{
					IM_NiblackAdaptiveThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Cof.Value);
				}
				else if (Text == "Wellnerå±é¨äºå¼")
				{
					IM_WellnerLocalThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Cof.Value);
				}
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (Text == "Niblackå±é¨äºå¼")
			{
				label2.Text = "K";
				Cof.Maximum = 100;
				CofUpDown.Maximum = 100m;
				Cof.Value = 25;
				CofUpDown.Value = 25m;
				Radius.Maximum = 90;
				RadiusUpDown.Maximum = 90m;
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void SubSampleUpDown_ValueChanged(object sender, EventArgs e)
		{
			Cof.Value = (int)CofUpDown.Value;
			UpdateCanvas();
		}

		private void SubSample_Scroll(object sender, EventArgs e)
		{
			CofUpDown.Value = Cof.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CofUpDown = new System.Windows.Forms.NumericUpDown();
			this.Cof = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.CofUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Cof).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(306, 67);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(55, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(306, 23);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(55, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.CofUpDown);
			this.groupBox.Controls.Add(this.Cof);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(275, 152);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CofUpDown.Location = new System.Drawing.Point(195, 84);
			this.CofUpDown.Maximum = new decimal(new int[4] { 500, 0, 0, 0 });
			this.CofUpDown.Name = "CofUpDown";
			this.CofUpDown.Size = new System.Drawing.Size(50, 21);
			this.CofUpDown.TabIndex = 8;
			this.CofUpDown.Value = new decimal(new int[4] { 150, 0, 0, 0 });
			this.CofUpDown.ValueChanged += new System.EventHandler(SubSampleUpDown_ValueChanged);
			this.Cof.AutoSize = false;
			this.Cof.LargeChange = 2;
			this.Cof.Location = new System.Drawing.Point(8, 116);
			this.Cof.Maximum = 500;
			this.Cof.Name = "Cof";
			this.Cof.Size = new System.Drawing.Size(250, 26);
			this.Cof.TabIndex = 7;
			this.Cof.TickFrequency = 0;
			this.Cof.Value = 150;
			this.Cof.Scroll += new System.EventHandler(SubSample_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(77, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "äº®åº¦å·®éå¶ï¼";
			this.RadiusUpDown.Location = new System.Drawing.Point(195, 29);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 256, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 20, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(8, 55);
			this.Radius.Maximum = 256;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(250, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 20;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(306, 128);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(374, 177);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "LocalBinaryDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "å±é¨äºå¼æ»¤æ³¢";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.CofUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Cof).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class FrmMain : Form
	{
		public struct IM_Bitmap
		{
			public int Width;

			public int Height;

			public int Stride;

			public unsafe byte* Scan0;

			public int Reserved;
		}

		private enum LowFrequencyFusionRule
		{
			SrcA,
			SrcB,
			AvgAB
		}

		private enum HighFrequencyFusionRule
		{
			SinglePixelAbsMax,
			LocalAbsMaxWithConsistencyCheck,
			LocalSimilarity
		}

		public int UndoPos;

		public int MaxUndoLength = 2;

		private IContainer components;

		private new ToolStripContainer Container;

		private VScrollBar ScrollV;

		private HScrollBar ScrollH;

		protected internal Canvas MainCanvas;

		private MenuStrip MyMenu;

		private StatusStrip StatusBar;

		private ToolStripStatusLabel pathToolStripStatusLabel;

		private ToolStripStatusLabel mouseToolStripStatusLabel;

		private ToolStripStatusLabel sizeToolStripStatusLabel;

		private ToolStripStatusLabel TimeUse;

		private ToolStripStatusLabel FilePathStatus;

		private ContextMenuStrip zoomContextMenuStrip;

		private ToolStripMenuItem MenuZoom12;

		private ToolStripMenuItem MenuZoom400;

		private ToolStripMenuItem MenuZoom500;

		private ToolStripDropDownButton ZoomFactor;

		private ToolStripMenuItem MenuZoom25;

		private ToolStripMenuItem MenuZoom50;

		private ToolStripMenuItem MenuZoom100;

		private ToolStripMenuItem MenuZoom200;

		private ToolStripMenuItem MenuZoom300;

		private ToolStripMenuItem MenuZoom1000;

		private ContextMenuStrip ChannelMenu;

		private ToolStripMenuItem MenuGrayMode;

		private ToolStripMenuItem MenuBGR;

		private ToolStripMenuItem MenuBGRA;

		private ToolStripDropDownButton ChannelStatus;

		private ToolStripMenuItem MenuBlur;

		private ToolStripMenuItem MenuExpBlur;

		private ToolStripMenuItem MenuGaussBlur;

		private ToolStripMenuItem MenuEdit;

		private ToolStripMenuItem MenuTranspose;

		private ToolStripMenuItem MenuResample;

		private ToolStripMenuItem fileToolStripMenuItem;

		private ToolStripMenuItem MenuLoad;

		private ToolStripMenuItem MenuSave;

		private ToolStripMenuItem MenuExit;

		private ToolStripMenuItem MenuFlipLeftRight;

		private ToolStripMenuItem MenuOther;

		private ToolStripMenuItem MenuHighPass;

		private ToolStripMenuItem MenuAdjust;

		private ToolStripMenuItem MenuCurve;

		private ToolStripMenuItem MenuDesaturate;

		private ToolStripMenuItem MenuBoxBlur;

		private ToolStripMenuItem MenuAverageBlur;

		private ToolStripMenuItem MenuMaxFilter;

		private ToolStripMenuItem MenuMinFilter;

		private ToolStripMenuItem MenuAutoEnhanceColors;

		private ToolStripMenuItem MenuEnhance;

		private ToolStripMenuItem MenuBinary;

		private ToolStripMenuItem MenuVibrance;

		private ToolStripMenuItem MenuStylize;

		private ToolStripMenuItem MenuExposal;

		private ToolStripMenuItem MenuEdgeDetection;

		private ToolStripMenuItem MenuBitBlt;

		private ToolStripMenuItem MenuRotate180;

		private ToolStripMenuItem MenuRotate90;

		private ToolStripMenuItem Menu270;

		private ToolStripMenuItem MenuFlipTopBottom;

		private ToolStripMenuItem MenuAdjustBrightnessAndContrast;

		private ToolStripMenuItem MenuInvert;

		private ToolStripMenuItem MenuSoftglow;

		private ToolStripMenuItem MenuRotate;

		private ToolStripMenuItem MenuMotionBlur;

		private ToolStripMenuItem MenuAutoLevel;

		private ToolStripMenuItem MenuAWB_GrayWorld;

		private ToolStripMenuItem MenuZoomBlur;

		private ToolStripMenuItem MenuKuwaharaFilter;

		private ToolStripMenuItem MenuEdge_HighPass_Image;

		private ToolStripMenuItem MenuSobel;

		private ToolStripMenuItem MenuSalientRegionDetection;

		private ToolStripMenuItem MenuFT;

		private ToolStripMenuItem MenuOilPainting;

		private ToolStripMenuItem MenuLocalBinary;

		private ToolStripMenuItem MenuWellnerAdaptiveThreshold;

		private ToolStripMenuItem MenuNiblackAdaptiveThreshold;

		private ToolStripMenuItem MenuBernsenAdaptiveThreshold;

		private ToolStripMenuItem MenuGlobalBinary;

		private ToolStripMenuItem MenuFeature;

		private ToolStripMenuItem MenuGetOutline;

		private ToolStripMenuItem MenuShowEuclideanDistanceMap;

		private ToolStripMenuItem MenuProcessing;

		private ToolStripMenuItem MenuClearIsolatePoint;

		private ToolStripMenuItem MenuErode;

		private ToolStripMenuItem MenuDilate;

		private ToolStripMenuItem MenuFillHole;

		private ToolStripMenuItem MenuEdgeCanny;

		private ToolStripMenuItem MenuHistgram;

		private ToolStripMenuItem MenuLut;

		private ToolStripMenuItem MenuLut2D;

		private ToolStripMenuItem MenuOpen;

		private ToolStripMenuItem MenuClose;

		private ToolStripMenuItem MenuPhotoCopy;

		private ToolStripMenuItem MenuRangeFilter;

		private ToolStripMenuItem MenuGlowingEdges;

		private ToolStripMenuItem MenuTraceContour;

		private ToolStripMenuItem MenuBinaryInfo;

		private ToolStripMenuItem HistogramEqualization;

		private ToolStripMenuItem MenuSmartBlur;

		private ToolStripMenuItem MenuAutoContrast;

		private ToolStripMenuItem MenuHistGramMatching;

		private ToolStripMenuItem MenuExposure;

		private ToolStripMenuItem MenuLinearBlur;

		private ToolStripMenuItem toolStripMenuItem2;

		private ToolStripMenuItem toolStripMenuItem3;

		private ToolStripMenuItem MenuHqnx;

		private ToolStripMenuItem MenuAutoGammaCorrection;

		private ToolStripMenuItem MenuDisOrder;

		private ToolStripMenuItem testToolStripMenuItem;

		private ToolStripMenuItem MenuMosaic;

		private ToolStripMenuItem MenuAdjustHSL;

		private ToolStripMenuItem MenuIM_SauvolaAdaptiveThresholding;

		private ToolStripMenuItem MenuThinZhang;

		private ToolStripMenuItem MenuThinGuo;

		private ToolStripMenuItem MenuDynamicThreshold;

		private ToolStripMenuItem MenuVarLocalThresholding;

		private ToolStripMenuItem MenuHysteresisThresholding;

		private ToolStripMenuItem morphologicalToolStripMenuItem;

		private ToolStripMenuItem MenuImageReconstruction;

		private ToolStripMenuItem MenuRegionalMax;

		private ToolStripMenuItem MenuRegionalMin;

		private ToolStripMenuItem MenuHMax;

		private ToolStripMenuItem MenuHMin;

		private ToolStripMenuItem MenuExtendedMax;

		private ToolStripMenuItem MenuExtendedMin;

		private ToolStripMenuItem MenuExtendFillHole;

		private ToolStripMenuItem MenuExtendClearBorder;

		private ToolStripMenuItem MenuImposeMin;

		private ToolStripMenuItem MenuDoubleThresholding;

		private ToolStripMenuItem MenuTopHat;

		private ToolStripMenuItem MenuBlackHat;

		private ToolStripMenuItem MennUltimateErodedSet;

		private ToolStripMenuItem MenuMorph;

		private ToolStripMenuItem MenuMajority;

		private ToolStripMenuItem MenuSharpen;

		private ToolStripMenuItem MenuEasySharpen;

		private ToolStripMenuItem MenuMultiScaleSharpen;

		private ToolStripMenuItem MenuHighPassSharpen;

		private ToolStripMenuItem MenuEPFSharpen;

		private ToolStripMenuItem MenuMedianSharpen;

		private ToolStripMenuItem MenuUnsharpMask;

		private ToolStripMenuItem MenuRadiusSharpen;

		private ToolStripMenuItem MenuDenoise;

		private ToolStripMenuItem MenuGuideFilter;

		private ToolStripMenuItem MenuLeeAdditvieNoiseFilter;

		private ToolStripMenuItem MenuCurvatureFilter;

		private ToolStripMenuItem MenuWeightedMedianBlur;

		private ToolStripMenuItem MenuSeparableBilateralFilter;

		private ToolStripMenuItem MenuDomainTransformFilter;

		private ToolStripMenuItem MenuAnisotropicDiffusion3X3;

		private ToolStripMenuItem MenuDeBlocking;

		private ToolStripMenuItem MenuHdr;

		private ToolStripMenuItem tonemapGuidedFilterToolStripMenuItem;

		private ToolStripMenuItem Menu_TonemapDrago;

		private ToolStripMenuItem toolStripMenuItem4;

		private ToolStripMenuItem MenuHazeRemovalBasedOnDarkChannelPrior;

		private ToolStripMenuItem MenuHazeRemovalBasedonContrastEnhancement;

		private ToolStripMenuItem lowLightImageEnhancementToolStripMenuItem;

		private ToolStripMenuItem MenuBacklightRepair;

		private ToolStripMenuItem MenuIM_ALTM_Retinex_SSE;

		private ToolStripMenuItem MenuIM_LocalExponentialCorrection_SSE;

		private ToolStripMenuItem MenuRetinex;

		private ToolStripMenuItem MenuFrankleMccannRetinex;

		private ToolStripMenuItem detailEnhancementToolStripMenuItem;

		private ToolStripMenuItem MenuEnhancedCLAHE;

		private ToolStripMenuItem toolStripMenuItem1;

		private ToolStripMenuItem MenuIM_LSD_SSE;

		private ToolStripMenuItem MenuIM_EnhanceBasedOnErodeAndDilate;

		private ToolStripMenuItem MenuIM_EnhanceContrastBasedonTopBotHat;

		private ToolStripMenuItem MenuUnderWaterImageEnhancement;

		private ToolStripMenuItem miscToolStripMenuItem;

		private ToolStripMenuItem MenuDevignetting;

		private ToolStripMenuItem MenuMakeUp;

		private ToolStripMenuItem Median;

		private ToolStripMenuItem MUSCIA;

		private ToolStripMenuItem MenuFFT;

		private ToolStripMenuItem MenuShowFFT;

		private ToolStripMenuItem MenuFFTConv2;

		private ToolStripMenuItem MenuButterworthLowPass;

		private ToolStripMenuItem MenuAddBlindWaterMark;

		private ToolStripMenuItem MenuHighFrequencyEmphasizeFilter;

		private ToolStripMenuItem MenuBandPassFilter;

		private ToolStripMenuItem MenuTextureRemoval;

		private ToolStripMenuItem MenuHomomorphicFiltering;

		private ToolStripMenuItem MenuMultImage;

		private ToolStripMenuItem MenuBlend;

		private ToolStripMenuItem MenuIM_LaplacePyramidFusion;

		private ToolStripMenuItem MenuNCC;

		private ToolStripMenuItem MenuLaplacePyramidFusionWithMask;

		private ToolStripMenuItem MenuImageInfo;

		private ToolStripMenuItem MenuStdFilter;

		private ToolStripMenuItem MenuSkineArea;

		private ToolStripMenuItem MenuDifferentColorCount;

		private ToolStripMenuItem MenuVectorField;

		private ToolStripMenuItem MenuLawsTextureFilter;

		private ToolStripMenuItem MenuLightCompensation;

		private ToolStripMenuItem MenuMaskDodging;

		private ToolStripMenuItem MenuDestripe;

		private ToolStripMenuItem MenuDeinterlace;

		private ToolStripMenuItem MenuPureBackGround;

		private ToolStripMenuItem MenuImageExtraction;

		private ToolStripMenuItem MenuShadingCorrection;

		private ToolStripMenuItem MenuRemoveBackGround;

		private ToolStripMenuItem MenuSpecularityRemoval;

		private ToolStripMenuItem MenuLayerStyle;

		private ToolStripMenuItem MenuMltiImage;

		private ToolStripMenuItem MenuMaxImage;

		private ToolStripMenuItem MenuMinImage;

		private ToolStripMenuItem MenuAddImage;

		private ToolStripMenuItem MenuSubImage;

		private ToolStripMenuItem MenuSqrtImage;

		private ToolStripMenuItem MenuPowImage;

		private ToolStripMenuItem MenuDivImage;

		private ToolStripMenuItem MenuScaleImage;

		private ToolStripMenuItem MenuAbsDiffImage;

		private ToolStripMenuItem MenuLogImage;

		private ToolStripSeparator toolStripSeparator1;

		private ToolStripMenuItem MenuEntropy;

		private ToolStripMenuItem MenuIlluminateImage;

		private ToolStripMenuItem MenuEdgeBandPass;

		private ToolStripMenuItem imageSegmentationå¾ååå²ToolStripMenuItem;

		private ToolStripMenuItem MenuHCM;

		private ToolStripMenuItem MenuEdgeDeriche;

		private ToolStripMenuItem edgeRobinsonToolStripMenuItem;

		private ToolStripMenuItem MenuEdge_Kirsch;

		private ToolStripMenuItem MenuEdge_Frei_Chen;

		private ToolStripMenuItem MenuEdge_Prewitt;

		private ToolStripMenuItem MenuEdge_Roberts;

		private ToolStripMenuItem MenuEdgeLaplace;

		private ToolStripMenuItem edgeHighPassImageToolStripMenuItem;

		private ToolStripMenuItem MenuEdge_Laplace_of_Gauss;

		private ToolStripMenuItem MenuSymmetry;

		private ToolStripMenuItem MenuEmphasize;

		private ToolStripStatusLabel toolStripStatusLabel1;

		private ToolStripMenuItem MenuNonlinearEnhancement;

		private ToolStripMenuItem MenuDehazeBasedonBoxFilter;

		private ToolStripMenuItem MenuDualThreshold;

		private ToolStripMenuItem MenuFindEdges;

		private ToolStripMenuItem MenuRemoveOutliers;

		private ToolStripMenuItem MenuDerivateGauss;

		private ToolStripMenuItem MenuEstimateNoise;

		private ToolStripMenuItem MenuEstimateTiltAndSlant;

		private ToolStripMenuItem MenuSelectiveBlur;

		private ToolStripMenuItem MenuSurfaceBlur;

		private ToolStripMenuItem MenuShadowAndHighlight;

		private ToolStripMenuItem MenuWaveletSharpen;

		private ToolStripMenuItem MenuGaborFilter;

		private ToolStripMenuItem MenuStandandGaborFilter;

		private ToolStripMenuItem redfieldFractaliusToolStripMenuItem;

		private ToolStripMenuItem MenuLogGaborFilter;

		private ToolStripMenuItem MenuMedianAbsoluteDeviation;

		private ToolStripMenuItem MultiScaleContrastEnhancement;

		private ToolStripMenuItem MenuSharpness;

		private ToolStripMenuItem MenuEdgeScharr;

		private ToolStripMenuItem Undo;

		private ToolStripMenuItem Redo;

		private ToolStripSeparator toolStripSeparator2;

		private ToolStripMenuItem MenuPhansalkar;

		private ToolStripMenuItem MenuWan;

		private ToolStripMenuItem MenuRadialBlur;

		private ToolStripMenuItem MenuNoise;

		private ToolStripMenuItem MenuWhiteNoise;

		private ToolStripMenuItem MenuFastDenoising;

		private ToolStripMenuItem MenuDCT_Denoising;

		private ToolStripMenuItem MenuWaveletDenoise;

		private ToolStripMenuItem MenuNLMMeans;

		private ToolStripMenuItem MenuDustAndScratches;

		private ToolStripMenuItem MenuTVDenoising;

		private ToolStripMenuItem MenuFarBan;

		private ToolStripMenuItem MenuAdaptiveMedianFilter;

		private ToolStripMenuItem MenuEuler;

		private ToolStripMenuItem MenuArea;

		private ToolStripMenuItem MenuConservativeDenoising;

		private ToolStripMenuItem MenuFiberMetric;

		private ToolStripMenuItem MenuLineGauss;

		private ToolStripMenuItem MenuDeInterlace_Enhance;

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_BitBlt(ref IM_Bitmap Dst, int DstX, int DstY, int DstW, int DstH, ref IM_Bitmap Src, int SrcX, int SrcY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Monkey(byte* Src, byte* Dest, byte* Mask, int Width, int Height, int Stride, int StrideM, int RadiusH, int RadiusG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetCenterofGravity(byte* Src, int Width, int Height, int Stride, ref float CenterX, ref float CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Thinning_GuoHall(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetImageSharpness(byte* Src, int Width, int Height, int Stride, ref float Sharpness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_Lookup(byte* Src, byte* Dest, int Width, int Height, int Stride, byte* Lut, int Range);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_GetEulerNumber(byte* Src, int Width, int Height, int Stride, ref int Euler, int ConnectedArea);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Thinning_Zhangsuen(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaskBlur(byte* Src, byte* Mask, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Devignetting(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Test(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LinesGuass(byte* Src, byte* Mask, int Width, int Height, int Stride, float Sigma, float Low, float High, int LightDark);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ALTM_Retinex_SSE(byte* Src, byte* Mask, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, bool FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WeightFusion(byte* Src1, byte* Src2, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_CurvatureFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int FilterType, int Iteration);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Lut2D(byte* Src, byte* Lut, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AutoGammaCorrection(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern void Test1(IntPtr Src, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SpecularityRemoval(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Deinterlace(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ReConstruct(byte* Src, byte* Markder, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NLM_Denoising_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int SearchRadius, int PatchRadius, float SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RotateAndResample(byte* Src, byte* Dest, int SrcW, int SrcH, int SrcScan, int DstW, int DstH, int DstScan, float Angle, float ZoomX, float ZoomY, int CenterX, int CenterY, int OffsetX, int OffsetY, int Blue, int Green, int Red, int Alpha, int InterpolationMode, int EdgeBehavior);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern void Test2(IntPtr Src, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern void IM_SalientRegionDetection_FT(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern void IM_EF_GetQualityMeasures(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnderWaterImageEnhancement(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int MLAAShowEdgesTask(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS);

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Resample(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD, int InterpolationMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Transpose(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Avx_Support();

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern void imageRotateAndCopy(IntPtr pOrigImage, int nOrigWidth, int nOrigHeight, IntPtr pCopyImage, int nCopyLeft, int nCopyTop, int nCopyWidth, int nCopyHeight);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Rotate90(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Rotate270(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Rotate180(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_GetDifferenetColorAmount(IntPtr Src, int Width, int Height, int Stride, out int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Byte_ReverseBits(byte* Src, byte* Dest, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Int_Reverse(uint* Src, uint* Dest, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Test(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_SalientRegionDetection_FT(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride, bool BmpFormat = false);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_FlipLeftRight(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_FlipTopBottom(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WeightedMedianBlur(byte* Src, byte* FeatureMap, float* Weight, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Curve_PureC(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Desaturate_SSE(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_AverageBlur(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_AutoEnhanceColors(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Sobel(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_ShowFFT(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_ShowFFT_Precise(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_GetRoughSkinRegion(IntPtr Src, IntPtr Dest, int Width, int Height, int StrideS, int StrideD, int NonSkinLevel);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int GetImageStdValue(IntPtr Src, int Width, int Height, int StrideS, out int Blue, out int Green, out int Red, out int Alpha);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern void Test1();

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_AdjustBrightnessAndContrast(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride, int B, int C);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_FastDenoise_5X5_SSE(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_GaussLaplacianPyramidEnhancement(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_AutoTextureRemoval(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Devignetting(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WhiteNoise(byte* Image, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeHazeBasedonContrastEnhancement(byte* Src, byte* Dest, int Width, int Height, int Stride, int Lamda, int Gamma, bool FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern bool IM_IsBinaryImage_SSE(byte* Src, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ClearIsolatePoint(byte* Src, byte* Dest, int Width, int Height, int Stride, int Area);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowEuclideanDistanceMap(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveBackground(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HistgramMatching(byte* Src, byte* Dest, int Width, int Height, int Stride, int* HistgramB, int* HistgramG, int* HistgramR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RollingGuidanceFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Iteration);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AddImageBlindWaterMark(byte* Src, byte* WaterMark, byte* Dest, int Width, int Height, int Stride, int WidthW, int HeightW, int StrideW);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ContrastPreservingDecolorization(byte* Src, byte* Dest, int Width, int Height, int Stride, bool BmpFormat = false);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetLuminance_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, bool BmpFormat = false);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int AWB_LearningBased(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussPyramidDenoising(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("kernel32")]
		private static extern int GetTickCount();

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public FrmMain()
		{
			InitializeComponent();
		}

		private void SetChannelMenuStatus()
		{
			MenuGrayMode.Checked = false;
			MenuBGR.Checked = false;
			MenuBGRA.Checked = false;
			if (MainCanvas.Channel == 1)
			{
				MenuGrayMode.Checked = true;
				ChannelStatus.Text = "GrayMode";
			}
			else if (MainCanvas.Channel == 3)
			{
				MenuBGR.Checked = true;
				ChannelStatus.Text = "BGR - 3éé";
			}
			else if (MainCanvas.Channel == 4)
			{
				MenuBGRA.Checked = true;
				ChannelStatus.Text = "BGR - 4éé";
			}
		}

		private void FrmMain_Load(object sender, EventArgs e)
		{
			SetChannelMenuStatus();
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MainCanvas_Resize(object sender, EventArgs e)
		{
			if (MainCanvas.Visible)
			{
				int num = MainCanvas.Width;
				int num2 = MainCanvas.Height;
				int num3 = Container.ContentPanel.Width;
				int num4 = Container.ContentPanel.Height;
				if (num > num3)
				{
					ScrollH.Visible = true;
					ScrollH.Minimum = 0;
					ScrollH.Maximum = num;
					ScrollH.Value = (ScrollH.Maximum + ScrollH.Minimum) / 2;
				}
				else
				{
					ScrollH.Visible = false;
				}
				if (num2 > num4)
				{
					ScrollV.Visible = true;
					ScrollV.Minimum = 0;
					ScrollV.Maximum = num2;
					ScrollV.Value = (ScrollV.Maximum + ScrollV.Minimum) / 2;
				}
				else
				{
					ScrollV.Visible = false;
				}
				Application.DoEvents();
				MainCanvas.Left = (num3 - num) / 2;
				MainCanvas.Top = (num4 - num2) / 2;
				if (MainCanvas.Image != null)
				{
					sizeToolStripStatusLabel.Text = MainCanvas.Image.Width + "Ã" + MainCanvas.Image.Height;
				}
			}
		}

		private void FrmMain_Resize(object sender, EventArgs e)
		{
			MainCanvas_Resize(sender, e);
		}

		private void Canvas_MouseWheel(object sender, MouseEventArgs e)
		{
			int num = (ScrollV.Maximum - ScrollV.Minimum) / 10;
			if (!ScrollV.Visible)
			{
				return;
			}
			if (e.Delta < 0)
			{
				if (ScrollV.Value + num > ScrollV.Maximum)
				{
					ScrollV.Value = ScrollV.Maximum;
				}
				else
				{
					ScrollV.Value += num;
				}
			}
			else if (ScrollV.Value - num < ScrollV.Minimum)
			{
				ScrollV.Value = ScrollV.Minimum;
			}
			else
			{
				ScrollV.Value -= num;
			}
			MainCanvas.Top = (Container.ContentPanel.Height - MainCanvas.Height) * ScrollV.Value / MainCanvas.Height;
		}

		private void ScrollH_Scroll(object sender, ScrollEventArgs e)
		{
			MainCanvas.Left = (Container.ContentPanel.Width - MainCanvas.Width) * ScrollH.Value / MainCanvas.Width;
		}

		private void ScrollV_Scroll(object sender, ScrollEventArgs e)
		{
			MainCanvas.Top = (Container.ContentPanel.Height - MainCanvas.Height) * ScrollV.Value / MainCanvas.Height;
		}

		private int GetPosInImage(int Pos)
		{
			return (int)((double)Pos / MainCanvas.Zoom + 0.5);
		}

		private unsafe void MainCanvas_MouseMove(object sender, MouseEventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			int posInImage = GetPosInImage(e.X);
			int posInImage2 = GetPosInImage(e.Y);
			if (posInImage >= 0 && posInImage < MainCanvas.Image.Width && posInImage2 >= 0 && posInImage2 < MainCanvas.Image.Height)
			{
				byte* ptr = MainCanvas.ImageData + posInImage2 * MainCanvas.Stride + posInImage * MainCanvas.Channel;
				if (MainCanvas.Channel == 1)
				{
					mouseToolStripStatusLabel.Text = "X:" + posInImage + ", Y:" + posInImage2 + "   R = " + *ptr + ", G = " + *ptr + ", B = " + *ptr;
				}
				else
				{
					mouseToolStripStatusLabel.Text = "X:" + posInImage + ", Y:" + posInImage2 + "   R = " + ptr[2] + ", G = " + ptr[1] + ", B = " + *ptr;
				}
			}
		}

		private void ZoomCanvas(int iZoom)
		{
			MenuZoom12.Checked = false;
			MenuZoom25.Checked = false;
			MenuZoom50.Checked = false;
			MenuZoom100.Checked = false;
			MenuZoom200.Checked = false;
			MenuZoom300.Checked = false;
			MenuZoom400.Checked = false;
			MenuZoom500.Checked = false;
			MenuZoom1000.Checked = false;
			switch (iZoom)
			{
			case 12:
				MenuZoom12.Checked = true;
				MainCanvas.Zoom = 0.12;
				ZoomFactor.Text = "12%";
				break;
			case 25:
				MenuZoom400.Checked = true;
				MainCanvas.Zoom = 0.25;
				ZoomFactor.Text = "25%";
				break;
			case 50:
				MenuZoom500.Checked = true;
				MainCanvas.Zoom = 0.5;
				ZoomFactor.Text = "50%";
				break;
			case 100:
				MenuZoom100.Checked = true;
				MainCanvas.Zoom = 1.0;
				ZoomFactor.Text = "100%";
				break;
			case 200:
				MenuZoom200.Checked = true;
				MainCanvas.Zoom = 2.0;
				ZoomFactor.Text = "200%";
				break;
			case 300:
				MenuZoom12.Checked = true;
				MainCanvas.Zoom = 3.0;
				ZoomFactor.Text = "300%";
				break;
			case 400:
				MenuZoom400.Checked = true;
				MainCanvas.Zoom = 4.0;
				ZoomFactor.Text = "400%";
				break;
			case 500:
				MenuZoom400.Checked = true;
				MainCanvas.Zoom = 5.0;
				ZoomFactor.Text = "500%";
				break;
			case 1000:
				MenuZoom500.Checked = true;
				MainCanvas.Zoom = 10.0;
				ZoomFactor.Text = "1000%";
				break;
			}
		}

		private void MenuZoom12_Click(object sender, EventArgs e)
		{
			ZoomCanvas(12);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom25_Click(object sender, EventArgs e)
		{
			ZoomCanvas(25);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom50_Click(object sender, EventArgs e)
		{
			ZoomCanvas(50);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom100_Click(object sender, EventArgs e)
		{
			ZoomCanvas(100);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom200_Click(object sender, EventArgs e)
		{
			ZoomCanvas(200);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom300_Click(object sender, EventArgs e)
		{
			ZoomCanvas(300);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom400_Click(object sender, EventArgs e)
		{
			ZoomCanvas(400);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom500_Click(object sender, EventArgs e)
		{
			ZoomCanvas(500);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuZoom1000_Click(object sender, EventArgs e)
		{
			ZoomCanvas(1000);
			Application.DoEvents();
			MainCanvas_Resize(sender, e);
		}

		private void MenuShadowAndHighlight_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å¯¼åæ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuGrayMode_Click(object sender, EventArgs e)
		{
			MainCanvas.Channel = 1;
			SetChannelMenuStatus();
		}

		private void MenuBGR_Click(object sender, EventArgs e)
		{
			MainCanvas.Channel = 3;
			SetChannelMenuStatus();
		}

		private void MenuBGRA_Click(object sender, EventArgs e)
		{
			MainCanvas.Channel = 4;
			SetChannelMenuStatus();
		}

		private void MenuGuideFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new WeightedMedianBlurDialog(MainCanvas, TimeUse, "å¯¼åæ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuCurvatureFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new CurvatureFilterDialog(MainCanvas, TimeUse, "æ²çæ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuExpBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ææ°æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuGaussBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é«æ¯æ¨¡ç³").ShowDialog();
			}
		}

		private unsafe void MenuTranspose_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Height, MainCanvas.Image.Width, MainCanvas.Image.PixelFormat);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_Transpose((IntPtr)MainCanvas.ImageData, bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, bitmap.Width, bitmap.Height, bitmapData.Stride);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private void MenuResample_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ResampleDialog(MainCanvas, TimeUse, "ç¼©æ¾").ShowDialog();
			}
		}

		private unsafe void MenuFlipLeftRight_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_FlipLeftRight((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuLoad_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png |Tiff files (*.tif)|*.tif"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				if (!MainCanvas.Visible)
				{
					MainCanvas.Visible = true;
				}
				MainCanvas.ImageFile = openFileDialog.FileName;
				FilePathStatus.Text = openFileDialog.FileName;
				SetChannelMenuStatus();
				Application.DoEvents();
				MainCanvas_Resize(sender, e);
				float CenterX = 0f;
				float CenterY = 0f;
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_GetCenterofGravity(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, ref CenterX, ref CenterY);
				stopwatch.Stop();
				TimeUse.Text = "å¾åéå¿: (" + CenterX + ", " + CenterY + ")";
			}
		}

		private void MenuSave_Click(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.Filter = "Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png";
			saveFileDialog.FilterIndex = 3;
			saveFileDialog.RestoreDirectory = true;
			if (saveFileDialog.ShowDialog() == DialogResult.OK)
			{
				if (saveFileDialog.FilterIndex == 1)
				{
					MainCanvas.Image.Save(saveFileDialog.FileName, ImageFormat.Bmp);
				}
				else if (saveFileDialog.FilterIndex == 2)
				{
					MainCanvas.Image.Save(saveFileDialog.FileName, ImageFormat.Jpeg);
				}
				else if (saveFileDialog.FilterIndex == 3)
				{
					MainCanvas.Image.Save(saveFileDialog.FileName, ImageFormat.Png);
				}
			}
		}

		private void MenuExit_Click(object sender, EventArgs e)
		{
			Close();
		}

		private void MenuHighPass_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é«åå·®ä¿ç").ShowDialog();
			}
		}

		private void MenuCurve_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				MainCanvas.Refresh();
			}
		}

		private void MenuDesaturate_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "å»è²").ShowDialog();
			}
		}

		private void MenuHighPassSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é«åå·®ä¿çéå").ShowDialog();
			}
		}

		private void MenuBoxBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æ¹æ¡æ¨¡ç³").ShowDialog();
			}
		}

		private unsafe void MenuAverageBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_AverageBlur((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuEPFSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ä¿è¾¹éå").ShowDialog();
			}
		}

		private void MenuMaxFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æå¤§å¼").ShowDialog();
			}
		}

		private void MenuMinFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æå°å¼").ShowDialog();
			}
		}

		private void MenuUnsharpMask_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "USMéå").ShowDialog();
			}
		}

		private void MyMenu_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
		{
		}

		private void MenuLeeAdditvieNoiseFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "Leeåæ¹å·®æ»¤æ³¢").ShowDialog();
			}
		}

		private unsafe void MenuAutoEnhanceColors_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_AutoEnhanceColors((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuHazeRemovalBasedOnDarkChannelPrior_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new HazeRemovalBasedOnDarkChannelPriorDialog(MainCanvas, TimeUse, "åºäºæééçå¯¼åæ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuVibrance_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new AdjustDialog(MainCanvas, TimeUse, "èªç¶é¥±ååº¦").ShowDialog();
			}
		}

		private void MenuExposal_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "æåè¿åº¦").ShowDialog();
			}
		}

		private void MenuEasySharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "éå").ShowDialog();
			}
		}

		private void MenuMakeUp_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "ç£¨ç®ç¾ç½").ShowDialog();
			}
		}

		private unsafe void MenuBitBlt_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				IM_Bitmap Src = default(IM_Bitmap);
				IM_Bitmap Dst = default(IM_Bitmap);
				Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				Src.Width = bitmap.Width;
				Src.Height = bitmap.Height;
				Src.Stride = bitmapData.Stride;
				Src.Scan0 = (byte*)(void*)bitmapData.Scan0;
				Dst.Width = MainCanvas.Image.Width;
				Dst.Height = MainCanvas.Image.Height;
				Dst.Stride = MainCanvas.Stride;
				Dst.Scan0 = MainCanvas.ImageData;
				new Random(GetTickCount());
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				for (int i = 0; i < 100; i++)
				{
					IM_BitBlt(ref Dst, 0, 0, Src.Width, Src.Height, ref Src, 0, 0);
				}
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				bitmap.UnlockBits(bitmapData);
				bitmap.Dispose();
				MainCanvas.Refresh();
			}
		}

		private void MenuFFTConv2_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "FFTå·ç§¯").ShowDialog();
			}
		}

		private unsafe void MenuShowFFT_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_ShowFFT((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				MainCanvas.Refresh();
			}
		}

		private void MenuStdFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å±é¨æ¹å·®").ShowDialog();
			}
		}

		private unsafe void MenuRotate180_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Rotate180((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuSkineArea_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Width, MainCanvas.Image.Height, PixelFormat.Format8bppIndexed);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			ColorPalette palette = bitmap.Palette;
			for (int i = 0; i < palette.Entries.Length; i++)
			{
				palette.Entries[i] = Color.FromArgb(255, i, i, i);
			}
			bitmap.Palette = palette;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_GetRoughSkinRegion((IntPtr)MainCanvas.ImageData, bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, bitmapData.Stride, 10);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private unsafe void MenuRotate90_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Height, MainCanvas.Image.Width, MainCanvas.Image.PixelFormat);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			for (int j = 0; j < 100; j++)
			{
				IM_Rotate90((IntPtr)MainCanvas.ImageData, bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, bitmap.Width, bitmap.Height, bitmapData.Stride);
			}
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private unsafe void Menu270_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Height, MainCanvas.Image.Width, MainCanvas.Image.PixelFormat);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_Rotate270((IntPtr)MainCanvas.ImageData, bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, bitmap.Width, bitmap.Height, bitmapData.Stride);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private void MenuMultiScaleSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¤å°ºåº¦éå").ShowDialog();
			}
		}

		private void MenuEnhancedCLAHE_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "å¼ºåçCLAHE").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int Test32(byte* Src, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int LaplacePyramidTest(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		private void MenuIM_LSD_SSE_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "å±é¨åæ¹å·®å¾åå¢å¼º").ShowDialog();
			}
		}

		private void Menu_TonemapDrago_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "Dragoè²è°æ å°").ShowDialog();
			}
		}

		private unsafe void MenuFlipTopBottom_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_FlipTopBottom((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
				MainCanvas.Refresh();
			}
		}

		private void tonemapGuidedFilterToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "åºäºå¯¼åæ»¤æ³¢çè²è°æ å°").ShowDialog();
			}
		}

		private void MenuAdjustBrightnessAndContrast_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "äº®åº¦å¯¹æ¯åº¦").ShowDialog();
			}
		}

		private void MenuInvert_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "åè²").ShowDialog();
			}
		}

		private void MenuAdjust_Click(object sender, EventArgs e)
		{
		}

		private void MenuSoftglow_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "æå").ShowDialog();
			}
		}

		private void MenuRotate_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new RotateDialog(MainCanvas, TimeUse, "æè½¬åç¼©æ¾").ShowDialog();
			}
		}

		private void MenuMotionBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "è¿å¨æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuHazeRemovalBasedonContrastEnhancement_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å¯¹æ¯åº¦å¢å¼ºå»é¾").ShowDialog();
			}
		}

		private void MenuEnhance_Click(object sender, EventArgs e)
		{
		}

		private void MenuAutoLevel_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "èªå¨è²é¶").ShowDialog();
			}
		}

		private void MenuIM_LocalExponentialCorrection_SSE_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "å±é¨Gammaæ ¡æ­£").ShowDialog();
			}
		}

		private void MenuAWB_GrayWorld_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç°åº¦ä¸çç½å¹³è¡¡").ShowDialog();
			}
		}

		private unsafe void MenuUnderWaterImageEnhancement_Click(object sender, EventArgs e)
		{
			long PerformanceFrequency = 0L;
			long lpPerformanceCount = 0L;
			long lpPerformanceCount2 = 0L;
			QueryPerformanceFrequency(ref PerformanceFrequency);
			QueryPerformanceCounter(ref lpPerformanceCount);
			IM_UnderWaterImageEnhancement(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
			QueryPerformanceCounter(ref lpPerformanceCount2);
			TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
			MainCanvas.Refresh();
		}

		private void MenuZoomBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ç¼©æ¾æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuIM_ALTM_Retinex_SSE_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ä½ç§åº¦å¢å¼º").ShowDialog();
			}
		}

		private void MenuButterworthLowPass_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Butterworthä½éæ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuHighFrequencyEmphasizeFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "é«é¢å¼ºè°æ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuKuwaharaFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Kuwaharaæ»¤æ³¢").ShowDialog();
			}
		}

		private unsafe void MenuFT_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Width, MainCanvas.Image.Height, PixelFormat.Format8bppIndexed);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			ColorPalette palette = bitmap.Palette;
			for (int i = 0; i < palette.Entries.Length; i++)
			{
				palette.Entries[i] = Color.FromArgb(255, i, i, i);
			}
			bitmap.Palette = palette;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_SalientRegionDetection_FT((IntPtr)MainCanvas.ImageData, bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, BmpFormat: true);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private void MenuSalientRegionDetection_Click(object sender, EventArgs e)
		{
		}

		private void MenuSalientRegionDetection_DropDownOpened(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				if (MainCanvas.Image.PixelFormat == PixelFormat.Format8bppIndexed)
				{
					MenuFT.Enabled = false;
				}
				else
				{
					MenuFT.Enabled = true;
				}
			}
		}

		private void MenuOther_Click(object sender, EventArgs e)
		{
		}

		private void MenuWeightedMedianBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new WeightedMedianBlurDialog(MainCanvas, TimeUse, "å æä¸­å¼æ¨¡ç³").ShowDialog(this);
			}
		}

		private void MenuSeparableBilateralFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new WeightedMedianBlurDialog(MainCanvas, TimeUse, "åç¦»çåè¾¹æ»¤æ³¢").ShowDialog(this);
			}
		}

		private unsafe void MenuAddBlindWaterMark_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				if (IM_AddImageBlindWaterMark(MainCanvas.ImageData, (byte*)(void*)bitmapData.Scan0, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, bitmapData.Width, bitmapData.Height, bitmapData.Stride) == 0)
				{
					MessageBox.Show("æ°´å°æ·»å å®æï¼è¯·ç¹å»é¢è°±å¾æ¾ç¤ºéèçæ°´å°.");
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
				bitmap.UnlockBits(bitmapData);
				MainCanvas.Refresh();
				bitmap.Dispose();
			}
		}

		private unsafe void MenuDevignetting_Click(object sender, EventArgs e)
		{
			long PerformanceFrequency = 0L;
			long lpPerformanceCount = 0L;
			long lpPerformanceCount2 = 0L;
			QueryPerformanceFrequency(ref PerformanceFrequency);
			QueryPerformanceCounter(ref lpPerformanceCount);
			IM_Devignetting((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
			QueryPerformanceCounter(ref lpPerformanceCount2);
			TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
			MainCanvas.Refresh();
		}

		private void MenuOilPainting_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æ²¹ç»").ShowDialog();
			}
		}

		private void MenuNiblackAdaptiveThreshold_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new LocalBinaryDialog(MainCanvas, TimeUse, "Niblackå±é¨äºå¼").ShowDialog();
			}
		}

		private void MenuWellnerAdaptiveThreshold_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new LocalBinaryDialog(MainCanvas, TimeUse, "Wellnerå±é¨äºå¼").ShowDialog();
			}
		}

		private void MenuBernsenAdaptiveThreshold_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "BernsenVar Threshold").ShowDialog();
			}
		}

		private void MenuLocalBinary_Click(object sender, EventArgs e)
		{
		}

		private void MenuGlobalBinary_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GlobalBinaryDialog(MainCanvas, TimeUse, "å¨å±äºå¼å").ShowDialog();
			}
		}

		private unsafe void MenuBinary_DropDownOpened(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				if (MainCanvas.Channel != 1)
				{
					MenuLocalBinary.Enabled = false;
					MenuGlobalBinary.Enabled = false;
					MenuProcessing.Enabled = false;
					MenuFeature.Enabled = false;
					MenuBinaryInfo.Enabled = false;
				}
				else
				{
					MenuLocalBinary.Enabled = true;
					MenuGlobalBinary.Enabled = true;
					MenuProcessing.Enabled = true;
					MenuFeature.Enabled = true;
					MenuBinaryInfo.Enabled = IM_IsBinaryImage_SSE(MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				}
			}
		}

		private void MenuMisc_DropDownOpening(object sender, EventArgs e)
		{
		}

		private unsafe void MenuDifferentColorCount_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				int Amount = 0;
				IM_GetDifferenetColorAmount((IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Amount);
				MessageBox.Show("å¾åä¸­ä¸åçåç´ ä¸ªæ°æ:" + Amount + "ä¸ª.");
			}
		}

		private void MenuGetOutline_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "è½®å»").ShowDialog();
			}
		}

		private unsafe void MenuShowEuclideanDistanceMap_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(MainCanvas.Image.Width, MainCanvas.Image.Height, PixelFormat.Format8bppIndexed);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			ColorPalette palette = bitmap.Palette;
			for (int i = 0; i < palette.Entries.Length; i++)
			{
				palette.Entries[i] = Color.FromArgb(255, i, i, i);
			}
			bitmap.Palette = palette;
			long PerformanceFrequency = 0L;
			long lpPerformanceCount = 0L;
			long lpPerformanceCount2 = 0L;
			QueryPerformanceFrequency(ref PerformanceFrequency);
			QueryPerformanceCounter(ref lpPerformanceCount);
			IM_ShowEuclideanDistanceMap(MainCanvas.ImageData, (byte*)(void*)bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
			QueryPerformanceCounter(ref lpPerformanceCount2);
			TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
			bitmap.UnlockBits(bitmapData);
			MainCanvas.Image = bitmap;
		}

		private void MenuBinary_Click(object sender, EventArgs e)
		{
		}

		private void MenuErode_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "èè").ShowDialog();
			}
		}

		private void MenuDilate_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "è¨è").ShowDialog();
			}
		}

		private unsafe void MenuFeature_DropDownOpened(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				ToolStripMenuItem menuGetOutline = MenuGetOutline;
				ToolStripMenuItem menuShowEuclideanDistanceMap = MenuShowEuclideanDistanceMap;
				ToolStripMenuItem menuEuler = MenuEuler;
				bool flag2 = (MenuArea.Enabled = IM_IsBinaryImage_SSE(MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride));
				bool flag4 = (menuEuler.Enabled = flag2);
				bool enabled = (menuShowEuclideanDistanceMap.Enabled = flag4);
				menuGetOutline.Enabled = enabled;
			}
		}

		private unsafe void MenuProcessing_DropDownOpened(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				ToolStripMenuItem menuClearIsolatePoint = MenuClearIsolatePoint;
				ToolStripMenuItem menuErode = MenuErode;
				ToolStripMenuItem menuDilate = MenuDilate;
				ToolStripMenuItem menuFillHole = MenuFillHole;
				ToolStripMenuItem menuThinGuo = MenuThinGuo;
				ToolStripMenuItem menuThinZhang = MenuThinZhang;
				ToolStripMenuItem menuMorph = MenuMorph;
				bool flag2 = (MenuMajority.Enabled = IM_IsBinaryImage_SSE(MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride));
				bool flag4 = (menuMorph.Enabled = flag2);
				bool flag6 = (menuThinZhang.Enabled = flag4);
				bool flag8 = (menuThinGuo.Enabled = flag6);
				bool flag10 = (menuFillHole.Enabled = flag8);
				bool flag12 = (menuDilate.Enabled = flag10);
				bool enabled = (menuErode.Enabled = flag12);
				menuClearIsolatePoint.Enabled = enabled;
			}
		}

		private void MenuClearIsolatePoint_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æ¸é¤å­¤ç¹").ShowDialog();
			}
		}

		private void MenuFrankleMccannRetinex_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "FrankleMccann Retinex").ShowDialog();
			}
		}

		private void MenuDomainTransformFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new WeightedMedianBlurDialog(MainCanvas, TimeUse, "Domain Transform Filter").ShowDialog(this);
			}
		}

		private void MenuMisc_Click(object sender, EventArgs e)
		{
		}

		private void CmdFillHole_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¡«åå­æ´").ShowDialog(this);
			}
		}

		private void MenuRemoveBackGround_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç§»é¤èæ¯").ShowDialog();
			}
		}

		private void MenuProcessing_Click(object sender, EventArgs e)
		{
		}

		private void MenuLocalLaplacianFilter_Click(object sender, EventArgs e)
		{
		}

		private void MenuPyramid_Click(object sender, EventArgs e)
		{
		}

		private void MenuIM_EnhanceBasedOnErodeAndDilate_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new HomomorphicFilteringDialog(MainCanvas, TimeUse, "åºäºæå¼çå¢å¼º").ShowDialog();
			}
		}

		private void MenuBlend_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "BlendImage").ShowDialog();
			}
		}

		private void MenuMultImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				MenuNCC.Enabled = MainCanvas.Image.PixelFormat == PixelFormat.Format8bppIndexed;
				MenuLaplacePyramidFusionWithMask.Enabled = MainCanvas.Image.PixelFormat == PixelFormat.Format24bppRgb;
			}
		}

		private void MenuIM_LaplacePyramidFusion_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new LaplacePyramidFusionDialog(MainCanvas, TimeUse, "LaplacePyramidFusion").ShowDialog();
			}
		}

		private void MenuEdgeCanny_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new EdgeCannyDialog(MainCanvas, TimeUse, "EdgeCanny").ShowDialog();
			}
		}

		private void edgeDetectionToolStripMenuItem_DropDownOpened(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				if (MainCanvas.Channel != 1)
				{
					ToolStripMenuItem menuEdgeCanny = MenuEdgeCanny;
					bool enabled = (MenuEdgeDeriche.Enabled = false);
					menuEdgeCanny.Enabled = enabled;
				}
				else
				{
					ToolStripMenuItem menuEdgeCanny2 = MenuEdgeCanny;
					bool enabled = (MenuEdgeDeriche.Enabled = true);
					menuEdgeCanny2.Enabled = enabled;
				}
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DualTVDenoising_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Lamda, int Iter, int Condition);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NormalClone(byte* BackGround, byte* ForeGround, byte* Mask, byte* Dest, int Width, int Height, int Stride);

		private void testToolStripMenuItem_Click(object sender, EventArgs e)
		{
			_ = MainCanvas.Image;
		}

		private unsafe void MenuLut2D_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image == null)
			{
				return;
			}
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
				if (bitmap.Width == 512 && bitmap.Height == 512 && bitmap.PixelFormat == PixelFormat.Format24bppRgb)
				{
					BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
					long PerformanceFrequency = 0L;
					long lpPerformanceCount = 0L;
					long lpPerformanceCount2 = 0L;
					QueryPerformanceFrequency(ref PerformanceFrequency);
					QueryPerformanceCounter(ref lpPerformanceCount);
					IM_Lut2D(MainCanvas.ImageData, (byte*)(void*)bitmapData.Scan0, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
					QueryPerformanceCounter(ref lpPerformanceCount2);
					TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
					bitmap.UnlockBits(bitmapData);
					MainCanvas.Refresh();
				}
				else
				{
					MessageBox.Show("Lutå¾å¿é¡»æ¯å®½åº¦åé«åº¦é½ä¸º512åç´ ç24ä½å¾å");
				}
				bitmap.Dispose();
			}
		}

		private void MenuLaplacePyramidFusionWithMask_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new LaplacePyramidFusionDialog(MainCanvas, TimeUse, "LaplacePyramidFusionWithMask").ShowDialog();
			}
		}

		private void MenuRender_Click(object sender, EventArgs e)
		{
		}

		private void MenuVectorField_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç¢éåº").ShowDialog();
			}
		}

		private void MenuOpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¼æä½").ShowDialog();
			}
		}

		private void MenuClose_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é­æä½").ShowDialog();
			}
		}

		private void MenuIM_EnhanceContrastBasedonTopBotHat_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å½¢æå­¦å¢å¼º").ShowDialog();
			}
		}

		private void MenuRetinex_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "Retinex").ShowDialog();
			}
		}

		private void MenuPhotoCopy_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å½±å°").ShowDialog();
			}
		}

		private void MenuRangeFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "Range").ShowDialog();
			}
		}

		private void MenuGlowingEdges_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "GlowingEdges").ShowDialog();
			}
		}

		private void MenuTraceContour_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç­é«çº¿").ShowDialog();
			}
		}

		private void MenuDustAndScratches_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "èå°ååç").ShowDialog();
			}
		}

		private void Median_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ä¸­é´å¼").ShowDialog();
			}
		}

		private void MenuContinuousBlockAmount_Click(object sender, EventArgs e)
		{
		}

		private void MenuBinaryInfo_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new FrmInfo(MainCanvas, TimeUse, "").ShowDialog();
			}
		}

		private void MenuBandPassFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BandPassFilterDialog(MainCanvas, TimeUse, "").ShowDialog();
			}
		}

		private void MenuLightCompensation_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "åç§è¡¥å¿").ShowDialog();
			}
		}

		private void MenuRadiusSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "RadiusSharpen").ShowDialog();
			}
		}

		private void HistogramEqualization_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç´æ¹å¾åè¡¡").ShowDialog();
			}
		}

		private void MenuMaskDodging_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "MASKåå").ShowDialog();
			}
		}

		private void MenuSmartBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "æºè½æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuAutoContrast_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "èªå¨å¯¹æ¯åº¦").ShowDialog();
			}
		}

		private unsafe void MenuHistGramMatching_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "All files(*.*) |*.*|Bitmap files (*.Bitmap)|*.Bmp|Jpeg files (*.jpg)|*.jpg|Png files (*.png)|*.png"
			};
			if (openFileDialog.ShowDialog() != DialogResult.OK)
			{
				return;
			}
			Bitmap bitmap = (Bitmap)Image.FromFile(openFileDialog.FileName);
			if (bitmap.PixelFormat == MainCanvas.Image.PixelFormat)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				int* ptr2 = (int*)(void*)Marshal.AllocHGlobal(1024);
				int* ptr3 = (int*)(void*)Marshal.AllocHGlobal(1024);
				int* ptr4 = (int*)(void*)Marshal.AllocHGlobal(1024);
				for (int i = 0; i < 256; i++)
				{
					ptr2[i] = (ptr3[i] = (ptr4[i] = 0));
				}
				if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
				{
					for (int j = 0; j < bitmapData.Height; j++)
					{
						byte* ptr5 = (byte*)(void*)bitmapData.Scan0 + j * bitmapData.Stride;
						for (int k = 0; k < bitmapData.Width; k++)
						{
							ptr2[(int)ptr5[k]]++;
						}
					}
				}
				else
				{
					for (int l = 0; l < bitmapData.Height; l++)
					{
						byte* ptr6 = (byte*)(void*)bitmapData.Scan0 + l * bitmapData.Stride;
						for (int m = 0; m < bitmapData.Width; m++)
						{
							ptr2[(int)ptr6[m]]++;
							ptr3[(int)ptr6[m]]++;
							ptr4[(int)ptr6[m]]++;
						}
					}
				}
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				IM_HistgramMatching(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, ptr2, ptr3, ptr4);
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
				Marshal.FreeHGlobal((IntPtr)ptr2);
				Marshal.FreeHGlobal((IntPtr)ptr3);
				Marshal.FreeHGlobal((IntPtr)ptr4);
				bitmap.UnlockBits(bitmapData);
			}
			bitmap.Dispose();
			MainCanvas.Refresh();
		}

		private unsafe void MenuTextureRemoval_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Bitmap bitmap = new Bitmap(MainCanvas.Image.Width, MainCanvas.Image.Height, PixelFormat.Format8bppIndexed);
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				BitmapData bitmapdata = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				IM_AutoTextureRemoval((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				QueryPerformanceCounter(ref lpPerformanceCount2);
				TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
				MainCanvas.Refresh();
				bitmap.UnlockBits(bitmapdata);
				bitmap.Dispose();
			}
		}

		private void Container_ContentPanel_Load(object sender, EventArgs e)
		{
		}

		private void MenuBacklightRepair_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "èåä¿®å¤").ShowDialog();
			}
		}

		private void MenuAnisotropicDiffusion3X3_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "åé¡¹å¼æ§æ©æ£").ShowDialog();
			}
		}

		private void MenuExposure_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "æååº¦").ShowDialog();
			}
		}

		private void MenuMedianSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ä¸­å¼éå").ShowDialog();
			}
		}

		private void MenuTVDenoising_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "TVå»åª").ShowDialog();
			}
		}

		private void MenuLinearBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "çº¿æ§æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuDeBlocking_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "DeBlocking").ShowDialog();
			}
		}

		private void toolStripMenuItem1_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "å±é¨ææ®ææ¯æ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuHomomorphicFiltering_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new HomomorphicFilteringDialog(MainCanvas, TimeUse, "åææ»¤æ³¢").ShowDialog();
			}
		}

		private void toolStripMenuItem2_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "MLAAæé¯é½¿").ShowDialog();
			}
		}

		private unsafe void toolStripMenuItem3_Click(object sender, EventArgs e)
		{
			long PerformanceFrequency = 0L;
			long lpPerformanceCount = 0L;
			long lpPerformanceCount2 = 0L;
			if (MainCanvas.Image.PixelFormat != PixelFormat.Format8bppIndexed)
			{
				Bitmap bitmap = new Bitmap(MainCanvas.Image.Width, MainCanvas.Image.Height, PixelFormat.Format8bppIndexed);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				IM_ContrastPreservingDecolorization(MainCanvas.ImageData, (byte*)(void*)bitmapData.Scan0, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, BmpFormat: true);
				QueryPerformanceCounter(ref lpPerformanceCount2);
				TimeUse.Text = "è®¡ç®ç¨æ¶" + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.";
				bitmap.UnlockBits(bitmapData);
				MainCanvas.Image = bitmap;
			}
		}

		private void MenuDestripe_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å»é¤æ¡çº¹").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_AWB_DivideMode(IntPtr Src, IntPtr Dest, int Width, int Height, int Stride);

		private unsafe void MenuHqnx_Click(object sender, EventArgs e)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_AWB_DivideMode((IntPtr)MainCanvas.ImageData, (IntPtr)MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶" + stopwatch.ElapsedMilliseconds + "ms.";
			MainCanvas.Refresh();
		}

		private unsafe void MenuAutoGammaCorrection_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_AutoGammaCorrection(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuDisOrder_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "å¾åç½®ä¹±").ShowDialog();
			}
		}

		private void MenuLawsTextureFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new FrmMiscDialog(MainCanvas, TimeUse, "Laws Texture Filter").ShowDialog();
			}
		}

		private void MenuSpecularityRemoval_Click(object sender, EventArgs e)
		{
			_ = MainCanvas.Image;
		}

		private void MenuMosaic_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "é©¬èµå").ShowDialog();
			}
		}

		private unsafe void MenuDeinterlace_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Deinterlace(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MainCanvas_Load(object sender, EventArgs e)
		{
		}

		private void MenuAdjustHSL_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "è²ç¸é¥±ååº¦").ShowDialog();
			}
		}

		private void MUSCIA_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "MUSICAå¢å¼º").ShowDialog();
			}
		}

		private void MenuPureBackGround_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "çº¯åèæ¯").ShowDialog();
			}
		}

		private void MenuIM_SauvolaAdaptiveThresholding_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "Sauvolaäºå¼å").ShowDialog();
			}
		}

		private unsafe void MenuThinZhang_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Thinning_Zhangsuen(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuThinGuo_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Thinning_GuoHall(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuImageExtraction_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¾åæ½å").ShowDialog();
			}
		}

		private void MenuAuxliaryEnhance_Click(object sender, EventArgs e)
		{
		}

		private void MenuDynamicThreshold_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new DynamicThresholdDialog(MainCanvas, TimeUse, "Dynamic Threshold").ShowDialog();
			}
		}

		private void MenuShadingCorrection_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ShadingFilterDialog(MainCanvas, TimeUse, "æµæ·¡è¡¥æ­£").ShowDialog();
			}
		}

		private void MenuVarLocalThresholding_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new VarLocalThresholdDialog(MainCanvas, TimeUse, "Var Threshold").ShowDialog();
			}
		}

		private void MenuHysteresisThresholding_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "Hysteresis Threshold").ShowDialog();
			}
		}

		private void MenuClearBorder_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æ¸é¤è¾¹ç").ShowDialog();
			}
		}

		private void morphologicalToolStripMenuItem_DropDownOpening(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				MenuImageReconstruction.Enabled = MainCanvas.Channel == 1;
				MenuImposeMin.Enabled = MainCanvas.Channel == 1;
				MenuHMax.Enabled = MainCanvas.Channel == 1;
				MenuHMin.Enabled = MainCanvas.Channel == 1;
				MenuRegionalMax.Enabled = MainCanvas.Channel == 1;
				MenuRegionalMin.Enabled = MainCanvas.Channel == 1;
				MenuExtendFillHole.Enabled = MainCanvas.Channel == 1;
				MenuExtendedMax.Enabled = MainCanvas.Channel == 1;
				MenuExtendedMin.Enabled = MainCanvas.Channel == 1;
				MenuExtendFillHole.Enabled = MainCanvas.Channel == 1;
				MenuExtendClearBorder.Enabled = MainCanvas.Channel == 1;
				MenuDoubleThresholding.Enabled = MainCanvas.Channel == 1;
				MenuTopHat.Enabled = MainCanvas.Channel == 1;
				MenuBlackHat.Enabled = MainCanvas.Channel == 1;
				MennUltimateErodedSet.Enabled = MainCanvas.Channel == 1;
			}
		}

		private void MenuImageReconstruction_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "å¾åéæ").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RegionalMax(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		private unsafe void MenuRegionalMax_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_RegionalMax(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, 8);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RegionalMin(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		private unsafe void MenuRegionalMin_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_RegionalMin(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, 8);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuHMax_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "HMaxéæ").ShowDialog();
			}
		}

		private void MenuHMin_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "HMinéæ").ShowDialog();
			}
		}

		private void MenuExtendedMax_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "æ©å±çMaxéæ").ShowDialog();
			}
		}

		private void MenuExtendedMin_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "æ©å±çMinéæ").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExtendFillHole(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		private unsafe void MenuExtendFillHole_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_ExtendFillHole(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, 8);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ClearBorder(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		private unsafe void MenuExtendClearBorder_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_ClearBorder(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, 8);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuImposeMin_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ImageReconstructionDialog(MainCanvas, TimeUse, "å¼ºå¶æå°").ShowDialog();
			}
		}

		private void MenuDoubleThresholding_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "åéå¼äºå¼å").ShowDialog();
			}
		}

		private void MenuTopHat_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é¡¶å¸½åæ¢").ShowDialog();
			}
		}

		private void MenuBlackHat_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "é»å¸½åæ¢").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UltimateErodeSet(byte* Src, byte* Dest, int Width, int Height, int Stride, int Connectivity);

		private unsafe void MennUltimateErodedSet_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_UltimateErodeSet(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, 8);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void morphologicalToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void MenuMorph_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Morph").ShowDialog();
			}
		}

		private void MenuMajority_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ä¸»æå").ShowDialog();
			}
		}

		private void MenuNCC_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "NormalizedCrossCorrelation(NCC)").ShowDialog();
			}
		}

		private void MenuLayerStyle_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new FrmLayerStyle(MainCanvas, TimeUse).ShowDialog();
			}
		}

		private void MenuStylize_DropDownOpening(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				MenuLayerStyle.Enabled = MainCanvas.Channel == 4;
			}
		}

		private void MenuMltiImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åç¸ä¹").ShowDialog();
			}
		}

		private void MenuMaxImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾ååå¤§").ShowDialog();
			}
		}

		private void MenuMinImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾ååå°").ShowDialog();
			}
		}

		private void MenuAddImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åç¸å ").ShowDialog();
			}
		}

		private void MenuSubImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åç¸å").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Sqrt_Image(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private unsafe void MenuSqrtImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Arithmetic_Sqrt_Image(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuPowImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¾åææ°åå").ShowDialog();
			}
		}

		private void MenuDivImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åç¸é¤").ShowDialog();
			}
		}

		private void MenuScaleImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åå¼ç¼©æ¾").ShowDialog();
			}
		}

		private void MenuAbsDiffImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MultImageDialog(MainCanvas, TimeUse, "å¾åç»å¯¹å¼å·®").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Log_Image(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private unsafe void MenuLogImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Arithmetic_Log_Image(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuEntropy_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å¾åçµ").ShowDialog();
			}
		}

		private void MenuIlluminateImage_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ç§äº®å¾å").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Bandpass(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private unsafe void MenuEdgeBandPass_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Bandpass(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuHCM_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "HCMåå²").ShowDialog();
			}
		}

		private void MenuEdgeDeriche_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new EdgeCannyDialog(MainCanvas, TimeUse, "EdgeDeriche").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Kirsch(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Scharr(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Robinson(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Frei_Chen(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Prewitt(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private void MenuSobel_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Edge_Sobel").ShowDialog();
			}
		}

		private unsafe void edgeRobinsonToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Edge_Robinson(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuEdge_Kirsch_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Edge_Kirsch(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuEdge_Frei_Chen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Edge_Frei_Chen(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private unsafe void MenuEdge_Prewitt_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Edge_Prewitt(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuEdge_Roberts_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Edge_Roberts").ShowDialog();
			}
		}

		private void MenuEdge_Robinson_Click(object sender, EventArgs e)
		{
		}

		private void MenuEdgeLaplace_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Edge_Laplace").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Wavelet(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RedfieldFractalius(byte* Src, byte* Dest, int Width, int Height, int Stride);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_Area(byte* Src, int Width, int Height, int Stride, ref int Area);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_Morph(byte* Src, byte* Dest, int Width, int Height, int Stride, int Operation, int Iter);

		private unsafe void testToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_BW_Morph(MainCanvas.ImageData, MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, 0, 100);
				stopwatch.Stop();
				Text = stopwatch.ElapsedMilliseconds.ToString();
				MainCanvas.Refresh();
			}
		}

		private void edgeHighPassImageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Edge_HighPass").ShowDialog();
			}
		}

		private void mouseToolStripStatusLabel_Click(object sender, EventArgs e)
		{
		}

		private void MenuEdge_Laplace_of_Gauss_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "Edge_Laplace_of_Gauss").ShowDialog();
			}
		}

		private void MenuSymmetry_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å¯¹ç§°æ§").ShowDialog();
			}
		}

		private void MenuEmphasize_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "è¾¹ç¼å¼ºè°").ShowDialog();
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NonlinearEnhancement(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private void MenuNonlinearEnhancement_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "éçº¿æ§å¢å¼º").ShowDialog();
			}
		}

		private void MenuDehazeBasedonBoxFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "åºäºåå¼çå»é¾").ShowDialog();
			}
		}

		private void MenuDualThreshold_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "é«ä½éå¼äºå¼å").ShowDialog();
			}
		}

		private void MenuFindEdges_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "æ¥æ¾è¾¹ç¼").ShowDialog();
			}
		}

		private void MenuRemoveOutliers_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "ç§»é¤å¼å¸¸å¼").ShowDialog();
			}
		}

		private void MenuDerivateGauss_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "derivate_gauss").ShowDialog();
			}
		}

		private void MenuEdgeDetection_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				MenuDerivateGauss.Enabled = MainCanvas.Channel == 1;
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EstimateNoise(byte* Src, int Width, int Height, int Stride, out float Sigma);

		private unsafe void MenuEstimateNoise_Click(object sender, EventArgs e)
		{
			float Sigma = 0f;
			IM_EstimateNoise(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, out Sigma);
			MessageBox.Show("ä¼°è®¡çå¾ååªé³æ¹å·®ä¸º:" + Sigma);
		}

		private void MenuImageInfo_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				MenuEstimateNoise.Enabled = MainCanvas.Channel == 1;
			}
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EstimateTiltAndSlant(byte* Src, int Width, int Height, int Stride, out float Tilt, out float Slant);

		private unsafe void MenuEstimateTiltAndSlant_Click(object sender, EventArgs e)
		{
			float Tilt = 0f;
			float Slant = 0f;
			IM_EstimateTiltAndSlant(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, out Tilt, out Slant);
			MessageBox.Show("ä¼°è®¡çå¥å°åå¾è§ï¼Xè½´å¤¹è§ï¼:" + Tilt);
			MessageBox.Show("ä¼°è®¡çå¥å°åå¾è§ï¼XYå¹³é¢å¤¹è§ï¼:" + Slant);
		}

		private void MenuSelectiveBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "éæ©æ§æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuSurfaceBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "è¡¨é¢æ¨¡ç³").ShowDialog();
			}
		}

		private void MenuShadowAndHighlight_Click_1(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new ShadowAndHighlightDialog(MainCanvas, TimeUse, "æè°é«å").ShowDialog();
			}
		}

		private void MenuWaveletDenoise_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å°æ³¢å»åª").ShowDialog();
			}
		}

		private void MenuWaveletSharpen_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "å°æ³¢éå").ShowDialog();
			}
		}

		private void MenuNLMMeans_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new USMSharpenFilterDialog(MainCanvas, TimeUse, "éå±é¨åå¼æ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuStandandGaborFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new VarLocalThresholdDialog(MainCanvas, TimeUse, "Gaboræ»¤æ³¢").ShowDialog();
			}
		}

		private unsafe void redfieldFractaliusToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_RedfieldFractalius(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuLogGaborFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new VarLocalThresholdDialog(MainCanvas, TimeUse, "LogGaboræ»¤æ³¢").ShowDialog();
			}
		}

		private void MenuMedianAbsoluteDeviation_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "ç»å¯¹ä¸­ä½å·®").ShowDialog();
			}
		}

		private void MultiScaleContrastEnhancement_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "å¤å°ºåº¦å¯¹æ¯åº¦å¢å¼º").ShowDialog();
			}
		}

		private unsafe void MenuSharpness_Click(object sender, EventArgs e)
		{
			float Sharpness = 0f;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_GetImageSharpness(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, ref Sharpness);
			stopwatch.Stop();
			TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms, ä¼°è®¡çå¾åéåº¦ä¸º:" + Sharpness;
		}

		private unsafe void MenuEdgeScharr_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_Edge_Scharr(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void Undo_Click(object sender, EventArgs e)
		{
		}

		private void Redo_Click(object sender, EventArgs e)
		{
		}

		private void MenuPhansalkar_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new VarLocalThresholdDialog(MainCanvas, TimeUse, "Phansalkar").ShowDialog();
			}
		}

		private void MenuWan_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "Wanäºå¼å").ShowDialog();
			}
		}

		private void MenuRadialBlur_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "å¾åæ¨¡ç³").ShowDialog();
			}
		}

		private void MenuWhiteNoise_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "æ·»å åªé³").ShowDialog();
			}
		}

		private void MenuFastDenoising_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new NoParaDialog(MainCanvas, TimeUse, "å¿«éå»åª").ShowDialog();
			}
		}

		private void MenuDCT_Denoising_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "DCTå»åª").ShowDialog();
			}
		}

		private void MenuFarBan_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new FrmTonemapFarbman(MainCanvas, TimeUse, "å¤å°ºåº¦å»åª").ShowDialog();
			}
		}

		private void MenuAdaptiveMedianFilter_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new GuidedFilterDialog(MainCanvas, TimeUse, "èªéåºä¸­å¼æ»¤æ³¢").ShowDialog();
			}
		}

		private unsafe void MenuEuler_Click(object sender, EventArgs e)
		{
			int Euler = 0;
			int Euler2 = 0;
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			IM_BW_GetEulerNumber(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, ref Euler, 4);
			IM_BW_GetEulerNumber(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, ref Euler2, 8);
			stopwatch.Stop();
			MessageBox.Show("4é¢åå¾åçæ¬§ææ°ä¸ºï¼" + Euler + ".\n8é¢åå¾åçæ¬§ææ°ä¸ºï¼" + Euler2 + ".");
		}

		private unsafe void MenuArea_Click(object sender, EventArgs e)
		{
			int Area = 0;
			IM_BW_Area(MainCanvas.ImageData, MainCanvas.Width, MainCanvas.Height, MainCanvas.Stride, ref Area);
			MessageBox.Show("å¾åçé¢ç§¯ä¸ºï¼" + Area);
		}

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ConservativeDenoising_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride);

		private unsafe void MenuConservativeDenoising_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				byte* ptr = (byte*)(void*)Marshal.AllocHGlobal(MainCanvas.Image.Height * MainCanvas.Stride);
				CopyMemory(ptr, MainCanvas.ImageData, MainCanvas.Image.Height * MainCanvas.Stride);
				Stopwatch stopwatch = new Stopwatch();
				stopwatch.Start();
				IM_ConservativeDenoising_SSE(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride);
				stopwatch.Stop();
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out PSNR);
				IM_GetSumSquareError(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out MSE);
				IM_GetMutualInfo(ptr, MainCanvas.ImageData, MainCanvas.Image.Width, MainCanvas.Image.Height, MainCanvas.Stride, out Mutual);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + stopwatch.ElapsedMilliseconds + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Marshal.FreeHGlobal((IntPtr)ptr);
				MainCanvas.Refresh();
			}
		}

		private void MenuFiberMetric_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new MakeUpDialog(MainCanvas, TimeUse, "çº¤ç»´åæ").ShowDialog();
			}
		}

		private void MenuDeInterlace_Enhance_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new BlurBasedDialog(MainCanvas, TimeUse, "å»é¤å½©è²æç¹").ShowDialog();
			}
		}

		private void MenuLineGauss_Click(object sender, EventArgs e)
		{
			if (MainCanvas.Image != null)
			{
				new FrmLineGauss(MainCanvas, TimeUse, "çº¿æ¡åæ").ShowDialog();
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Demo.FrmMain));
			this.Container = new System.Windows.Forms.ToolStripContainer();
			this.StatusBar = new System.Windows.Forms.StatusStrip();
			this.pathToolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
			this.ZoomFactor = new System.Windows.Forms.ToolStripDropDownButton();
			this.zoomContextMenuStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.MenuZoom12 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom25 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom50 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom100 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom200 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom300 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom400 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom500 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoom1000 = new System.Windows.Forms.ToolStripMenuItem();
			this.ChannelStatus = new System.Windows.Forms.ToolStripDropDownButton();
			this.ChannelMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
			this.MenuGrayMode = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBGR = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBGRA = new System.Windows.Forms.ToolStripMenuItem();
			this.mouseToolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
			this.sizeToolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
			this.TimeUse = new System.Windows.Forms.ToolStripStatusLabel();
			this.FilePathStatus = new System.Windows.Forms.ToolStripStatusLabel();
			this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
			this.ScrollV = new System.Windows.Forms.VScrollBar();
			this.ScrollH = new System.Windows.Forms.HScrollBar();
			this.MainCanvas = new Demo.Canvas();
			this.MyMenu = new System.Windows.Forms.MenuStrip();
			this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLoad = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSave = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExit = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdit = new System.Windows.Forms.ToolStripMenuItem();
			this.Undo = new System.Windows.Forms.ToolStripMenuItem();
			this.Redo = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
			this.MenuFlipLeftRight = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFlipTopBottom = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuTranspose = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRotate90 = new System.Windows.Forms.ToolStripMenuItem();
			this.Menu270 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRotate180 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRotate = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuResample = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBitBlt = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHqnx = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAdjust = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAutoLevel = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAutoContrast = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAutoGammaCorrection = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAutoEnhanceColors = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuInvert = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAdjustBrightnessAndContrast = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuCurve = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAdjustHSL = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDesaturate = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExposure = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuVibrance = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHistGramMatching = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuShadowAndHighlight = new System.Windows.Forms.ToolStripMenuItem();
			this.HistogramEqualization = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAWB_GrayWorld = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLut = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLut2D = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAverageBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBoxBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLinearBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExpBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGaussBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.Median = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMotionBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuZoomBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSurfaceBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSmartBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSelectiveBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRadialBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEnhance = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuNoise = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWhiteNoise = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFastDenoising = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDCT_Denoising = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWaveletDenoise = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuNLMMeans = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDustAndScratches = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuTVDenoising = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAdaptiveMedianFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuConservativeDenoising = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDenoise = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGuideFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLeeAdditvieNoiseFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuCurvatureFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWeightedMedianBlur = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSeparableBilateralFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDomainTransformFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAnisotropicDiffusion3X3 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDeBlocking = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEasySharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMultiScaleSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHighPassSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEPFSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMedianSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuUnsharpMask = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRadiusSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEmphasize = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWaveletSharpen = new System.Windows.Forms.ToolStripMenuItem();
			this.detailEnhancementToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEnhancedCLAHE = new System.Windows.Forms.ToolStripMenuItem();
			this.MUSCIA = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_LSD_SSE = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_EnhanceBasedOnErodeAndDilate = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_EnhanceContrastBasedonTopBotHat = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuUnderWaterImageEnhancement = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIlluminateImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MultiScaleContrastEnhancement = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHdr = new System.Windows.Forms.ToolStripMenuItem();
			this.tonemapGuidedFilterToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.Menu_TonemapDrago = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFarBan = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripMenuItem4 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHazeRemovalBasedOnDarkChannelPrior = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHazeRemovalBasedonContrastEnhancement = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDehazeBasedonBoxFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.lowLightImageEnhancementToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBacklightRepair = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_ALTM_Retinex_SSE = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_LocalExponentialCorrection_SSE = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRetinex = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFrankleMccannRetinex = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuNonlinearEnhancement = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFFT = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuShowFFT = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFFTConv2 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuButterworthLowPass = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAddBlindWaterMark = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHighFrequencyEmphasizeFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBandPassFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuTextureRemoval = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHomomorphicFiltering = new System.Windows.Forms.ToolStripMenuItem();
			this.miscToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDevignetting = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMakeUp = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRemoveOutliers = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuStylize = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExposal = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFindEdges = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSoftglow = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuKuwaharaFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuOilPainting = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuPhotoCopy = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGlowingEdges = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuTraceContour = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMosaic = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLayerStyle = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuOther = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDisOrder = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHighPass = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMinFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMaxFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRangeFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuOpen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuClose = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripMenuItem3 = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMultImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBlend = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_LaplacePyramidFusion = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuNCC = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLaplacePyramidFusionWithMask = new System.Windows.Forms.ToolStripMenuItem();
			this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
			this.MenuMltiImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDivImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSubImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAddImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMaxImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMinImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSqrtImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLogImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuPowImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuScaleImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuAbsDiffImage = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuImageInfo = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuStdFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSkineArea = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDifferentColorCount = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuVectorField = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLawsTextureFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEntropy = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEstimateNoise = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEstimateTiltAndSlant = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMedianAbsoluteDeviation = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSharpness = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSymmetry = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBinary = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGlobalBinary = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLocalBinary = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWellnerAdaptiveThreshold = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuNiblackAdaptiveThreshold = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBernsenAdaptiveThreshold = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuIM_SauvolaAdaptiveThresholding = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuPhansalkar = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuWan = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDynamicThreshold = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuVarLocalThresholding = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHysteresisThresholding = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDualThreshold = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuProcessing = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuClearIsolatePoint = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuErode = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDilate = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFillHole = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuThinZhang = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuThinGuo = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMorph = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMajority = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFeature = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGetOutline = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuShowEuclideanDistanceMap = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEuler = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuArea = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBinaryInfo = new System.Windows.Forms.ToolStripMenuItem();
			this.morphologicalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuImageReconstruction = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuImposeMin = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRegionalMax = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRegionalMin = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHMax = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHMin = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExtendedMax = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExtendedMin = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExtendFillHole = new System.Windows.Forms.ToolStripMenuItem();
			this.MennUltimateErodedSet = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuExtendClearBorder = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDoubleThresholding = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuTopHat = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuBlackHat = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeDetection = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSalientRegionDetection = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFT = new System.Windows.Forms.ToolStripMenuItem();
			this.imageSegmentationå¾ååå²ToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHCM = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_HighPass_Image = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSobel = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeBandPass = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_Prewitt = new System.Windows.Forms.ToolStripMenuItem();
			this.edgeRobinsonToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_Kirsch = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_Frei_Chen = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeLaplace = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_Roberts = new System.Windows.Forms.ToolStripMenuItem();
			this.edgeHighPassImageToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeScharr = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdge_Laplace_of_Gauss = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeDeriche = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuEdgeCanny = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLightCompensation = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuMaskDodging = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDeinterlace = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDestripe = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuPureBackGround = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuImageExtraction = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuShadingCorrection = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuRemoveBackGround = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuSpecularityRemoval = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDerivateGauss = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuGaborFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuStandandGaborFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLogGaborFilter = new System.Windows.Forms.ToolStripMenuItem();
			this.redfieldFractaliusToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.testToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuHistgram = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuFiberMetric = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuDeInterlace_Enhance = new System.Windows.Forms.ToolStripMenuItem();
			this.MenuLineGauss = new System.Windows.Forms.ToolStripMenuItem();
			this.Container.BottomToolStripPanel.SuspendLayout();
			this.Container.ContentPanel.SuspendLayout();
			this.Container.TopToolStripPanel.SuspendLayout();
			this.Container.SuspendLayout();
			this.StatusBar.SuspendLayout();
			this.zoomContextMenuStrip.SuspendLayout();
			this.ChannelMenu.SuspendLayout();
			this.MyMenu.SuspendLayout();
			base.SuspendLayout();
			this.Container.BottomToolStripPanel.Controls.Add(this.StatusBar);
			this.Container.ContentPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.Container.ContentPanel.Controls.Add(this.ScrollV);
			this.Container.ContentPanel.Controls.Add(this.ScrollH);
			this.Container.ContentPanel.Controls.Add(this.MainCanvas);
			this.Container.ContentPanel.Size = new System.Drawing.Size(1277, 454);
			this.Container.ContentPanel.Load += new System.EventHandler(Container_ContentPanel_Load);
			this.Container.ContentPanel.MouseWheel += new System.Windows.Forms.MouseEventHandler(Canvas_MouseWheel);
			this.Container.Dock = System.Windows.Forms.DockStyle.Fill;
			this.Container.Location = new System.Drawing.Point(0, 0);
			this.Container.Name = "Container";
			this.Container.Size = new System.Drawing.Size(1277, 502);
			this.Container.TabIndex = 10;
			this.Container.Text = "Container";
			this.Container.TopToolStripPanel.Controls.Add(this.MyMenu);
			this.StatusBar.Dock = System.Windows.Forms.DockStyle.None;
			this.StatusBar.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.StatusBar.Items.AddRange(new System.Windows.Forms.ToolStripItem[8] { this.pathToolStripStatusLabel, this.ZoomFactor, this.ChannelStatus, this.mouseToolStripStatusLabel, this.sizeToolStripStatusLabel, this.TimeUse, this.FilePathStatus, this.toolStripStatusLabel1 });
			this.StatusBar.LayoutStyle = System.Windows.Forms.ToolStripLayoutStyle.HorizontalStackWithOverflow;
			this.StatusBar.Location = new System.Drawing.Point(0, 0);
			this.StatusBar.Name = "StatusBar";
			this.StatusBar.Size = new System.Drawing.Size(1277, 23);
			this.StatusBar.TabIndex = 7;
			this.StatusBar.Text = "ç¶ææ ";
			this.pathToolStripStatusLabel.Name = "pathToolStripStatusLabel";
			this.pathToolStripStatusLabel.Size = new System.Drawing.Size(0, 18);
			this.ZoomFactor.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.ZoomFactor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			this.ZoomFactor.DropDown = this.zoomContextMenuStrip;
			this.ZoomFactor.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.ZoomFactor.Name = "ZoomFactor";
			this.ZoomFactor.RightToLeftAutoMirrorImage = true;
			this.ZoomFactor.Size = new System.Drawing.Size(53, 21);
			this.ZoomFactor.Text = "100%";
			this.zoomContextMenuStrip.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.zoomContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[9] { this.MenuZoom12, this.MenuZoom25, this.MenuZoom50, this.MenuZoom100, this.MenuZoom200, this.MenuZoom300, this.MenuZoom400, this.MenuZoom500, this.MenuZoom1000 });
			this.zoomContextMenuStrip.Name = "contextMenuStrip_Zoom";
			this.zoomContextMenuStrip.OwnerItem = this.ZoomFactor;
			this.zoomContextMenuStrip.Size = new System.Drawing.Size(116, 202);
			this.zoomContextMenuStrip.Text = "ç¼©æ¾";
			this.MenuZoom12.Name = "MenuZoom12";
			this.MenuZoom12.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom12.Text = "12.5%";
			this.MenuZoom12.Click += new System.EventHandler(MenuZoom12_Click);
			this.MenuZoom25.Name = "MenuZoom25";
			this.MenuZoom25.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom25.Text = "25%";
			this.MenuZoom25.Click += new System.EventHandler(MenuZoom25_Click);
			this.MenuZoom50.Name = "MenuZoom50";
			this.MenuZoom50.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom50.Text = "50%";
			this.MenuZoom50.Click += new System.EventHandler(MenuZoom50_Click);
			this.MenuZoom100.Checked = true;
			this.MenuZoom100.CheckState = System.Windows.Forms.CheckState.Checked;
			this.MenuZoom100.Name = "MenuZoom100";
			this.MenuZoom100.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom100.Text = "100%";
			this.MenuZoom100.Click += new System.EventHandler(MenuZoom100_Click);
			this.MenuZoom200.Name = "MenuZoom200";
			this.MenuZoom200.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom200.Text = "200%";
			this.MenuZoom200.Click += new System.EventHandler(MenuZoom200_Click);
			this.MenuZoom300.Name = "MenuZoom300";
			this.MenuZoom300.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom300.Text = "300%";
			this.MenuZoom300.Click += new System.EventHandler(MenuZoom300_Click);
			this.MenuZoom400.Name = "MenuZoom400";
			this.MenuZoom400.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom400.Text = "400%";
			this.MenuZoom400.Click += new System.EventHandler(MenuZoom400_Click);
			this.MenuZoom500.Name = "MenuZoom500";
			this.MenuZoom500.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom500.Text = "500%";
			this.MenuZoom500.Click += new System.EventHandler(MenuZoom500_Click);
			this.MenuZoom1000.Name = "MenuZoom1000";
			this.MenuZoom1000.Size = new System.Drawing.Size(115, 22);
			this.MenuZoom1000.Text = "1000%";
			this.MenuZoom1000.Click += new System.EventHandler(MenuZoom1000_Click);
			this.ChannelStatus.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.ChannelStatus.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
			this.ChannelStatus.DropDown = this.ChannelMenu;
			this.ChannelStatus.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.ChannelStatus.Name = "ChannelStatus";
			this.ChannelStatus.RightToLeftAutoMirrorImage = true;
			this.ChannelStatus.Size = new System.Drawing.Size(90, 21);
			this.ChannelStatus.Text = "BGR - 3éé";
			this.ChannelMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.ChannelMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.MenuGrayMode, this.MenuBGR, this.MenuBGRA });
			this.ChannelMenu.Name = "contextMenuStrip_Zoom";
			this.ChannelMenu.OwnerItem = this.ChannelStatus;
			this.ChannelMenu.Size = new System.Drawing.Size(154, 70);
			this.ChannelMenu.Text = "éé";
			this.MenuGrayMode.Name = "MenuGrayMode";
			this.MenuGrayMode.Size = new System.Drawing.Size(153, 22);
			this.MenuGrayMode.Text = "GrayMode";
			this.MenuGrayMode.Click += new System.EventHandler(MenuGrayMode_Click);
			this.MenuBGR.Name = "MenuBGR";
			this.MenuBGR.Size = new System.Drawing.Size(153, 22);
			this.MenuBGR.Text = "BGR - 3éé";
			this.MenuBGR.Click += new System.EventHandler(MenuBGR_Click);
			this.MenuBGRA.Name = "MenuBGRA";
			this.MenuBGRA.Size = new System.Drawing.Size(153, 22);
			this.MenuBGRA.Text = "BGRA - 4éé";
			this.MenuBGRA.Click += new System.EventHandler(MenuBGRA_Click);
			this.mouseToolStripStatusLabel.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.mouseToolStripStatusLabel.AutoSize = false;
			this.mouseToolStripStatusLabel.Name = "mouseToolStripStatusLabel";
			this.mouseToolStripStatusLabel.Size = new System.Drawing.Size(300, 17);
			this.mouseToolStripStatusLabel.Click += new System.EventHandler(mouseToolStripStatusLabel_Click);
			this.sizeToolStripStatusLabel.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.sizeToolStripStatusLabel.AutoSize = false;
			this.sizeToolStripStatusLabel.Name = "sizeToolStripStatusLabel";
			this.sizeToolStripStatusLabel.Size = new System.Drawing.Size(150, 17);
			this.TimeUse.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
			this.TimeUse.AutoSize = false;
			this.TimeUse.BorderSides = System.Windows.Forms.ToolStripStatusLabelBorderSides.Left;
			this.TimeUse.BorderStyle = System.Windows.Forms.Border3DStyle.RaisedOuter;
			this.TimeUse.Name = "TimeUse";
			this.TimeUse.Size = new System.Drawing.Size(500, 17);
			this.FilePathStatus.Name = "FilePathStatus";
			this.FilePathStatus.Size = new System.Drawing.Size(0, 18);
			this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
			this.toolStripStatusLabel1.Size = new System.Drawing.Size(0, 18);
			this.ScrollV.Dock = System.Windows.Forms.DockStyle.Right;
			this.ScrollV.Location = new System.Drawing.Point(1259, 0);
			this.ScrollV.Name = "ScrollV";
			this.ScrollV.Size = new System.Drawing.Size(16, 436);
			this.ScrollV.TabIndex = 13;
			this.ScrollV.Visible = false;
			this.ScrollV.Scroll += new System.Windows.Forms.ScrollEventHandler(ScrollV_Scroll);
			this.ScrollH.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.ScrollH.Location = new System.Drawing.Point(0, 436);
			this.ScrollH.Name = "ScrollH";
			this.ScrollH.Size = new System.Drawing.Size(1275, 16);
			this.ScrollH.TabIndex = 12;
			this.ScrollH.Visible = false;
			this.ScrollH.Scroll += new System.Windows.Forms.ScrollEventHandler(ScrollH_Scroll);
			this.MainCanvas.BackColor = System.Drawing.SystemColors.ButtonHighlight;
			this.MainCanvas.BackgroundImage = (System.Drawing.Image)resources.GetObject("MainCanvas.BackgroundImage");
			this.MainCanvas.Channel = 3;
			this.MainCanvas.Image = null;
			this.MainCanvas.ImageFile = "";
			this.MainCanvas.Location = new System.Drawing.Point(323, 28);
			this.MainCanvas.Margin = new System.Windows.Forms.Padding(4);
			this.MainCanvas.Name = "MainCanvas";
			this.MainCanvas.Size = new System.Drawing.Size(521, 379);
			this.MainCanvas.TabIndex = 11;
			this.MainCanvas.Zoom = 1.0;
			this.MainCanvas.Load += new System.EventHandler(MainCanvas_Load);
			this.MainCanvas.MouseMove += new System.Windows.Forms.MouseEventHandler(MainCanvas_MouseMove);
			this.MainCanvas.Resize += new System.EventHandler(MainCanvas_Resize);
			this.MyMenu.AccessibleRole = System.Windows.Forms.AccessibleRole.MenuBar;
			this.MyMenu.Dock = System.Windows.Forms.DockStyle.None;
			this.MyMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.MyMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[12]
			{
				this.fileToolStripMenuItem, this.MenuEdit, this.MenuAdjust, this.MenuBlur, this.MenuEnhance, this.MenuStylize, this.MenuOther, this.MenuBinary, this.morphologicalToolStripMenuItem, this.MenuEdgeDetection,
				this.testToolStripMenuItem, this.MenuHistgram
			});
			this.MyMenu.Location = new System.Drawing.Point(0, 0);
			this.MyMenu.Name = "MyMenu";
			this.MyMenu.Size = new System.Drawing.Size(1277, 25);
			this.MyMenu.TabIndex = 9;
			this.MyMenu.Text = "menuStrip1";
			this.MyMenu.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(MyMenu_ItemClicked);
			this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.MenuLoad, this.MenuSave, this.MenuExit });
			this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
			this.fileToolStripMenuItem.Size = new System.Drawing.Size(71, 21);
			this.fileToolStripMenuItem.Text = "File(æä»¶)";
			this.MenuLoad.Name = "MenuLoad";
			this.MenuLoad.Size = new System.Drawing.Size(153, 22);
			this.MenuLoad.Text = "Loadï¼æå¼ï¼";
			this.MenuLoad.Click += new System.EventHandler(MenuLoad_Click);
			this.MenuSave.Name = "MenuSave";
			this.MenuSave.Size = new System.Drawing.Size(153, 22);
			this.MenuSave.Text = "Saveï¼ä¿å­ï¼";
			this.MenuSave.Click += new System.EventHandler(MenuSave_Click);
			this.MenuExit.Name = "MenuExit";
			this.MenuExit.Size = new System.Drawing.Size(153, 22);
			this.MenuExit.Text = "Exitï¼éåºï¼";
			this.MenuExit.Click += new System.EventHandler(MenuExit_Click);
			this.MenuEdit.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[13]
			{
				this.Undo, this.Redo, this.toolStripSeparator2, this.MenuFlipLeftRight, this.MenuFlipTopBottom, this.MenuTranspose, this.MenuRotate90, this.Menu270, this.MenuRotate180, this.MenuRotate,
				this.MenuResample, this.MenuBitBlt, this.MenuHqnx
			});
			this.MenuEdit.Name = "MenuEdit";
			this.MenuEdit.Size = new System.Drawing.Size(74, 21);
			this.MenuEdit.Text = "Edit(ç¼è¾)";
			this.Undo.Name = "Undo";
			this.Undo.ShortcutKeys = System.Windows.Forms.Keys.Z | System.Windows.Forms.Keys.Control;
			this.Undo.Size = new System.Drawing.Size(234, 22);
			this.Undo.Text = "Undo(æ¤éï¼";
			this.Undo.Click += new System.EventHandler(Undo_Click);
			this.Redo.Name = "Redo";
			this.Redo.ShortcutKeys = System.Windows.Forms.Keys.Y | System.Windows.Forms.Keys.Control;
			this.Redo.Size = new System.Drawing.Size(234, 22);
			this.Redo.Text = "Redo(éå)";
			this.Redo.Click += new System.EventHandler(Redo_Click);
			this.toolStripSeparator2.Name = "toolStripSeparator2";
			this.toolStripSeparator2.Size = new System.Drawing.Size(231, 6);
			this.MenuFlipLeftRight.Name = "MenuFlipLeftRight";
			this.MenuFlipLeftRight.Size = new System.Drawing.Size(234, 22);
			this.MenuFlipLeftRight.Text = "FlipLeftRightï¼å·¦å³ç¿»è½¬ï¼";
			this.MenuFlipLeftRight.Click += new System.EventHandler(MenuFlipLeftRight_Click);
			this.MenuFlipTopBottom.Name = "MenuFlipTopBottom";
			this.MenuFlipTopBottom.Size = new System.Drawing.Size(234, 22);
			this.MenuFlipTopBottom.Text = "FlipTopBottomï¼ä¸ä¸ç¿»è½¬ï¼";
			this.MenuFlipTopBottom.Click += new System.EventHandler(MenuFlipTopBottom_Click);
			this.MenuTranspose.Name = "MenuTranspose";
			this.MenuTranspose.Size = new System.Drawing.Size(234, 22);
			this.MenuTranspose.Text = "Transposeï¼è½¬ç½®ï¼";
			this.MenuTranspose.Click += new System.EventHandler(MenuTranspose_Click);
			this.MenuRotate90.Name = "MenuRotate90";
			this.MenuRotate90.Size = new System.Drawing.Size(234, 22);
			this.MenuRotate90.Text = "Rotate90ï¼æè½¬90åº¦ï¼";
			this.MenuRotate90.Click += new System.EventHandler(MenuRotate90_Click);
			this.Menu270.Name = "Menu270";
			this.Menu270.Size = new System.Drawing.Size(234, 22);
			this.Menu270.Text = "Rotate270ï¼æè½¬270åº¦ï¼";
			this.Menu270.Click += new System.EventHandler(Menu270_Click);
			this.MenuRotate180.Name = "MenuRotate180";
			this.MenuRotate180.Size = new System.Drawing.Size(234, 22);
			this.MenuRotate180.Text = "Rotate180ï¼æè½¬180åº¦ï¼";
			this.MenuRotate180.Click += new System.EventHandler(MenuRotate180_Click);
			this.MenuRotate.Name = "MenuRotate";
			this.MenuRotate.Size = new System.Drawing.Size(234, 22);
			this.MenuRotate.Text = "Rotateï¼æè½¬ï¼";
			this.MenuRotate.Click += new System.EventHandler(MenuRotate_Click);
			this.MenuResample.Name = "MenuResample";
			this.MenuResample.Size = new System.Drawing.Size(234, 22);
			this.MenuResample.Text = "Resampleï¼ç¼©æ¾ï¼";
			this.MenuResample.Click += new System.EventHandler(MenuResample_Click);
			this.MenuBitBlt.Name = "MenuBitBlt";
			this.MenuBitBlt.Size = new System.Drawing.Size(234, 22);
			this.MenuBitBlt.Text = "BitBlt";
			this.MenuBitBlt.Click += new System.EventHandler(MenuBitBlt_Click);
			this.MenuHqnx.Name = "MenuHqnx";
			this.MenuHqnx.Size = new System.Drawing.Size(234, 22);
			this.MenuHqnx.Text = "Hqnx";
			this.MenuHqnx.Click += new System.EventHandler(MenuHqnx_Click);
			this.MenuAdjust.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[16]
			{
				this.MenuAutoLevel, this.MenuAutoContrast, this.MenuAutoGammaCorrection, this.MenuAutoEnhanceColors, this.MenuInvert, this.MenuAdjustBrightnessAndContrast, this.MenuCurve, this.MenuAdjustHSL, this.MenuDesaturate, this.MenuExposure,
				this.MenuVibrance, this.MenuHistGramMatching, this.MenuShadowAndHighlight, this.HistogramEqualization, this.MenuAWB_GrayWorld, this.MenuLut
			});
			this.MenuAdjust.Name = "MenuAdjust";
			this.MenuAdjust.Size = new System.Drawing.Size(96, 21);
			this.MenuAdjust.Text = "Adjust(è°æ´ï¼";
			this.MenuAdjust.Click += new System.EventHandler(MenuAdjust_Click);
			this.MenuAutoLevel.Name = "MenuAutoLevel";
			this.MenuAutoLevel.Size = new System.Drawing.Size(340, 22);
			this.MenuAutoLevel.Text = "Auto Levelï¼èªå¨è²é¶ï¼";
			this.MenuAutoLevel.Click += new System.EventHandler(MenuAutoLevel_Click);
			this.MenuAutoContrast.Name = "MenuAutoContrast";
			this.MenuAutoContrast.Size = new System.Drawing.Size(340, 22);
			this.MenuAutoContrast.Text = "Auto Contrastï¼èªå¨å¯¹æ¯åº¦ï¼";
			this.MenuAutoContrast.Click += new System.EventHandler(MenuAutoContrast_Click);
			this.MenuAutoGammaCorrection.Name = "MenuAutoGammaCorrection";
			this.MenuAutoGammaCorrection.Size = new System.Drawing.Size(340, 22);
			this.MenuAutoGammaCorrection.Text = "Auto Gamma Correctionï¼èªå¨Gammaæ ¡æ­£ï¼";
			this.MenuAutoGammaCorrection.Click += new System.EventHandler(MenuAutoGammaCorrection_Click);
			this.MenuAutoEnhanceColors.Name = "MenuAutoEnhanceColors";
			this.MenuAutoEnhanceColors.Size = new System.Drawing.Size(340, 22);
			this.MenuAutoEnhanceColors.Text = "Auto Enhance Colorsï¼èªå¨é¢è²å¢å¼ºï¼";
			this.MenuAutoEnhanceColors.Click += new System.EventHandler(MenuAutoEnhanceColors_Click);
			this.MenuInvert.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuInvert.Name = "MenuInvert";
			this.MenuInvert.Size = new System.Drawing.Size(340, 22);
			this.MenuInvert.Text = "Invertï¼åç¸ï¼";
			this.MenuInvert.Click += new System.EventHandler(MenuInvert_Click);
			this.MenuAdjustBrightnessAndContrast.Name = "MenuAdjustBrightnessAndContrast";
			this.MenuAdjustBrightnessAndContrast.Size = new System.Drawing.Size(340, 22);
			this.MenuAdjustBrightnessAndContrast.Text = "Adjust Brightness and Contrastï¼äº®åº¦å¯¹æ¯åº¦ï¼";
			this.MenuAdjustBrightnessAndContrast.Click += new System.EventHandler(MenuAdjustBrightnessAndContrast_Click);
			this.MenuCurve.Name = "MenuCurve";
			this.MenuCurve.Size = new System.Drawing.Size(340, 22);
			this.MenuCurve.Text = "Curveï¼æ²çº¿ï¼";
			this.MenuCurve.Click += new System.EventHandler(MenuCurve_Click);
			this.MenuAdjustHSL.Name = "MenuAdjustHSL";
			this.MenuAdjustHSL.Size = new System.Drawing.Size(340, 22);
			this.MenuAdjustHSL.Text = "Adjust HSLï¼è²ç¸é¥±ååº¦ï¼";
			this.MenuAdjustHSL.Click += new System.EventHandler(MenuAdjustHSL_Click);
			this.MenuDesaturate.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDesaturate.Name = "MenuDesaturate";
			this.MenuDesaturate.Size = new System.Drawing.Size(340, 22);
			this.MenuDesaturate.Text = "Desaturateï¼å»è²ï¼";
			this.MenuDesaturate.Click += new System.EventHandler(MenuDesaturate_Click);
			this.MenuExposure.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuExposure.Name = "MenuExposure";
			this.MenuExposure.Size = new System.Drawing.Size(340, 22);
			this.MenuExposure.Text = "Exposureï¼æååº¦ï¼";
			this.MenuExposure.Click += new System.EventHandler(MenuExposure_Click);
			this.MenuVibrance.Name = "MenuVibrance";
			this.MenuVibrance.Size = new System.Drawing.Size(340, 22);
			this.MenuVibrance.Text = "Vibranceï¼èªç¶é¥±ååº¦ï¼";
			this.MenuVibrance.Click += new System.EventHandler(MenuVibrance_Click);
			this.MenuHistGramMatching.Name = "MenuHistGramMatching";
			this.MenuHistGramMatching.Size = new System.Drawing.Size(340, 22);
			this.MenuHistGramMatching.Text = "Histgram Matchingï¼ç´æ¹å¾å¹éï¼";
			this.MenuHistGramMatching.Click += new System.EventHandler(MenuHistGramMatching_Click);
			this.MenuShadowAndHighlight.Name = "MenuShadowAndHighlight";
			this.MenuShadowAndHighlight.Size = new System.Drawing.Size(340, 22);
			this.MenuShadowAndHighlight.Text = "Shadow And Highlightï¼æè°åé«åï¼";
			this.MenuShadowAndHighlight.Click += new System.EventHandler(MenuShadowAndHighlight_Click_1);
			this.HistogramEqualization.Name = "HistogramEqualization";
			this.HistogramEqualization.Size = new System.Drawing.Size(340, 22);
			this.HistogramEqualization.Text = "Histgram Equalizationï¼ç´æ¹å¾åè¡¡åï¼";
			this.HistogramEqualization.Click += new System.EventHandler(HistogramEqualization_Click);
			this.MenuAWB_GrayWorld.Name = "MenuAWB_GrayWorld";
			this.MenuAWB_GrayWorld.Size = new System.Drawing.Size(340, 22);
			this.MenuAWB_GrayWorld.Text = "AWB GrayWorldï¼ç°åº¦ä¸çç½å¹³è¡¡ï¼";
			this.MenuAWB_GrayWorld.Click += new System.EventHandler(MenuAWB_GrayWorld_Click);
			this.MenuLut.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[1] { this.MenuLut2D });
			this.MenuLut.Name = "MenuLut";
			this.MenuLut.Size = new System.Drawing.Size(340, 22);
			this.MenuLut.Text = "Lutï¼æ å°ï¼";
			this.MenuLut2D.Name = "MenuLut2D";
			this.MenuLut2D.Size = new System.Drawing.Size(109, 22);
			this.MenuLut2D.Text = "Lut2D";
			this.MenuLut2D.Click += new System.EventHandler(MenuLut2D_Click);
			this.MenuBlur.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[12]
			{
				this.MenuAverageBlur, this.MenuBoxBlur, this.MenuLinearBlur, this.MenuExpBlur, this.MenuGaussBlur, this.Median, this.MenuMotionBlur, this.MenuZoomBlur, this.MenuSurfaceBlur, this.MenuSmartBlur,
				this.MenuSelectiveBlur, this.MenuRadialBlur
			});
			this.MenuBlur.Name = "MenuBlur";
			this.MenuBlur.Size = new System.Drawing.Size(75, 21);
			this.MenuBlur.Text = "Blur(æ¨¡ç³)";
			this.MenuAverageBlur.Name = "MenuAverageBlur";
			this.MenuAverageBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuAverageBlur.Text = "AverageBlurï¼å¹³åå¼ï¼";
			this.MenuAverageBlur.Click += new System.EventHandler(MenuAverageBlur_Click);
			this.MenuBoxBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuBoxBlur.Name = "MenuBoxBlur";
			this.MenuBoxBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuBoxBlur.Text = "BoxBlurï¼æ¹æ¡æ¨¡ç³ï¼";
			this.MenuBoxBlur.Click += new System.EventHandler(MenuBoxBlur_Click);
			this.MenuLinearBlur.Name = "MenuLinearBlur";
			this.MenuLinearBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuLinearBlur.Text = "LinearBlurï¼çº¿æ§æ¨¡ç³ï¼";
			this.MenuLinearBlur.Click += new System.EventHandler(MenuLinearBlur_Click);
			this.MenuExpBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuExpBlur.Name = "MenuExpBlur";
			this.MenuExpBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuExpBlur.Text = "Exp Blurï¼ææ°æ¨¡ç³ï¼";
			this.MenuExpBlur.Click += new System.EventHandler(MenuExpBlur_Click);
			this.MenuGaussBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuGaussBlur.Name = "MenuGaussBlur";
			this.MenuGaussBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuGaussBlur.Text = "GaussBlurï¼é«æ¯æ¨¡ç³ï¼";
			this.MenuGaussBlur.Click += new System.EventHandler(MenuGaussBlur_Click);
			this.Median.ForeColor = System.Drawing.SystemColors.Highlight;
			this.Median.Name = "Median";
			this.Median.Size = new System.Drawing.Size(219, 22);
			this.Median.Text = "Median Blurï¼ä¸­å¼æ»¤æ³¢ï¼";
			this.Median.Click += new System.EventHandler(Median_Click);
			this.MenuMotionBlur.Name = "MenuMotionBlur";
			this.MenuMotionBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuMotionBlur.Text = "MotionBlurï¼è¿å¨æ¨¡ç³ï¼";
			this.MenuMotionBlur.Click += new System.EventHandler(MenuMotionBlur_Click);
			this.MenuZoomBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuZoomBlur.Name = "MenuZoomBlur";
			this.MenuZoomBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuZoomBlur.Text = "ZoomBlurï¼ç¼©æ¾æ¨¡ç³ï¼";
			this.MenuZoomBlur.Click += new System.EventHandler(MenuZoomBlur_Click);
			this.MenuSurfaceBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuSurfaceBlur.Name = "MenuSurfaceBlur";
			this.MenuSurfaceBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuSurfaceBlur.Text = "SurfaceBlur(è¡¨é¢æ¨¡ç³)";
			this.MenuSurfaceBlur.Click += new System.EventHandler(MenuSurfaceBlur_Click);
			this.MenuSmartBlur.Name = "MenuSmartBlur";
			this.MenuSmartBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuSmartBlur.Text = "SmartBlurï¼æºè½æ¨¡ç³ï¼";
			this.MenuSmartBlur.Click += new System.EventHandler(MenuSmartBlur_Click);
			this.MenuSelectiveBlur.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuSelectiveBlur.Name = "MenuSelectiveBlur";
			this.MenuSelectiveBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuSelectiveBlur.Text = "SelectiveBlur(éæ©æ§æ¨¡ç³)";
			this.MenuSelectiveBlur.Click += new System.EventHandler(MenuSelectiveBlur_Click);
			this.MenuRadialBlur.Name = "MenuRadialBlur";
			this.MenuRadialBlur.Size = new System.Drawing.Size(219, 22);
			this.MenuRadialBlur.Text = "RadialBlur(å¾åæ¨¡ç³)";
			this.MenuRadialBlur.Click += new System.EventHandler(MenuRadialBlur_Click);
			this.MenuEnhance.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9] { this.MenuNoise, this.MenuDenoise, this.MenuSharpen, this.detailEnhancementToolStripMenuItem, this.MenuHdr, this.toolStripMenuItem4, this.lowLightImageEnhancementToolStripMenuItem, this.MenuFFT, this.miscToolStripMenuItem });
			this.MenuEnhance.Name = "MenuEnhance";
			this.MenuEnhance.Size = new System.Drawing.Size(100, 21);
			this.MenuEnhance.Text = "Enhance(å¢å¼º)";
			this.MenuEnhance.Click += new System.EventHandler(MenuEnhance_Click);
			this.MenuNoise.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9] { this.MenuWhiteNoise, this.MenuFastDenoising, this.MenuDCT_Denoising, this.MenuWaveletDenoise, this.MenuNLMMeans, this.MenuDustAndScratches, this.MenuTVDenoising, this.MenuAdaptiveMedianFilter, this.MenuConservativeDenoising });
			this.MenuNoise.Name = "MenuNoise";
			this.MenuNoise.Size = new System.Drawing.Size(362, 22);
			this.MenuNoise.Text = "Noise(åªé³ç¸å³)";
			this.MenuWhiteNoise.Name = "MenuWhiteNoise";
			this.MenuWhiteNoise.Size = new System.Drawing.Size(299, 22);
			this.MenuWhiteNoise.Text = "AddNoiseï¼æ·»å åªé³ï¼";
			this.MenuWhiteNoise.Click += new System.EventHandler(MenuWhiteNoise_Click);
			this.MenuFastDenoising.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuFastDenoising.Name = "MenuFastDenoising";
			this.MenuFastDenoising.Size = new System.Drawing.Size(299, 22);
			this.MenuFastDenoising.Text = "Fast Denoisingï¼å¿«éå»åªï¼";
			this.MenuFastDenoising.Click += new System.EventHandler(MenuFastDenoising_Click);
			this.MenuDCT_Denoising.BackColor = System.Drawing.SystemColors.Control;
			this.MenuDCT_Denoising.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDCT_Denoising.Name = "MenuDCT_Denoising";
			this.MenuDCT_Denoising.Size = new System.Drawing.Size(299, 22);
			this.MenuDCT_Denoising.Text = "DCT_Denoisingï¼DCTå»åªï¼";
			this.MenuDCT_Denoising.Click += new System.EventHandler(MenuDCT_Denoising_Click);
			this.MenuWaveletDenoise.Name = "MenuWaveletDenoise";
			this.MenuWaveletDenoise.Size = new System.Drawing.Size(299, 22);
			this.MenuWaveletDenoise.Text = "Wavelet Denoise(å°æ³¢å»åª)";
			this.MenuWaveletDenoise.Click += new System.EventHandler(MenuWaveletDenoise_Click);
			this.MenuNLMMeans.Name = "MenuNLMMeans";
			this.MenuNLMMeans.Size = new System.Drawing.Size(299, 22);
			this.MenuNLMMeans.Text = "NLMeans(éå±é¨åå¼å»ç¥)";
			this.MenuNLMMeans.Click += new System.EventHandler(MenuNLMMeans_Click);
			this.MenuDustAndScratches.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDustAndScratches.Name = "MenuDustAndScratches";
			this.MenuDustAndScratches.Size = new System.Drawing.Size(299, 22);
			this.MenuDustAndScratches.Text = "DustAndScratchesï¼èå°ååçï¼";
			this.MenuDustAndScratches.Click += new System.EventHandler(MenuDustAndScratches_Click);
			this.MenuTVDenoising.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuTVDenoising.Name = "MenuTVDenoising";
			this.MenuTVDenoising.Size = new System.Drawing.Size(299, 22);
			this.MenuTVDenoising.Text = "TV Denoisingï¼TVå»åªï¼";
			this.MenuTVDenoising.Click += new System.EventHandler(MenuTVDenoising_Click);
			this.MenuAdaptiveMedianFilter.Name = "MenuAdaptiveMedianFilter";
			this.MenuAdaptiveMedianFilter.Size = new System.Drawing.Size(299, 22);
			this.MenuAdaptiveMedianFilter.Text = "Adaptive Median Filter(èªéåºä¸­å¼æ»¤æ³¢)";
			this.MenuAdaptiveMedianFilter.Click += new System.EventHandler(MenuAdaptiveMedianFilter_Click);
			this.MenuConservativeDenoising.Name = "MenuConservativeDenoising";
			this.MenuConservativeDenoising.Size = new System.Drawing.Size(299, 22);
			this.MenuConservativeDenoising.Text = "Conservative Denoising(ä¿å®å¹³æ»ï¼";
			this.MenuConservativeDenoising.Click += new System.EventHandler(MenuConservativeDenoising_Click);
			this.MenuDenoise.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[8] { this.MenuGuideFilter, this.MenuLeeAdditvieNoiseFilter, this.MenuCurvatureFilter, this.MenuWeightedMedianBlur, this.MenuSeparableBilateralFilter, this.MenuDomainTransformFilter, this.MenuAnisotropicDiffusion3X3, this.MenuDeBlocking });
			this.MenuDenoise.Name = "MenuDenoise";
			this.MenuDenoise.Size = new System.Drawing.Size(362, 22);
			this.MenuDenoise.Text = "Edge-Preserving Filer(è¾¹ç¼ä¿çæ»¤æ³¢å¨)";
			this.MenuGuideFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuGuideFilter.Name = "MenuGuideFilter";
			this.MenuGuideFilter.Size = new System.Drawing.Size(318, 22);
			this.MenuGuideFilter.Text = "GuidedFilterï¼å¯¼åæ»¤æ³¢ï¼";
			this.MenuGuideFilter.Click += new System.EventHandler(MenuGuideFilter_Click);
			this.MenuLeeAdditvieNoiseFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuLeeAdditvieNoiseFilter.Name = "MenuLeeAdditvieNoiseFilter";
			this.MenuLeeAdditvieNoiseFilter.Size = new System.Drawing.Size(318, 22);
			this.MenuLeeAdditvieNoiseFilter.Text = "LeeAdditvieNoiseFilterï¼LEEåæ¹å·®æ»¤æ³¢ï¼";
			this.MenuLeeAdditvieNoiseFilter.Click += new System.EventHandler(MenuLeeAdditvieNoiseFilter_Click);
			this.MenuCurvatureFilter.Name = "MenuCurvatureFilter";
			this.MenuCurvatureFilter.Size = new System.Drawing.Size(318, 22);
			this.MenuCurvatureFilter.Text = "CurvatureFilterï¼æ²çæ»¤æ³¢ï¼";
			this.MenuCurvatureFilter.Click += new System.EventHandler(MenuCurvatureFilter_Click);
			this.MenuWeightedMedianBlur.Name = "MenuWeightedMedianBlur";
			this.MenuWeightedMedianBlur.Size = new System.Drawing.Size(318, 22);
			this.MenuWeightedMedianBlur.Text = "WeightedMedianBlurï¼å æä¸­å¼æ¨¡ç³ï¼";
			this.MenuWeightedMedianBlur.Click += new System.EventHandler(MenuWeightedMedianBlur_Click);
			this.MenuSeparableBilateralFilter.Name = "MenuSeparableBilateralFilter";
			this.MenuSeparableBilateralFilter.Size = new System.Drawing.Size(318, 22);
			this.MenuSeparableBilateralFilter.Text = "SeparableBilateralFilterï¼åç¦»çåè¾¹æ»¤æ³¢ï¼";
			this.MenuSeparableBilateralFilter.Click += new System.EventHandler(MenuSeparableBilateralFilter_Click);
			this.MenuDomainTransformFilter.Name = "MenuDomainTransformFilter";
			this.MenuDomainTransformFilter.Size = new System.Drawing.Size(318, 22);
			this.MenuDomainTransformFilter.Text = "Domain Transform Filterï¼Domainæ»¤æ³¢ï¼";
			this.MenuDomainTransformFilter.Click += new System.EventHandler(MenuDomainTransformFilter_Click);
			this.MenuAnisotropicDiffusion3X3.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuAnisotropicDiffusion3X3.Name = "MenuAnisotropicDiffusion3X3";
			this.MenuAnisotropicDiffusion3X3.Size = new System.Drawing.Size(318, 22);
			this.MenuAnisotropicDiffusion3X3.Text = "Anisotropic Diffusionï¼åé¡¹å¼æ§æ©æ£ï¼";
			this.MenuAnisotropicDiffusion3X3.Click += new System.EventHandler(MenuAnisotropicDiffusion3X3_Click);
			this.MenuDeBlocking.Name = "MenuDeBlocking";
			this.MenuDeBlocking.Size = new System.Drawing.Size(318, 22);
			this.MenuDeBlocking.Text = "DeBlockingï¼å»åç¶ï¼";
			this.MenuDeBlocking.Click += new System.EventHandler(MenuDeBlocking_Click);
			this.MenuSharpen.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9] { this.MenuEasySharpen, this.MenuMultiScaleSharpen, this.MenuHighPassSharpen, this.MenuEPFSharpen, this.MenuMedianSharpen, this.MenuUnsharpMask, this.MenuRadiusSharpen, this.MenuEmphasize, this.MenuWaveletSharpen });
			this.MenuSharpen.Name = "MenuSharpen";
			this.MenuSharpen.Size = new System.Drawing.Size(362, 22);
			this.MenuSharpen.Text = "Sharpen(éå)";
			this.MenuEasySharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuEasySharpen.Name = "MenuEasySharpen";
			this.MenuEasySharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuEasySharpen.Text = "Sharpenï¼éåï¼";
			this.MenuEasySharpen.Click += new System.EventHandler(MenuEasySharpen_Click);
			this.MenuMultiScaleSharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMultiScaleSharpen.Name = "MenuMultiScaleSharpen";
			this.MenuMultiScaleSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuMultiScaleSharpen.Text = "MultiScaleSharpenï¼å¤å°ºåº¦éåï¼";
			this.MenuMultiScaleSharpen.Click += new System.EventHandler(MenuMultiScaleSharpen_Click);
			this.MenuHighPassSharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuHighPassSharpen.Name = "MenuHighPassSharpen";
			this.MenuHighPassSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuHighPassSharpen.Text = "Highpass Sharpenï¼é«åå·®ä¿çéåï¼";
			this.MenuHighPassSharpen.Click += new System.EventHandler(MenuHighPassSharpen_Click);
			this.MenuEPFSharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuEPFSharpen.Name = "MenuEPFSharpen";
			this.MenuEPFSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuEPFSharpen.Text = "Edge Preseved Sharpenï¼è¾¹ç¼ä¿çéåï¼";
			this.MenuEPFSharpen.Click += new System.EventHandler(MenuEPFSharpen_Click);
			this.MenuMedianSharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMedianSharpen.Name = "MenuMedianSharpen";
			this.MenuMedianSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuMedianSharpen.Text = "MedianSharpenï¼ä¸­å¼éåï¼";
			this.MenuMedianSharpen.Click += new System.EventHandler(MenuMedianSharpen_Click);
			this.MenuUnsharpMask.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuUnsharpMask.Name = "MenuUnsharpMask";
			this.MenuUnsharpMask.Size = new System.Drawing.Size(311, 22);
			this.MenuUnsharpMask.Text = "UnsharpMask(USMéåï¼";
			this.MenuUnsharpMask.Click += new System.EventHandler(MenuUnsharpMask_Click);
			this.MenuRadiusSharpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuRadiusSharpen.Name = "MenuRadiusSharpen";
			this.MenuRadiusSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuRadiusSharpen.Text = "Radius Sharpen 3X3ï¼3X3 Rankéåï¼";
			this.MenuRadiusSharpen.Click += new System.EventHandler(MenuRadiusSharpen_Click);
			this.MenuEmphasize.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuEmphasize.Name = "MenuEmphasize";
			this.MenuEmphasize.Size = new System.Drawing.Size(311, 22);
			this.MenuEmphasize.Text = "Emphasize(è¾¹ç¼å¼ºè°ï¼";
			this.MenuEmphasize.Click += new System.EventHandler(MenuEmphasize_Click);
			this.MenuWaveletSharpen.Name = "MenuWaveletSharpen";
			this.MenuWaveletSharpen.Size = new System.Drawing.Size(311, 22);
			this.MenuWaveletSharpen.Text = "Wavelet Sharpen(å°æ³¢éå)";
			this.MenuWaveletSharpen.Click += new System.EventHandler(MenuWaveletSharpen_Click);
			this.detailEnhancementToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[9] { this.MenuEnhancedCLAHE, this.MUSCIA, this.toolStripMenuItem1, this.MenuIM_LSD_SSE, this.MenuIM_EnhanceBasedOnErodeAndDilate, this.MenuIM_EnhanceContrastBasedonTopBotHat, this.MenuUnderWaterImageEnhancement, this.MenuIlluminateImage, this.MultiScaleContrastEnhancement });
			this.detailEnhancementToolStripMenuItem.Name = "detailEnhancementToolStripMenuItem";
			this.detailEnhancementToolStripMenuItem.Size = new System.Drawing.Size(362, 22);
			this.detailEnhancementToolStripMenuItem.Text = "Detail Enhancementï¼ç»èå¢å¼ºï¼";
			this.MenuEnhancedCLAHE.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuEnhancedCLAHE.Name = "MenuEnhancedCLAHE";
			this.MenuEnhancedCLAHE.Size = new System.Drawing.Size(208, 22);
			this.MenuEnhancedCLAHE.Text = "å¢å¼ºåCLAHE";
			this.MenuEnhancedCLAHE.Click += new System.EventHandler(MenuEnhancedCLAHE_Click);
			this.MUSCIA.Name = "MUSCIA";
			this.MUSCIA.Size = new System.Drawing.Size(208, 22);
			this.MUSCIA.Text = "MUSICAå¢å¼º";
			this.MUSCIA.Click += new System.EventHandler(MUSCIA_Click);
			this.toolStripMenuItem1.Name = "toolStripMenuItem1";
			this.toolStripMenuItem1.Size = new System.Drawing.Size(208, 22);
			this.toolStripMenuItem1.Text = "å±é¨ææ®ææ¯æ»¤æ³¢å¨";
			this.toolStripMenuItem1.Click += new System.EventHandler(toolStripMenuItem1_Click);
			this.MenuIM_LSD_SSE.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIM_LSD_SSE.Name = "MenuIM_LSD_SSE";
			this.MenuIM_LSD_SSE.Size = new System.Drawing.Size(208, 22);
			this.MenuIM_LSD_SSE.Text = "å±é¨æ¹å·®å¢å¼º";
			this.MenuIM_LSD_SSE.Click += new System.EventHandler(MenuIM_LSD_SSE_Click);
			this.MenuIM_EnhanceBasedOnErodeAndDilate.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIM_EnhanceBasedOnErodeAndDilate.Name = "MenuIM_EnhanceBasedOnErodeAndDilate";
			this.MenuIM_EnhanceBasedOnErodeAndDilate.Size = new System.Drawing.Size(208, 22);
			this.MenuIM_EnhanceBasedOnErodeAndDilate.Text = "åºäºå±é¨æå¼çå¢å¼º";
			this.MenuIM_EnhanceBasedOnErodeAndDilate.Click += new System.EventHandler(MenuIM_EnhanceBasedOnErodeAndDilate_Click);
			this.MenuIM_EnhanceContrastBasedonTopBotHat.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIM_EnhanceContrastBasedonTopBotHat.Name = "MenuIM_EnhanceContrastBasedonTopBotHat";
			this.MenuIM_EnhanceContrastBasedonTopBotHat.Size = new System.Drawing.Size(208, 22);
			this.MenuIM_EnhanceContrastBasedonTopBotHat.Text = "åºäºå½¢æå­¦çå¯¹æ¯åº¦è°æ´";
			this.MenuIM_EnhanceContrastBasedonTopBotHat.Click += new System.EventHandler(MenuIM_EnhanceContrastBasedonTopBotHat_Click);
			this.MenuUnderWaterImageEnhancement.Name = "MenuUnderWaterImageEnhancement";
			this.MenuUnderWaterImageEnhancement.Size = new System.Drawing.Size(208, 22);
			this.MenuUnderWaterImageEnhancement.Text = "åºäºèåçæ°´ä¸å¾åå¢å¼º";
			this.MenuUnderWaterImageEnhancement.Click += new System.EventHandler(MenuUnderWaterImageEnhancement_Click);
			this.MenuIlluminateImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIlluminateImage.Name = "MenuIlluminateImage";
			this.MenuIlluminateImage.Size = new System.Drawing.Size(208, 22);
			this.MenuIlluminateImage.Text = "ç§äº®å¾å";
			this.MenuIlluminateImage.Click += new System.EventHandler(MenuIlluminateImage_Click);
			this.MultiScaleContrastEnhancement.ForeColor = System.Drawing.Color.Red;
			this.MultiScaleContrastEnhancement.Name = "MultiScaleContrastEnhancement";
			this.MultiScaleContrastEnhancement.Size = new System.Drawing.Size(208, 22);
			this.MultiScaleContrastEnhancement.Text = "å¤å°ºåº¦å¯¹æ¯åº¦å¢å¼º";
			this.MultiScaleContrastEnhancement.Click += new System.EventHandler(MultiScaleContrastEnhancement_Click);
			this.MenuHdr.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.tonemapGuidedFilterToolStripMenuItem, this.Menu_TonemapDrago, this.MenuFarBan });
			this.MenuHdr.Name = "MenuHdr";
			this.MenuHdr.Size = new System.Drawing.Size(362, 22);
			this.MenuHdr.Text = "HDR(é«å¨æèå´ï¼";
			this.tonemapGuidedFilterToolStripMenuItem.ForeColor = System.Drawing.SystemColors.Highlight;
			this.tonemapGuidedFilterToolStripMenuItem.Name = "tonemapGuidedFilterToolStripMenuItem";
			this.tonemapGuidedFilterToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
			this.tonemapGuidedFilterToolStripMenuItem.Text = "åºäºå¯¼åçHDR";
			this.tonemapGuidedFilterToolStripMenuItem.Click += new System.EventHandler(tonemapGuidedFilterToolStripMenuItem_Click);
			this.Menu_TonemapDrago.ForeColor = System.Drawing.SystemColors.Highlight;
			this.Menu_TonemapDrago.Name = "Menu_TonemapDrago";
			this.Menu_TonemapDrago.Size = new System.Drawing.Size(162, 22);
			this.Menu_TonemapDrago.Text = "DragoçHDR";
			this.Menu_TonemapDrago.Click += new System.EventHandler(Menu_TonemapDrago_Click);
			this.MenuFarBan.Name = "MenuFarBan";
			this.MenuFarBan.Size = new System.Drawing.Size(162, 22);
			this.MenuFarBan.Text = "å¤å°ºåº¦HDR";
			this.MenuFarBan.Click += new System.EventHandler(MenuFarBan_Click);
			this.toolStripMenuItem4.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.MenuHazeRemovalBasedOnDarkChannelPrior, this.MenuHazeRemovalBasedonContrastEnhancement, this.MenuDehazeBasedonBoxFilter });
			this.toolStripMenuItem4.Name = "toolStripMenuItem4";
			this.toolStripMenuItem4.Size = new System.Drawing.Size(362, 22);
			this.toolStripMenuItem4.Text = "DeHazeï¼å¾åå»é¾ï¼";
			this.MenuHazeRemovalBasedOnDarkChannelPrior.Name = "MenuHazeRemovalBasedOnDarkChannelPrior";
			this.MenuHazeRemovalBasedOnDarkChannelPrior.Size = new System.Drawing.Size(160, 22);
			this.MenuHazeRemovalBasedOnDarkChannelPrior.Text = "æééå»é¾";
			this.MenuHazeRemovalBasedOnDarkChannelPrior.Click += new System.EventHandler(MenuHazeRemovalBasedOnDarkChannelPrior_Click);
			this.MenuHazeRemovalBasedonContrastEnhancement.Name = "MenuHazeRemovalBasedonContrastEnhancement";
			this.MenuHazeRemovalBasedonContrastEnhancement.Size = new System.Drawing.Size(160, 22);
			this.MenuHazeRemovalBasedonContrastEnhancement.Text = "å¯¹æ¯åº¦å¢å¼ºå»é¾";
			this.MenuHazeRemovalBasedonContrastEnhancement.Click += new System.EventHandler(MenuHazeRemovalBasedonContrastEnhancement_Click);
			this.MenuDehazeBasedonBoxFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDehazeBasedonBoxFilter.Name = "MenuDehazeBasedonBoxFilter";
			this.MenuDehazeBasedonBoxFilter.Size = new System.Drawing.Size(160, 22);
			this.MenuDehazeBasedonBoxFilter.Text = "åºäºåå¼çå»é¾";
			this.MenuDehazeBasedonBoxFilter.Click += new System.EventHandler(MenuDehazeBasedonBoxFilter_Click);
			this.lowLightImageEnhancementToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[6] { this.MenuBacklightRepair, this.MenuIM_ALTM_Retinex_SSE, this.MenuIM_LocalExponentialCorrection_SSE, this.MenuRetinex, this.MenuFrankleMccannRetinex, this.MenuNonlinearEnhancement });
			this.lowLightImageEnhancementToolStripMenuItem.Name = "lowLightImageEnhancementToolStripMenuItem";
			this.lowLightImageEnhancementToolStripMenuItem.Size = new System.Drawing.Size(362, 22);
			this.lowLightImageEnhancementToolStripMenuItem.Text = "Low Level Image Enhancementï¼ä½ç§åº¦å¾åå¢å¼ºï¼";
			this.MenuBacklightRepair.Name = "MenuBacklightRepair";
			this.MenuBacklightRepair.Size = new System.Drawing.Size(209, 22);
			this.MenuBacklightRepair.Text = "èåä¿®å¤";
			this.MenuBacklightRepair.Click += new System.EventHandler(MenuBacklightRepair_Click);
			this.MenuIM_ALTM_Retinex_SSE.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIM_ALTM_Retinex_SSE.Name = "MenuIM_ALTM_Retinex_SSE";
			this.MenuIM_ALTM_Retinex_SSE.Size = new System.Drawing.Size(209, 22);
			this.MenuIM_ALTM_Retinex_SSE.Text = "å¨å±ä½ç§åº¦å¢å¼º";
			this.MenuIM_ALTM_Retinex_SSE.Click += new System.EventHandler(MenuIM_ALTM_Retinex_SSE_Click);
			this.MenuIM_LocalExponentialCorrection_SSE.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuIM_LocalExponentialCorrection_SSE.Name = "MenuIM_LocalExponentialCorrection_SSE";
			this.MenuIM_LocalExponentialCorrection_SSE.Size = new System.Drawing.Size(209, 22);
			this.MenuIM_LocalExponentialCorrection_SSE.Text = "å±é¨Gammaæ ¡æ­£";
			this.MenuIM_LocalExponentialCorrection_SSE.Click += new System.EventHandler(MenuIM_LocalExponentialCorrection_SSE_Click);
			this.MenuRetinex.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuRetinex.Name = "MenuRetinex";
			this.MenuRetinex.Size = new System.Drawing.Size(209, 22);
			this.MenuRetinex.Text = "Retinex";
			this.MenuRetinex.Click += new System.EventHandler(MenuRetinex_Click);
			this.MenuFrankleMccannRetinex.Name = "MenuFrankleMccannRetinex";
			this.MenuFrankleMccannRetinex.Size = new System.Drawing.Size(209, 22);
			this.MenuFrankleMccannRetinex.Text = "FrankleMccann Retinex";
			this.MenuFrankleMccannRetinex.Click += new System.EventHandler(MenuFrankleMccannRetinex_Click);
			this.MenuNonlinearEnhancement.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuNonlinearEnhancement.Name = "MenuNonlinearEnhancement";
			this.MenuNonlinearEnhancement.Size = new System.Drawing.Size(209, 22);
			this.MenuNonlinearEnhancement.Text = "éçº¿æ§å¢å¼º";
			this.MenuNonlinearEnhancement.Click += new System.EventHandler(MenuNonlinearEnhancement_Click);
			this.MenuFFT.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[8] { this.MenuShowFFT, this.MenuFFTConv2, this.MenuButterworthLowPass, this.MenuAddBlindWaterMark, this.MenuHighFrequencyEmphasizeFilter, this.MenuBandPassFilter, this.MenuTextureRemoval, this.MenuHomomorphicFiltering });
			this.MenuFFT.Name = "MenuFFT";
			this.MenuFFT.Size = new System.Drawing.Size(362, 22);
			this.MenuFFT.Text = "FFT Related(å¿«éåéå¶åæ¢ç¸å³ï¼";
			this.MenuShowFFT.Name = "MenuShowFFT";
			this.MenuShowFFT.Size = new System.Drawing.Size(360, 22);
			this.MenuShowFFT.Text = "ShowFFTï¼æ¾ç¤ºé¢è°±å¾ï¼";
			this.MenuShowFFT.Click += new System.EventHandler(MenuShowFFT_Click);
			this.MenuFFTConv2.Name = "MenuFFTConv2";
			this.MenuFFTConv2.Size = new System.Drawing.Size(360, 22);
			this.MenuFFTConv2.Text = "FFT Convï¼FFTå·ç§¯ï¼";
			this.MenuFFTConv2.Click += new System.EventHandler(MenuFFTConv2_Click);
			this.MenuButterworthLowPass.Name = "MenuButterworthLowPass";
			this.MenuButterworthLowPass.Size = new System.Drawing.Size(360, 22);
			this.MenuButterworthLowPass.Text = "ButterworthLowPassï¼å·´ç¹å¥¥æ¯ä½éæ»¤æ³¢å¨ï¼";
			this.MenuButterworthLowPass.Click += new System.EventHandler(MenuButterworthLowPass_Click);
			this.MenuAddBlindWaterMark.Name = "MenuAddBlindWaterMark";
			this.MenuAddBlindWaterMark.Size = new System.Drawing.Size(360, 22);
			this.MenuAddBlindWaterMark.Text = "AddBlindWaterMarkï¼æ·»å ç²æ°´å°ï¼";
			this.MenuAddBlindWaterMark.Click += new System.EventHandler(MenuAddBlindWaterMark_Click);
			this.MenuHighFrequencyEmphasizeFilter.Name = "MenuHighFrequencyEmphasizeFilter";
			this.MenuHighFrequencyEmphasizeFilter.Size = new System.Drawing.Size(360, 22);
			this.MenuHighFrequencyEmphasizeFilter.Text = "HighFrequencyEmphasizeFilterï¼é«é¢å¼ºè°æ»¤æ³¢å¨ï¼";
			this.MenuHighFrequencyEmphasizeFilter.Click += new System.EventHandler(MenuHighFrequencyEmphasizeFilter_Click);
			this.MenuBandPassFilter.Name = "MenuBandPassFilter";
			this.MenuBandPassFilter.Size = new System.Drawing.Size(360, 22);
			this.MenuBandPassFilter.Text = "BandPass Filterï¼å¸¦éæ»¤æ³¢å¨ï¼";
			this.MenuBandPassFilter.Click += new System.EventHandler(MenuBandPassFilter_Click);
			this.MenuTextureRemoval.Name = "MenuTextureRemoval";
			this.MenuTextureRemoval.Size = new System.Drawing.Size(360, 22);
			this.MenuTextureRemoval.Text = "Texture Removalï¼çº¹çå»é¤ï¼";
			this.MenuTextureRemoval.Click += new System.EventHandler(MenuTextureRemoval_Click);
			this.MenuHomomorphicFiltering.Name = "MenuHomomorphicFiltering";
			this.MenuHomomorphicFiltering.Size = new System.Drawing.Size(360, 22);
			this.MenuHomomorphicFiltering.Text = "Homomorphic Filterï¼åææ»¤æ³¢ï¼";
			this.MenuHomomorphicFiltering.Click += new System.EventHandler(MenuHomomorphicFiltering_Click);
			this.miscToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.MenuDevignetting, this.MenuMakeUp, this.MenuRemoveOutliers });
			this.miscToolStripMenuItem.Name = "miscToolStripMenuItem";
			this.miscToolStripMenuItem.Size = new System.Drawing.Size(362, 22);
			this.miscToolStripMenuItem.Text = "Miscï¼å¶ä»å¢å¼ºï¼";
			this.MenuDevignetting.Name = "MenuDevignetting";
			this.MenuDevignetting.Size = new System.Drawing.Size(136, 22);
			this.MenuDevignetting.Text = "å»æè§";
			this.MenuDevignetting.Click += new System.EventHandler(MenuDevignetting_Click);
			this.MenuMakeUp.Name = "MenuMakeUp";
			this.MenuMakeUp.Size = new System.Drawing.Size(136, 22);
			this.MenuMakeUp.Text = "ç£¨ç®åç¾ç½";
			this.MenuMakeUp.Click += new System.EventHandler(MenuMakeUp_Click);
			this.MenuRemoveOutliers.Name = "MenuRemoveOutliers";
			this.MenuRemoveOutliers.Size = new System.Drawing.Size(136, 22);
			this.MenuRemoveOutliers.Text = "å»é¤å¼å¸¸å¼";
			this.MenuRemoveOutliers.Click += new System.EventHandler(MenuRemoveOutliers_Click);
			this.MenuStylize.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[10] { this.MenuExposal, this.MenuFindEdges, this.MenuSoftglow, this.MenuKuwaharaFilter, this.MenuOilPainting, this.MenuPhotoCopy, this.MenuGlowingEdges, this.MenuTraceContour, this.MenuMosaic, this.MenuLayerStyle });
			this.MenuStylize.Name = "MenuStylize";
			this.MenuStylize.Size = new System.Drawing.Size(100, 21);
			this.MenuStylize.Text = "Stylize(é£æ ¼å)";
			this.MenuStylize.DropDownOpening += new System.EventHandler(MenuStylize_DropDownOpening);
			this.MenuExposal.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuExposal.Name = "MenuExposal";
			this.MenuExposal.Size = new System.Drawing.Size(270, 22);
			this.MenuExposal.Text = "Exposalï¼æåï¼";
			this.MenuExposal.Click += new System.EventHandler(MenuExposal_Click);
			this.MenuFindEdges.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuFindEdges.Name = "MenuFindEdges";
			this.MenuFindEdges.Size = new System.Drawing.Size(270, 22);
			this.MenuFindEdges.Text = "FindEdges(æ¥æ¾è¾¹ç¼ï¼";
			this.MenuFindEdges.Click += new System.EventHandler(MenuFindEdges_Click);
			this.MenuSoftglow.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuSoftglow.Name = "MenuSoftglow";
			this.MenuSoftglow.Size = new System.Drawing.Size(270, 22);
			this.MenuSoftglow.Text = "Softglowï¼æåï¼";
			this.MenuSoftglow.Click += new System.EventHandler(MenuSoftglow_Click);
			this.MenuKuwaharaFilter.Name = "MenuKuwaharaFilter";
			this.MenuKuwaharaFilter.Size = new System.Drawing.Size(270, 22);
			this.MenuKuwaharaFilter.Text = "Kuwahara Filterï¼Kuwaharaæ»¤æ³¢ï¼";
			this.MenuKuwaharaFilter.Click += new System.EventHandler(MenuKuwaharaFilter_Click);
			this.MenuOilPainting.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuOilPainting.Name = "MenuOilPainting";
			this.MenuOilPainting.Size = new System.Drawing.Size(270, 22);
			this.MenuOilPainting.Text = "OilPaintingï¼æµæåï¼";
			this.MenuOilPainting.Click += new System.EventHandler(MenuOilPainting_Click);
			this.MenuPhotoCopy.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuPhotoCopy.Name = "MenuPhotoCopy";
			this.MenuPhotoCopy.Size = new System.Drawing.Size(270, 22);
			this.MenuPhotoCopy.Text = "PhotoCopyï¼å½±å°ï¼";
			this.MenuPhotoCopy.Click += new System.EventHandler(MenuPhotoCopy_Click);
			this.MenuGlowingEdges.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuGlowingEdges.Name = "MenuGlowingEdges";
			this.MenuGlowingEdges.Size = new System.Drawing.Size(270, 22);
			this.MenuGlowingEdges.Text = "GlowingEdgesï¼ç§äº®è¾¹ç¼ï¼";
			this.MenuGlowingEdges.Click += new System.EventHandler(MenuGlowingEdges_Click);
			this.MenuTraceContour.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuTraceContour.Name = "MenuTraceContour";
			this.MenuTraceContour.Size = new System.Drawing.Size(270, 22);
			this.MenuTraceContour.Text = "TraceContourï¼è¾¹ç¼è·è¸ªï¼";
			this.MenuTraceContour.Click += new System.EventHandler(MenuTraceContour_Click);
			this.MenuMosaic.Name = "MenuMosaic";
			this.MenuMosaic.Size = new System.Drawing.Size(270, 22);
			this.MenuMosaic.Text = "Mosaicï¼é©¬èµåï¼";
			this.MenuMosaic.Click += new System.EventHandler(MenuMosaic_Click);
			this.MenuLayerStyle.BackColor = System.Drawing.SystemColors.Highlight;
			this.MenuLayerStyle.Name = "MenuLayerStyle";
			this.MenuLayerStyle.Size = new System.Drawing.Size(270, 22);
			this.MenuLayerStyle.Text = "Layer Style...ï¼å¾å±æ ·å¼ï¼";
			this.MenuLayerStyle.Click += new System.EventHandler(MenuLayerStyle_Click);
			this.MenuOther.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[12]
			{
				this.MenuDisOrder, this.MenuHighPass, this.MenuMinFilter, this.MenuMaxFilter, this.MenuRangeFilter, this.MenuOpen, this.MenuClose, this.toolStripMenuItem3, this.toolStripMenuItem2, this.MenuMultImage,
				this.MenuImageInfo, this.MenuSymmetry
			});
			this.MenuOther.Name = "MenuOther";
			this.MenuOther.Size = new System.Drawing.Size(101, 21);
			this.MenuOther.Text = "Otherï¼å¶ä»ï¼";
			this.MenuOther.Click += new System.EventHandler(MenuOther_Click);
			this.MenuDisOrder.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDisOrder.Name = "MenuDisOrder";
			this.MenuDisOrder.Size = new System.Drawing.Size(386, 22);
			this.MenuDisOrder.Text = "Disorder ï¼å¾åä¹±åºï¼";
			this.MenuDisOrder.Click += new System.EventHandler(MenuDisOrder_Click);
			this.MenuHighPass.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuHighPass.Name = "MenuHighPass";
			this.MenuHighPass.Size = new System.Drawing.Size(386, 22);
			this.MenuHighPass.Text = "HighPassï¼é«åå·®ä¿çï¼";
			this.MenuHighPass.Click += new System.EventHandler(MenuHighPass_Click);
			this.MenuMinFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMinFilter.Name = "MenuMinFilter";
			this.MenuMinFilter.Size = new System.Drawing.Size(386, 22);
			this.MenuMinFilter.Text = "MinFilterï¼æå°å¼ï¼";
			this.MenuMinFilter.Click += new System.EventHandler(MenuMinFilter_Click);
			this.MenuMaxFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMaxFilter.Name = "MenuMaxFilter";
			this.MenuMaxFilter.Size = new System.Drawing.Size(386, 22);
			this.MenuMaxFilter.Text = "MaxFilterï¼æå¤§å¼ï¼";
			this.MenuMaxFilter.Click += new System.EventHandler(MenuMaxFilter_Click);
			this.MenuRangeFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuRangeFilter.Name = "MenuRangeFilter";
			this.MenuRangeFilter.Size = new System.Drawing.Size(386, 22);
			this.MenuRangeFilter.Text = "RangeFilterï¼èå´ï¼";
			this.MenuRangeFilter.Click += new System.EventHandler(MenuRangeFilter_Click);
			this.MenuOpen.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuOpen.Name = "MenuOpen";
			this.MenuOpen.Size = new System.Drawing.Size(386, 22);
			this.MenuOpen.Text = "Openï¼å¼ï¼";
			this.MenuOpen.Click += new System.EventHandler(MenuOpen_Click);
			this.MenuClose.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuClose.Name = "MenuClose";
			this.MenuClose.Size = new System.Drawing.Size(386, 22);
			this.MenuClose.Text = "Closeï¼é­ï¼";
			this.MenuClose.Click += new System.EventHandler(MenuClose_Click);
			this.toolStripMenuItem3.Name = "toolStripMenuItem3";
			this.toolStripMenuItem3.Size = new System.Drawing.Size(386, 22);
			this.toolStripMenuItem3.Text = "Contrast Preserving Decolorizationï¼å¯¹æ¯åº¦ä¿çå»è²ï¼";
			this.toolStripMenuItem3.Click += new System.EventHandler(toolStripMenuItem3_Click);
			this.toolStripMenuItem2.Name = "toolStripMenuItem2";
			this.toolStripMenuItem2.Size = new System.Drawing.Size(386, 22);
			this.toolStripMenuItem2.Text = "Morphological Antialiasingï¼å½¢ææé¯é½¿ï¼";
			this.toolStripMenuItem2.Click += new System.EventHandler(toolStripMenuItem2_Click);
			this.MenuMultImage.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[16]
			{
				this.MenuBlend, this.MenuIM_LaplacePyramidFusion, this.MenuNCC, this.MenuLaplacePyramidFusionWithMask, this.toolStripSeparator1, this.MenuMltiImage, this.MenuDivImage, this.MenuSubImage, this.MenuAddImage, this.MenuMaxImage,
				this.MenuMinImage, this.MenuSqrtImage, this.MenuLogImage, this.MenuPowImage, this.MenuScaleImage, this.MenuAbsDiffImage
			});
			this.MenuMultImage.Name = "MenuMultImage";
			this.MenuMultImage.Size = new System.Drawing.Size(386, 22);
			this.MenuMultImage.Text = "MultImageï¼å¤å¾åå³ï¼";
			this.MenuBlend.Name = "MenuBlend";
			this.MenuBlend.Size = new System.Drawing.Size(344, 22);
			this.MenuBlend.Text = "Blendï¼èåï¼";
			this.MenuBlend.Click += new System.EventHandler(MenuBlend_Click);
			this.MenuIM_LaplacePyramidFusion.Name = "MenuIM_LaplacePyramidFusion";
			this.MenuIM_LaplacePyramidFusion.Size = new System.Drawing.Size(344, 22);
			this.MenuIM_LaplacePyramidFusion.Text = "Laplace Pyramid Fusionï¼ææ®ææ¯éå­å¡èåï¼";
			this.MenuIM_LaplacePyramidFusion.Click += new System.EventHandler(MenuIM_LaplacePyramidFusion_Click);
			this.MenuNCC.Name = "MenuNCC";
			this.MenuNCC.Size = new System.Drawing.Size(344, 22);
			this.MenuNCC.Text = "Normalized Cross Correlation(NCC)";
			this.MenuNCC.Click += new System.EventHandler(MenuNCC_Click);
			this.MenuLaplacePyramidFusionWithMask.Name = "MenuLaplacePyramidFusionWithMask";
			this.MenuLaplacePyramidFusionWithMask.Size = new System.Drawing.Size(344, 22);
			this.MenuLaplacePyramidFusionWithMask.Text = "Laplace Pyramid Fusion With Mask";
			this.MenuLaplacePyramidFusionWithMask.Click += new System.EventHandler(MenuLaplacePyramidFusionWithMask_Click);
			this.toolStripSeparator1.Name = "toolStripSeparator1";
			this.toolStripSeparator1.Size = new System.Drawing.Size(341, 6);
			this.MenuMltiImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMltiImage.Name = "MenuMltiImage";
			this.MenuMltiImage.Size = new System.Drawing.Size(344, 22);
			this.MenuMltiImage.Text = "Mult Imageï¼å¾åç¸ä¹ï¼";
			this.MenuMltiImage.Click += new System.EventHandler(MenuMltiImage_Click);
			this.MenuDivImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuDivImage.Name = "MenuDivImage";
			this.MenuDivImage.Size = new System.Drawing.Size(344, 22);
			this.MenuDivImage.Text = "Div Imageï¼å¾åç¸é¤ï¼";
			this.MenuDivImage.Click += new System.EventHandler(MenuDivImage_Click);
			this.MenuSubImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuSubImage.Name = "MenuSubImage";
			this.MenuSubImage.Size = new System.Drawing.Size(344, 22);
			this.MenuSubImage.Text = "Sub Imageï¼å¾åç¸åï¼";
			this.MenuSubImage.Click += new System.EventHandler(MenuSubImage_Click);
			this.MenuAddImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuAddImage.Name = "MenuAddImage";
			this.MenuAddImage.Size = new System.Drawing.Size(344, 22);
			this.MenuAddImage.Text = "Add Imageï¼å¾åç¸å ï¼";
			this.MenuAddImage.Click += new System.EventHandler(MenuAddImage_Click);
			this.MenuMaxImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMaxImage.Name = "MenuMaxImage";
			this.MenuMaxImage.Size = new System.Drawing.Size(344, 22);
			this.MenuMaxImage.Text = "Max Imageï¼å¾ååå¤§ï¼";
			this.MenuMaxImage.Click += new System.EventHandler(MenuMaxImage_Click);
			this.MenuMinImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuMinImage.Name = "MenuMinImage";
			this.MenuMinImage.Size = new System.Drawing.Size(344, 22);
			this.MenuMinImage.Text = "Min Imageï¼å¾ååå°ï¼";
			this.MenuMinImage.Click += new System.EventHandler(MenuMinImage_Click);
			this.MenuSqrtImage.ForeColor = System.Drawing.SystemColors.ControlText;
			this.MenuSqrtImage.Name = "MenuSqrtImage";
			this.MenuSqrtImage.Size = new System.Drawing.Size(344, 22);
			this.MenuSqrtImage.Text = "Sqrt Imageï¼å¾åå¼å¹³æ¹ï¼";
			this.MenuSqrtImage.Click += new System.EventHandler(MenuSqrtImage_Click);
			this.MenuLogImage.ForeColor = System.Drawing.SystemColors.ControlText;
			this.MenuLogImage.Name = "MenuLogImage";
			this.MenuLogImage.Size = new System.Drawing.Size(344, 22);
			this.MenuLogImage.Text = "Log Imageï¼å¾åå¯¹æ°ååï¼";
			this.MenuLogImage.Click += new System.EventHandler(MenuLogImage_Click);
			this.MenuPowImage.Name = "MenuPowImage";
			this.MenuPowImage.Size = new System.Drawing.Size(344, 22);
			this.MenuPowImage.Text = "Pow Imageï¼å¾åææ°ååï¼";
			this.MenuPowImage.Click += new System.EventHandler(MenuPowImage_Click);
			this.MenuScaleImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuScaleImage.Name = "MenuScaleImage";
			this.MenuScaleImage.Size = new System.Drawing.Size(344, 22);
			this.MenuScaleImage.Text = "Scale Imageï¼å¾åå¼ç¼©æ¾)";
			this.MenuScaleImage.Click += new System.EventHandler(MenuScaleImage_Click);
			this.MenuAbsDiffImage.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuAbsDiffImage.Name = "MenuAbsDiffImage";
			this.MenuAbsDiffImage.Size = new System.Drawing.Size(344, 22);
			this.MenuAbsDiffImage.Text = "Abs Diff Imageï¼å¾åç»å¯¹å¼å·®ï¼";
			this.MenuAbsDiffImage.Click += new System.EventHandler(MenuAbsDiffImage_Click);
			this.MenuImageInfo.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[10] { this.MenuStdFilter, this.MenuSkineArea, this.MenuDifferentColorCount, this.MenuVectorField, this.MenuLawsTextureFilter, this.MenuEntropy, this.MenuEstimateNoise, this.MenuEstimateTiltAndSlant, this.MenuMedianAbsoluteDeviation, this.MenuSharpness });
			this.MenuImageInfo.Name = "MenuImageInfo";
			this.MenuImageInfo.Size = new System.Drawing.Size(386, 22);
			this.MenuImageInfo.Text = "ImageInfoï¼å¾å½¢ä¿¡æ¯ï¼";
			this.MenuImageInfo.Click += new System.EventHandler(MenuImageInfo_Click);
			this.MenuStdFilter.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuStdFilter.Name = "MenuStdFilter";
			this.MenuStdFilter.Size = new System.Drawing.Size(313, 22);
			this.MenuStdFilter.Text = "StdFilterï¼æ åå·®ï¼";
			this.MenuStdFilter.Click += new System.EventHandler(MenuStdFilter_Click);
			this.MenuSkineArea.Name = "MenuSkineArea";
			this.MenuSkineArea.Size = new System.Drawing.Size(313, 22);
			this.MenuSkineArea.Text = "SkinAreaï¼è¤è²èå´ï¼";
			this.MenuSkineArea.Click += new System.EventHandler(MenuSkineArea_Click);
			this.MenuDifferentColorCount.Name = "MenuDifferentColorCount";
			this.MenuDifferentColorCount.Size = new System.Drawing.Size(313, 22);
			this.MenuDifferentColorCount.Text = "Different Color Countï¼ä¸ååç´ æ°ï¼";
			this.MenuDifferentColorCount.Click += new System.EventHandler(MenuDifferentColorCount_Click);
			this.MenuVectorField.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuVectorField.Name = "MenuVectorField";
			this.MenuVectorField.Size = new System.Drawing.Size(313, 22);
			this.MenuVectorField.Text = "VectorFieldï¼ç¢éåºï¼";
			this.MenuVectorField.Click += new System.EventHandler(MenuVectorField_Click);
			this.MenuLawsTextureFilter.Name = "MenuLawsTextureFilter";
			this.MenuLawsTextureFilter.Size = new System.Drawing.Size(313, 22);
			this.MenuLawsTextureFilter.Text = "Laws Textureï¼Lawsçº¹çï¼";
			this.MenuLawsTextureFilter.Click += new System.EventHandler(MenuLawsTextureFilter_Click);
			this.MenuEntropy.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuEntropy.Name = "MenuEntropy";
			this.MenuEntropy.Size = new System.Drawing.Size(313, 22);
			this.MenuEntropy.Text = "Image Entropyï¼å¾åçµï¼";
			this.MenuEntropy.Click += new System.EventHandler(MenuEntropy_Click);
			this.MenuEstimateNoise.Name = "MenuEstimateNoise";
			this.MenuEstimateNoise.Size = new System.Drawing.Size(313, 22);
			this.MenuEstimateNoise.Text = "EstimateNoiseï¼åªé³è¯ä¼°ï¼";
			this.MenuEstimateNoise.Click += new System.EventHandler(MenuEstimateNoise_Click);
			this.MenuEstimateTiltAndSlant.Name = "MenuEstimateTiltAndSlant";
			this.MenuEstimateTiltAndSlant.Size = new System.Drawing.Size(313, 22);
			this.MenuEstimateTiltAndSlant.Text = "EstimateTiltAndSlantï¼è¯ä¼°åæºå¥å°è§åº¦ï¼";
			this.MenuEstimateTiltAndSlant.Click += new System.EventHandler(MenuEstimateTiltAndSlant_Click);
			this.MenuMedianAbsoluteDeviation.Name = "MenuMedianAbsoluteDeviation";
			this.MenuMedianAbsoluteDeviation.Size = new System.Drawing.Size(313, 22);
			this.MenuMedianAbsoluteDeviation.Text = "MedianAbsoluteDeviation(ç»å¯¹ä¸­ä½å·®)";
			this.MenuMedianAbsoluteDeviation.Click += new System.EventHandler(MenuMedianAbsoluteDeviation_Click);
			this.MenuSharpness.Name = "MenuSharpness";
			this.MenuSharpness.Size = new System.Drawing.Size(313, 22);
			this.MenuSharpness.Text = "ImageSharpness(å¾åéåº¦)";
			this.MenuSharpness.Click += new System.EventHandler(MenuSharpness_Click);
			this.MenuSymmetry.Name = "MenuSymmetry";
			this.MenuSymmetry.Size = new System.Drawing.Size(386, 22);
			this.MenuSymmetry.Text = "Symmetry(å¯¹ç§°æ§)";
			this.MenuSymmetry.Click += new System.EventHandler(MenuSymmetry_Click);
			this.MenuBinary.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[5] { this.MenuGlobalBinary, this.MenuLocalBinary, this.MenuProcessing, this.MenuFeature, this.MenuBinaryInfo });
			this.MenuBinary.Name = "MenuBinary";
			this.MenuBinary.Size = new System.Drawing.Size(128, 21);
			this.MenuBinary.Text = "Binaryï¼äºå¼å¤çï¼";
			this.MenuBinary.DropDownOpened += new System.EventHandler(MenuBinary_DropDownOpened);
			this.MenuBinary.Click += new System.EventHandler(MenuBinary_Click);
			this.MenuGlobalBinary.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuGlobalBinary.Name = "MenuGlobalBinary";
			this.MenuGlobalBinary.Size = new System.Drawing.Size(238, 22);
			this.MenuGlobalBinary.Text = "Global Binaryï¼å¨å±äºå¼åï¼";
			this.MenuGlobalBinary.Click += new System.EventHandler(MenuGlobalBinary_Click);
			this.MenuLocalBinary.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[10] { this.MenuWellnerAdaptiveThreshold, this.MenuNiblackAdaptiveThreshold, this.MenuBernsenAdaptiveThreshold, this.MenuIM_SauvolaAdaptiveThresholding, this.MenuPhansalkar, this.MenuWan, this.MenuDynamicThreshold, this.MenuVarLocalThresholding, this.MenuHysteresisThresholding, this.MenuDualThreshold });
			this.MenuLocalBinary.Name = "MenuLocalBinary";
			this.MenuLocalBinary.Size = new System.Drawing.Size(238, 22);
			this.MenuLocalBinary.Text = "Local Binaryï¼å±é¨äºå¼åï¼";
			this.MenuLocalBinary.Click += new System.EventHandler(MenuLocalBinary_Click);
			this.MenuWellnerAdaptiveThreshold.Name = "MenuWellnerAdaptiveThreshold";
			this.MenuWellnerAdaptiveThreshold.Size = new System.Drawing.Size(256, 22);
			this.MenuWellnerAdaptiveThreshold.Text = "Wellner Adaptive Threshold";
			this.MenuWellnerAdaptiveThreshold.Click += new System.EventHandler(MenuWellnerAdaptiveThreshold_Click);
			this.MenuNiblackAdaptiveThreshold.Name = "MenuNiblackAdaptiveThreshold";
			this.MenuNiblackAdaptiveThreshold.Size = new System.Drawing.Size(256, 22);
			this.MenuNiblackAdaptiveThreshold.Text = "Niblack Adaptive Threshold";
			this.MenuNiblackAdaptiveThreshold.Click += new System.EventHandler(MenuNiblackAdaptiveThreshold_Click);
			this.MenuBernsenAdaptiveThreshold.Name = "MenuBernsenAdaptiveThreshold";
			this.MenuBernsenAdaptiveThreshold.Size = new System.Drawing.Size(256, 22);
			this.MenuBernsenAdaptiveThreshold.Text = "Bernsen Adaptive Threshold";
			this.MenuBernsenAdaptiveThreshold.Click += new System.EventHandler(MenuBernsenAdaptiveThreshold_Click);
			this.MenuIM_SauvolaAdaptiveThresholding.Name = "MenuIM_SauvolaAdaptiveThresholding";
			this.MenuIM_SauvolaAdaptiveThresholding.Size = new System.Drawing.Size(256, 22);
			this.MenuIM_SauvolaAdaptiveThresholding.Text = "Sauvola Adaptive Threshold";
			this.MenuIM_SauvolaAdaptiveThresholding.Click += new System.EventHandler(MenuIM_SauvolaAdaptiveThresholding_Click);
			this.MenuPhansalkar.Name = "MenuPhansalkar";
			this.MenuPhansalkar.Size = new System.Drawing.Size(256, 22);
			this.MenuPhansalkar.Text = "Phansalkar Adaptive Threshold";
			this.MenuPhansalkar.Click += new System.EventHandler(MenuPhansalkar_Click);
			this.MenuWan.Name = "MenuWan";
			this.MenuWan.Size = new System.Drawing.Size(256, 22);
			this.MenuWan.Text = "Wan Adaptive Threshold";
			this.MenuWan.Click += new System.EventHandler(MenuWan_Click);
			this.MenuDynamicThreshold.Name = "MenuDynamicThreshold";
			this.MenuDynamicThreshold.Size = new System.Drawing.Size(256, 22);
			this.MenuDynamicThreshold.Text = "Dynamic Threshold";
			this.MenuDynamicThreshold.Click += new System.EventHandler(MenuDynamicThreshold_Click);
			this.MenuVarLocalThresholding.Name = "MenuVarLocalThresholding";
			this.MenuVarLocalThresholding.Size = new System.Drawing.Size(256, 22);
			this.MenuVarLocalThresholding.Text = "Var Threshold";
			this.MenuVarLocalThresholding.Click += new System.EventHandler(MenuVarLocalThresholding_Click);
			this.MenuHysteresisThresholding.Name = "MenuHysteresisThresholding";
			this.MenuHysteresisThresholding.Size = new System.Drawing.Size(256, 22);
			this.MenuHysteresisThresholding.Text = "Hysteresis Threshold";
			this.MenuHysteresisThresholding.Click += new System.EventHandler(MenuHysteresisThresholding_Click);
			this.MenuDualThreshold.Name = "MenuDualThreshold";
			this.MenuDualThreshold.Size = new System.Drawing.Size(256, 22);
			this.MenuDualThreshold.Text = "Dual Threshold";
			this.MenuDualThreshold.Click += new System.EventHandler(MenuDualThreshold_Click);
			this.MenuProcessing.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[8] { this.MenuClearIsolatePoint, this.MenuErode, this.MenuDilate, this.MenuFillHole, this.MenuThinZhang, this.MenuThinGuo, this.MenuMorph, this.MenuMajority });
			this.MenuProcessing.Name = "MenuProcessing";
			this.MenuProcessing.Size = new System.Drawing.Size(238, 22);
			this.MenuProcessing.Text = "Processingï¼åå¤çï¼";
			this.MenuProcessing.DropDownOpened += new System.EventHandler(MenuProcessing_DropDownOpened);
			this.MenuProcessing.Click += new System.EventHandler(MenuProcessing_Click);
			this.MenuClearIsolatePoint.Name = "MenuClearIsolatePoint";
			this.MenuClearIsolatePoint.Size = new System.Drawing.Size(254, 22);
			this.MenuClearIsolatePoint.Text = "Clear Isolate Pointï¼å»é¤å­¤ç¹ï¼";
			this.MenuClearIsolatePoint.Click += new System.EventHandler(MenuClearIsolatePoint_Click);
			this.MenuErode.Name = "MenuErode";
			this.MenuErode.Size = new System.Drawing.Size(254, 22);
			this.MenuErode.Text = "Erodeï¼èèï¼";
			this.MenuErode.Click += new System.EventHandler(MenuErode_Click);
			this.MenuDilate.Name = "MenuDilate";
			this.MenuDilate.Size = new System.Drawing.Size(254, 22);
			this.MenuDilate.Text = "Dilateï¼è¨èï¼";
			this.MenuDilate.Click += new System.EventHandler(MenuDilate_Click);
			this.MenuFillHole.Name = "MenuFillHole";
			this.MenuFillHole.Size = new System.Drawing.Size(254, 22);
			this.MenuFillHole.Text = "FillHoleï¼å­æ´å¡«åï¼";
			this.MenuFillHole.Click += new System.EventHandler(CmdFillHole_Click);
			this.MenuThinZhang.Name = "MenuThinZhang";
			this.MenuThinZhang.Size = new System.Drawing.Size(254, 22);
			this.MenuThinZhang.Text = "Thin - å¼ ç»å";
			this.MenuThinZhang.Click += new System.EventHandler(MenuThinZhang_Click);
			this.MenuThinGuo.Name = "MenuThinGuo";
			this.MenuThinGuo.Size = new System.Drawing.Size(254, 22);
			this.MenuThinGuo.Text = "Thin - é­ç»å";
			this.MenuThinGuo.Click += new System.EventHandler(MenuThinGuo_Click);
			this.MenuMorph.Name = "MenuMorph";
			this.MenuMorph.Size = new System.Drawing.Size(254, 22);
			this.MenuMorph.Text = "Morphï¼å½¢æå­¦ï¼";
			this.MenuMorph.Click += new System.EventHandler(MenuMorph_Click);
			this.MenuMajority.BackColor = System.Drawing.SystemColors.Highlight;
			this.MenuMajority.Name = "MenuMajority";
			this.MenuMajority.Size = new System.Drawing.Size(254, 22);
			this.MenuMajority.Text = "Majority(ä¸»æåï¼";
			this.MenuMajority.Click += new System.EventHandler(MenuMajority_Click);
			this.MenuFeature.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[4] { this.MenuGetOutline, this.MenuShowEuclideanDistanceMap, this.MenuEuler, this.MenuArea });
			this.MenuFeature.Name = "MenuFeature";
			this.MenuFeature.Size = new System.Drawing.Size(238, 22);
			this.MenuFeature.Text = "Featureï¼ç¹å¾ï¼";
			this.MenuFeature.DropDownOpened += new System.EventHandler(MenuFeature_DropDownOpened);
			this.MenuGetOutline.ForeColor = System.Drawing.SystemColors.Highlight;
			this.MenuGetOutline.Name = "MenuGetOutline";
			this.MenuGetOutline.Size = new System.Drawing.Size(346, 22);
			this.MenuGetOutline.Text = "GetOutlineï¼è½®å»ï¼";
			this.MenuGetOutline.Click += new System.EventHandler(MenuGetOutline_Click);
			this.MenuShowEuclideanDistanceMap.Name = "MenuShowEuclideanDistanceMap";
			this.MenuShowEuclideanDistanceMap.Size = new System.Drawing.Size(346, 22);
			this.MenuShowEuclideanDistanceMap.Text = "ShowEuclideanDistanceMapï¼æ¬§å éå¾è·ç¦»å¾ï¼";
			this.MenuShowEuclideanDistanceMap.Click += new System.EventHandler(MenuShowEuclideanDistanceMap_Click);
			this.MenuEuler.Name = "MenuEuler";
			this.MenuEuler.Size = new System.Drawing.Size(346, 22);
			this.MenuEuler.Text = "Euler Number(æ¬§ææ°)";
			this.MenuEuler.Click += new System.EventHandler(MenuEuler_Click);
			this.MenuArea.Name = "MenuArea";
			this.MenuArea.Size = new System.Drawing.Size(346, 22);
			this.MenuArea.Text = "Area(é¢ç§¯)";
			this.MenuArea.Click += new System.EventHandler(MenuArea_Click);
			this.MenuBinaryInfo.Name = "MenuBinaryInfo";
			this.MenuBinaryInfo.Size = new System.Drawing.Size(238, 22);
			this.MenuBinaryInfo.Text = "Binary Infoï¼ç»¼åä¿¡æ¯ï¼";
			this.MenuBinaryInfo.Click += new System.EventHandler(MenuBinaryInfo_Click);
			this.morphologicalToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[14]
			{
				this.MenuImageReconstruction, this.MenuImposeMin, this.MenuRegionalMax, this.MenuRegionalMin, this.MenuHMax, this.MenuHMin, this.MenuExtendedMax, this.MenuExtendedMin, this.MenuExtendFillHole, this.MennUltimateErodedSet,
				this.MenuExtendClearBorder, this.MenuDoubleThresholding, this.MenuTopHat, this.MenuBlackHat
			});
			this.morphologicalToolStripMenuItem.Name = "morphologicalToolStripMenuItem";
			this.morphologicalToolStripMenuItem.Size = new System.Drawing.Size(194, 21);
			this.morphologicalToolStripMenuItem.Text = "Morph Analysisï¼å½¢æå­¦åæï¼";
			this.morphologicalToolStripMenuItem.DropDownOpening += new System.EventHandler(morphologicalToolStripMenuItem_DropDownOpening);
			this.morphologicalToolStripMenuItem.Click += new System.EventHandler(morphologicalToolStripMenuItem_Click);
			this.MenuImageReconstruction.Name = "MenuImageReconstruction";
			this.MenuImageReconstruction.Size = new System.Drawing.Size(291, 22);
			this.MenuImageReconstruction.Text = "Image Reconstruction(ç°åº¦å¾åéæï¼";
			this.MenuImageReconstruction.Click += new System.EventHandler(MenuImageReconstruction_Click);
			this.MenuImposeMin.Name = "MenuImposeMin";
			this.MenuImposeMin.Size = new System.Drawing.Size(291, 22);
			this.MenuImposeMin.Text = "ImposeMinï¼å¼ºå¶æå°ï¼";
			this.MenuImposeMin.Click += new System.EventHandler(MenuImposeMin_Click);
			this.MenuRegionalMax.Name = "MenuRegionalMax";
			this.MenuRegionalMax.Size = new System.Drawing.Size(291, 22);
			this.MenuRegionalMax.Text = "Regional Maxï¼åºåæå¤§å¼ï¼";
			this.MenuRegionalMax.Click += new System.EventHandler(MenuRegionalMax_Click);
			this.MenuRegionalMin.Name = "MenuRegionalMin";
			this.MenuRegionalMin.Size = new System.Drawing.Size(291, 22);
			this.MenuRegionalMin.Text = "Regional Minï¼åºåæå°å¼ï¼";
			this.MenuRegionalMin.Click += new System.EventHandler(MenuRegionalMin_Click);
			this.MenuHMax.Name = "MenuHMax";
			this.MenuHMax.Size = new System.Drawing.Size(291, 22);
			this.MenuHMax.Text = "H Max(H Max éæï¼";
			this.MenuHMax.Click += new System.EventHandler(MenuHMax_Click);
			this.MenuHMin.Name = "MenuHMin";
			this.MenuHMin.Size = new System.Drawing.Size(291, 22);
			this.MenuHMin.Text = "H Min(H Min éæï¼";
			this.MenuHMin.Click += new System.EventHandler(MenuHMin_Click);
			this.MenuExtendedMax.Name = "MenuExtendedMax";
			this.MenuExtendedMax.Size = new System.Drawing.Size(291, 22);
			this.MenuExtendedMax.Text = "Extended Maxï¼æ©å±çMaxéæï¼";
			this.MenuExtendedMax.Click += new System.EventHandler(MenuExtendedMax_Click);
			this.MenuExtendedMin.Name = "MenuExtendedMin";
			this.MenuExtendedMin.Size = new System.Drawing.Size(291, 22);
			this.MenuExtendedMin.Text = "Extended Minï¼æ©å±çMinéæï¼";
			this.MenuExtendedMin.Click += new System.EventHandler(MenuExtendedMin_Click);
			this.MenuExtendFillHole.Name = "MenuExtendFillHole";
			this.MenuExtendFillHole.Size = new System.Drawing.Size(291, 22);
			this.MenuExtendFillHole.Text = "FillHole(å¡«åå­æ´)";
			this.MenuExtendFillHole.Click += new System.EventHandler(MenuExtendFillHole_Click);
			this.MennUltimateErodedSet.Name = "MennUltimateErodedSet";
			this.MennUltimateErodedSet.Size = new System.Drawing.Size(291, 22);
			this.MennUltimateErodedSet.Text = "Ultimate Eroded Set(ç»æèèç¹ï¼";
			this.MennUltimateErodedSet.Click += new System.EventHandler(MennUltimateErodedSet_Click);
			this.MenuExtendClearBorder.Name = "MenuExtendClearBorder";
			this.MenuExtendClearBorder.Size = new System.Drawing.Size(291, 22);
			this.MenuExtendClearBorder.Text = "ClearBorder(æ¸é¤è¾¹ç)";
			this.MenuExtendClearBorder.Click += new System.EventHandler(MenuExtendClearBorder_Click);
			this.MenuDoubleThresholding.Name = "MenuDoubleThresholding";
			this.MenuDoubleThresholding.Size = new System.Drawing.Size(291, 22);
			this.MenuDoubleThresholding.Text = "Double Threshold(åéå¼äºå¼åï¼\t";
			this.MenuDoubleThresholding.Click += new System.EventHandler(MenuDoubleThresholding_Click);
			this.MenuTopHat.Name = "MenuTopHat";
			this.MenuTopHat.Size = new System.Drawing.Size(291, 22);
			this.MenuTopHat.Text = "TopHat(é¡¶å¸½åæ¢ï¼";
			this.MenuTopHat.Click += new System.EventHandler(MenuTopHat_Click);
			this.MenuBlackHat.Name = "MenuBlackHat";
			this.MenuBlackHat.Size = new System.Drawing.Size(291, 22);
			this.MenuBlackHat.Text = "BlackHat(é»å¸½åæ¢ï¼";
			this.MenuBlackHat.Click += new System.EventHandler(MenuBlackHat_Click);
			this.MenuEdgeDetection.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[17]
			{
				this.MenuSalientRegionDetection, this.imageSegmentationå¾ååå²ToolStripMenuItem, this.MenuEdge_HighPass_Image, this.MenuLightCompensation, this.MenuMaskDodging, this.MenuDeinterlace, this.MenuDestripe, this.MenuPureBackGround, this.MenuImageExtraction, this.MenuShadingCorrection,
				this.MenuRemoveBackGround, this.MenuSpecularityRemoval, this.MenuDerivateGauss, this.MenuGaborFilter, this.MenuFiberMetric, this.MenuLineGauss, this.MenuDeInterlace_Enhance
			});
			this.MenuEdgeDetection.Name = "MenuEdgeDetection";
			this.MenuEdgeDetection.Size = new System.Drawing.Size(147, 21);
			this.MenuEdgeDetection.Text = "Detectionï¼æ£æµç¸å³ï¼";
			this.MenuEdgeDetection.Click += new System.EventHandler(MenuEdgeDetection_Click);
			this.MenuSalientRegionDetection.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[1] { this.MenuFT });
			this.MenuSalientRegionDetection.Name = "MenuSalientRegionDetection";
			this.MenuSalientRegionDetection.Size = new System.Drawing.Size(270, 22);
			this.MenuSalientRegionDetection.Text = "SalientRegionDetectionï¼æ¾èæ§ï¼";
			this.MenuSalientRegionDetection.DropDownOpened += new System.EventHandler(MenuSalientRegionDetection_DropDownOpened);
			this.MenuSalientRegionDetection.Click += new System.EventHandler(MenuSalientRegionDetection_Click);
			this.MenuFT.Name = "MenuFT";
			this.MenuFT.Size = new System.Drawing.Size(89, 22);
			this.MenuFT.Text = "FT";
			this.MenuFT.Click += new System.EventHandler(MenuFT_Click);
			this.imageSegmentationå¾ååå²ToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[1] { this.MenuHCM });
			this.imageSegmentationå¾ååå²ToolStripMenuItem.Name = "imageSegmentationå¾ååå²ToolStripMenuItem";
			this.imageSegmentationå¾ååå²ToolStripMenuItem.Size = new System.Drawing.Size(270, 22);
			this.imageSegmentationå¾ååå²ToolStripMenuItem.Text = "Image Segmentationï¼å¾ååå²ï¼";
			this.MenuHCM.Name = "MenuHCM";
			this.MenuHCM.Size = new System.Drawing.Size(208, 22);
			this.MenuHCM.Text = "K-Meansï¼Kåå¼èç±»ï¼";
			this.MenuHCM.Click += new System.EventHandler(MenuHCM_Click);
			this.MenuEdge_HighPass_Image.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[13]
			{
				this.MenuSobel, this.MenuEdgeBandPass, this.MenuEdge_Prewitt, this.edgeRobinsonToolStripMenuItem, this.MenuEdge_Kirsch, this.MenuEdge_Frei_Chen, this.MenuEdgeLaplace, this.MenuEdge_Roberts, this.edgeHighPassImageToolStripMenuItem, this.MenuEdgeScharr,
				this.MenuEdge_Laplace_of_Gauss, this.MenuEdgeDeriche, this.MenuEdgeCanny
			});
			this.MenuEdge_HighPass_Image.Name = "MenuEdge_HighPass_Image";
			this.MenuEdge_HighPass_Image.Size = new System.Drawing.Size(270, 22);
			this.MenuEdge_HighPass_Image.Text = "EdgeDetectionï¼è¾¹ç¼æ£æµï¼";
			this.MenuEdge_HighPass_Image.DropDownOpened += new System.EventHandler(edgeDetectionToolStripMenuItem_DropDownOpened);
			this.MenuEdge_HighPass_Image.Click += new System.EventHandler(MenuEdge_Robinson_Click);
			this.MenuSobel.Name = "MenuSobel";
			this.MenuSobel.Size = new System.Drawing.Size(212, 22);
			this.MenuSobel.Text = "Edge-Sobel";
			this.MenuSobel.Click += new System.EventHandler(MenuSobel_Click);
			this.MenuEdgeBandPass.Name = "MenuEdgeBandPass";
			this.MenuEdgeBandPass.Size = new System.Drawing.Size(212, 22);
			this.MenuEdgeBandPass.Text = "Edge-BandPass";
			this.MenuEdgeBandPass.Click += new System.EventHandler(MenuEdgeBandPass_Click);
			this.MenuEdge_Prewitt.Name = "MenuEdge_Prewitt";
			this.MenuEdge_Prewitt.Size = new System.Drawing.Size(212, 22);
			this.MenuEdge_Prewitt.Text = "Edge-Prewitt";
			this.MenuEdge_Prewitt.Click += new System.EventHandler(MenuEdge_Prewitt_Click);
			this.edgeRobinsonToolStripMenuItem.Name = "edgeRobinsonToolStripMenuItem";
			this.edgeRobinsonToolStripMenuItem.Size = new System.Drawing.Size(212, 22);
			this.edgeRobinsonToolStripMenuItem.Text = "Edge-Robinson";
			this.edgeRobinsonToolStripMenuItem.Click += new System.EventHandler(edgeRobinsonToolStripMenuItem_Click);
			this.MenuEdge_Kirsch.Name = "MenuEdge_Kirsch";
			this.MenuEdge_Kirsch.Size = new System.Drawing.Size(212, 22);
			this.MenuEdge_Kirsch.Text = "Edge-Kirsch";
			this.MenuEdge_Kirsch.Click += new System.EventHandler(MenuEdge_Kirsch_Click);
			this.MenuEdge_Frei_Chen.Name = "MenuEdge_Frei_Chen";
			this.MenuEdge_Frei_Chen.Size = new System.Drawing.Size(212, 22);
			this.MenuEdge_Frei_Chen.Text = "Edge-Frei-Chen";
			this.MenuEdge_Frei_Chen.Click += new System.EventHandler(MenuEdge_Frei_Chen_Click);
			this.MenuEdgeLaplace.Name = "MenuEdgeLaplace";
			this.MenuEdgeLaplace.Size = new System.Drawing.Size(212, 22);
			this.MenuEdgeLaplace.Text = "Edge-Laplace";
			this.MenuEdgeLaplace.Click += new System.EventHandler(MenuEdgeLaplace_Click);
			this.MenuEdge_Roberts.Name = "MenuEdge_Roberts";
			this.MenuEdge_Roberts.Size = new System.Drawing.Size(212, 22);
			this.MenuEdge_Roberts.Text = "Edge-Roberts\t";
			this.MenuEdge_Roberts.Click += new System.EventHandler(MenuEdge_Roberts_Click);
			this.edgeHighPassImageToolStripMenuItem.Name = "edgeHighPassImageToolStripMenuItem";
			this.edgeHighPassImageToolStripMenuItem.Size = new System.Drawing.Size(212, 22);
			this.edgeHighPassImageToolStripMenuItem.Text = "Edge_HighPass_Image";
			this.edgeHighPassImageToolStripMenuItem.Click += new System.EventHandler(edgeHighPassImageToolStripMenuItem_Click);
			this.MenuEdgeScharr.Name = "MenuEdgeScharr";
			this.MenuEdgeScharr.Size = new System.Drawing.Size(212, 22);
			this.MenuEdgeScharr.Text = "Edge-Scharr";
			this.MenuEdgeScharr.Click += new System.EventHandler(MenuEdgeScharr_Click);
			this.MenuEdge_Laplace_of_Gauss.Name = "MenuEdge_Laplace_of_Gauss";
			this.MenuEdge_Laplace_of_Gauss.Size = new System.Drawing.Size(212, 22);
			this.MenuEdge_Laplace_of_Gauss.Text = "Edge_Laplace_of_Gauss";
			this.MenuEdge_Laplace_of_Gauss.Click += new System.EventHandler(MenuEdge_Laplace_of_Gauss_Click);
			this.MenuEdgeDeriche.Name = "MenuEdgeDeriche";
			this.MenuEdgeDeriche.Size = new System.Drawing.Size(212, 22);
			this.MenuEdgeDeriche.Text = "Edge-Deriche";
			this.MenuEdgeDeriche.Click += new System.EventHandler(MenuEdgeDeriche_Click);
			this.MenuEdgeCanny.Name = "MenuEdgeCanny";
			this.MenuEdgeCanny.Size = new System.Drawing.Size(212, 22);
			this.MenuEdgeCanny.Text = "Edge-Canny";
			this.MenuEdgeCanny.Click += new System.EventHandler(MenuEdgeCanny_Click);
			this.MenuLightCompensation.Name = "MenuLightCompensation";
			this.MenuLightCompensation.Size = new System.Drawing.Size(270, 22);
			this.MenuLightCompensation.Text = "LightCompensationï¼åç§è¡¥å¿ï¼";
			this.MenuLightCompensation.Click += new System.EventHandler(MenuLightCompensation_Click);
			this.MenuMaskDodging.Name = "MenuMaskDodging";
			this.MenuMaskDodging.Size = new System.Drawing.Size(270, 22);
			this.MenuMaskDodging.Text = "Mask Dodgingï¼Maskååï¼";
			this.MenuMaskDodging.Click += new System.EventHandler(MenuMaskDodging_Click);
			this.MenuDeinterlace.Name = "MenuDeinterlace";
			this.MenuDeinterlace.Size = new System.Drawing.Size(270, 22);
			this.MenuDeinterlace.Text = "Deinterlaceï¼å»é¤äº¤éï¼";
			this.MenuDeinterlace.Click += new System.EventHandler(MenuDeinterlace_Click);
			this.MenuDestripe.Name = "MenuDestripe";
			this.MenuDestripe.Size = new System.Drawing.Size(270, 22);
			this.MenuDestripe.Text = "Destripeï¼å»é¤æ¡çº¹ï¼";
			this.MenuDestripe.Click += new System.EventHandler(MenuDestripe_Click);
			this.MenuPureBackGround.Name = "MenuPureBackGround";
			this.MenuPureBackGround.Size = new System.Drawing.Size(270, 22);
			this.MenuPureBackGround.Text = "Pure BackGroundï¼èæ¯çº¯åï¼";
			this.MenuPureBackGround.Click += new System.EventHandler(MenuPureBackGround_Click);
			this.MenuImageExtraction.Name = "MenuImageExtraction";
			this.MenuImageExtraction.Size = new System.Drawing.Size(270, 22);
			this.MenuImageExtraction.Text = "Image Extractionï¼èæ¯æåï¼";
			this.MenuImageExtraction.Click += new System.EventHandler(MenuImageExtraction_Click);
			this.MenuShadingCorrection.Name = "MenuShadingCorrection";
			this.MenuShadingCorrection.Size = new System.Drawing.Size(270, 22);
			this.MenuShadingCorrection.Text = "Shading Correctionï¼æµæ·¡è¡¥æ­£ï¼";
			this.MenuShadingCorrection.Click += new System.EventHandler(MenuShadingCorrection_Click);
			this.MenuRemoveBackGround.Name = "MenuRemoveBackGround";
			this.MenuRemoveBackGround.Size = new System.Drawing.Size(270, 22);
			this.MenuRemoveBackGround.Text = "RemoveBackGroundï¼å»é¤èæ¯ï¼";
			this.MenuRemoveBackGround.Click += new System.EventHandler(MenuRemoveBackGround_Click);
			this.MenuSpecularityRemoval.Name = "MenuSpecularityRemoval";
			this.MenuSpecularityRemoval.Size = new System.Drawing.Size(270, 22);
			this.MenuSpecularityRemoval.Text = "Specularity Removalï¼åç¹ç§»é¤ï¼";
			this.MenuSpecularityRemoval.Click += new System.EventHandler(MenuSpecularityRemoval_Click);
			this.MenuDerivateGauss.Name = "MenuDerivateGauss";
			this.MenuDerivateGauss.Size = new System.Drawing.Size(270, 22);
			this.MenuDerivateGauss.Text = "Derivate Gaussï¼é«æ¯å¯¼æ°ï¼";
			this.MenuDerivateGauss.Click += new System.EventHandler(MenuDerivateGauss_Click);
			this.MenuGaborFilter.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[3] { this.MenuStandandGaborFilter, this.MenuLogGaborFilter, this.redfieldFractaliusToolStripMenuItem });
			this.MenuGaborFilter.ForeColor = System.Drawing.Color.Red;
			this.MenuGaborFilter.Name = "MenuGaborFilter";
			this.MenuGaborFilter.Size = new System.Drawing.Size(270, 22);
			this.MenuGaborFilter.Text = "Gabor Filter(Gaboræ»¤æ³¢ï¼";
			this.MenuStandandGaborFilter.Name = "MenuStandandGaborFilter";
			this.MenuStandandGaborFilter.Size = new System.Drawing.Size(206, 22);
			this.MenuStandandGaborFilter.Text = "Gabor Filter";
			this.MenuStandandGaborFilter.Click += new System.EventHandler(MenuStandandGaborFilter_Click);
			this.MenuLogGaborFilter.Name = "MenuLogGaborFilter";
			this.MenuLogGaborFilter.Size = new System.Drawing.Size(206, 22);
			this.MenuLogGaborFilter.Text = "Log Gabor Filter";
			this.MenuLogGaborFilter.Click += new System.EventHandler(MenuLogGaborFilter_Click);
			this.redfieldFractaliusToolStripMenuItem.Name = "redfieldFractaliusToolStripMenuItem";
			this.redfieldFractaliusToolStripMenuItem.Size = new System.Drawing.Size(206, 22);
			this.redfieldFractaliusToolStripMenuItem.Text = "Redfield Fractaliusç¹æ";
			this.redfieldFractaliusToolStripMenuItem.Click += new System.EventHandler(redfieldFractaliusToolStripMenuItem_Click);
			this.testToolStripMenuItem.Name = "testToolStripMenuItem";
			this.testToolStripMenuItem.Size = new System.Drawing.Size(44, 21);
			this.testToolStripMenuItem.Text = "Test";
			this.testToolStripMenuItem.Click += new System.EventHandler(testToolStripMenuItem_Click_1);
			this.MenuHistgram.Name = "MenuHistgram";
			this.MenuHistgram.Size = new System.Drawing.Size(73, 21);
			this.MenuHistgram.Text = "Histgram";
			this.MenuHistgram.Visible = false;
			this.MenuFiberMetric.Name = "MenuFiberMetric";
			this.MenuFiberMetric.Size = new System.Drawing.Size(270, 22);
			this.MenuFiberMetric.Text = "FiberMetric(çº¤ç»´åæï¼";
			this.MenuFiberMetric.Click += new System.EventHandler(MenuFiberMetric_Click);
			this.MenuDeInterlace_Enhance.Name = "MenuDeInterlace_Enhance";
			this.MenuDeInterlace_Enhance.Size = new System.Drawing.Size(270, 22);
			this.MenuDeInterlace_Enhance.Text = "å»é¤å½©è²æç¹";
			this.MenuDeInterlace_Enhance.Click += new System.EventHandler(MenuDeInterlace_Enhance_Click);
			this.MenuLineGauss.Name = "MenuLineGauss";
			this.MenuLineGauss.Size = new System.Drawing.Size(270, 22);
			this.MenuLineGauss.Text = "LineGauss(çº¿æ¡åæï¼";
			this.MenuLineGauss.Click += new System.EventHandler(MenuLineGauss_Click);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(1277, 502);
			base.Controls.Add(this.Container);
			base.Icon = (System.Drawing.Icon)resources.GetObject("$this.Icon");
			base.Name = "FrmMain";
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "åºäºSIMDæä»¤ä¼åçåºç¡å¾åå¤çç®æ³åéï¼å¾®ä¿¡ï¼laviewpbt)";
			base.WindowState = System.Windows.Forms.FormWindowState.Maximized;
			base.Load += new System.EventHandler(FrmMain_Load);
			base.Resize += new System.EventHandler(FrmMain_Resize);
			this.Container.BottomToolStripPanel.ResumeLayout(false);
			this.Container.BottomToolStripPanel.PerformLayout();
			this.Container.ContentPanel.ResumeLayout(false);
			this.Container.TopToolStripPanel.ResumeLayout(false);
			this.Container.TopToolStripPanel.PerformLayout();
			this.Container.ResumeLayout(false);
			this.Container.PerformLayout();
			this.StatusBar.ResumeLayout(false);
			this.StatusBar.PerformLayout();
			this.zoomContextMenuStrip.ResumeLayout(false);
			this.ChannelMenu.ResumeLayout(false);
			this.MyMenu.ResumeLayout(false);
			this.MyMenu.PerformLayout();
			base.ResumeLayout(false);
		}
	}
	internal static class Program
	{
		[STAThread]
		private static void Main()
		{
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(defaultValue: false);
			Application.Run(new FrmMain());
		}
	}
	public class BlurBasedDialog : Form
	{
		private bool Busy;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private CheckBox ChkPreview;

		private CheckBox ChkImproved;

		private RadioButton opt8x8;

		private RadioButton Opt4x4;

		private RadioButton Opt16;

		private Label LBLD;

		private ComboBox CmbDirection;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkSpeed;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussPyramidSharpen(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HistEqualize(byte* Src, byte* Dest, int Width, int Height, int Stride, bool ClassicEqualization, int Balance = 50);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveBackground(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveBackground_MinMax(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LMMSE_Denoising(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Deinterlace_Enhance(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BacklightRepair(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxFactor, int UseEpfFilter);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ALTM_Retinex_PureC(byte* Src, byte* Mask, int Width, int Height, int Stride, float Cutlimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ALTM_Retinex_SSE(byte* Src, byte* Mask, int Width, int Height, int Stride, float Cutlimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ALTM_Retinex_AVX(byte* Src, byte* Mask, int Width, int Height, int Stride, float Cutlimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMedianAbsoluteDeviation_PureC(byte* Src, byte* Mask, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMedianAbsoluteDeviation_SSE(byte* Src, byte* Mask, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMedianAbsoluteDeviation_AVX(byte* Src, byte* Mask, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BoxBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BoxBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BoxBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EnhanceContrastBasedonTopBotHat(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, bool Smooth);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RadiusSharpen3X3_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RadiusSharpen3X3_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RadiusSharpen3X3_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Symmetry(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, float Sigma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExpBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExpBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ExpBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Derivate_Gauss_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, int Component);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LinearBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HistgramDoding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Clip);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TopHat(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Reconstruct);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BlackHat(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Reconstruct);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_OilPainting_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Strength, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_OilPainting_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Strength, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_OilPainting_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Strength, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AddNoise_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int NoiseType, bool Homochromy);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FillHole(byte* Src, byte* Dest, int Width, int Height, int Stride, bool FillBackColor, int SmallestArea);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Erode(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius, bool Iso);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Dilate(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius, bool Iso);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Deriche(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, int Type);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Hori_GaussBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vert_GaussBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, float Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPass_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPass_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPass_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_StdFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_StdFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_StdFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedStdFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedStdFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedStdFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Brightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPassSharpen_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPassSharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_HighPassSharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MultiScaleSharpen_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MultiScaleSharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MultiScaleSharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapGuidedFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapGuidedFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapGuidedFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EdgePreservedSharpen_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EdgePreservedSharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_EdgePreservedSharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_Round_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_Round_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaxFilter_Round_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_Round_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_Round_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_Round_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter2_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter2_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter2_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter4_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter4_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BinomialFilter4_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Open_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Open_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Open_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Close_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Close_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Close_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BernsenLocalThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vibrance(byte* Src, byte* Dest, int Width, int Height, int Stride, int Adjustment);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FFTConv2(byte* Src, byte* Dest, int Width, int Height, int Stride, float* Kernel, int KerWidth, int KerHeight);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowVectorField_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Length, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowVectorField_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Length, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ShowVectorField_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Length, bool MoreExact);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AnisotropicDiffusion3X3_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AnisotropicDiffusion3X3_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AnisotropicDiffusion3X3_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ClearIsolatePoint(byte* Src, byte* Dest, int Width, int Height, int Stride, int Area, int ClearBlackPoint);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising_8x8_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, bool FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising_8x8_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, bool FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising_8x8_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma, bool FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising_4x4_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DCT_Denoising_4x4_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Sigma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ButterworthLowPass(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_KuwaharaFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MeanofLeastVarianceFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MinCoefficientofVariationFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MorphologicalAntialiasing(byte* Src, byte* Dest, int SrcW, int SrcH, int StrideS, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WeightedMedianBlur(byte* Input, byte* FeatureMap, float* Weight, byte* Output, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AWB_GrayWorld(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FrankleMccannRetinex(byte* Src, byte* Dest, int Width, int Height, int Stride, int Iter);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TraceContour_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, bool Lower);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TraceContour_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, bool Lower);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TraceContour_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, bool Lower);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LightCompensation(byte* Src, byte* Dest, int Width, int Height, int Stride, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MaskDodging(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImageExtraction(byte* Src, byte* Dest, int Width, int Height, int Stride, int ExtractColor, int ExtractSize, int Direction);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ClearBorder(byte* Src, byte* Dest, int Width, int Height, int Stride, int Conn);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_MorphologicalOperations(byte* Src, byte* Dest, int Width, int Height, int Stride, int Operation, int Loop);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Pow_Image(byte* Src, byte* Dest, int Width, int Height, int Stride, float E);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Arithmetic_Log_Image(byte* Src, byte* Dest, int Width, int Height, int Stride, float Base);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastGaussBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Base);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastGaussBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Base);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_FastGaussBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Base);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Roberts(byte* Src, byte* Dest, int Width, int Height, int Stride, int FilterType);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Laplace(byte* Src, byte* Dest, int Width, int Height, int Stride, int ResultType, int FilterMask);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Sobel(byte* Src, byte* Dest, int Width, int Height, int Stride, int FilterType);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AutoLevel(byte* Src, byte* Dest, int Width, int Height, int Stride, float CutLimit = 0.001f, bool Enhanced = false);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AutoContrast(byte* Src, byte* Dest, int Width, int Height, int Stride, float CutLimit = 0.001f, bool Enhanced = false);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Destripe(byte* Src, byte* Dest, int Width, int Height, int Stride, int VertLength, int BlurWidth);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Seg_HCM(byte* Src, byte* Dest, int Width, int Height, int Stride, int Cluster);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Gauss_Filter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Size);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Gauss_Filter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Size);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Gauss_Filter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Size);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ConservativeDenoising_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Iter);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ConservativeDenoising_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Iter);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Highpass_Image(byte* Src, byte* Dest, int Width, int Height, int Stride, int Size);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Edge_Laplace_of_Gauss(byte* Src, byte* Dest, int Width, int Height, int Stride, int Size);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe BlurBasedDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
			Busy = true;
		}

		private unsafe void GetGaussKernel(float* Kernel, int Radius)
		{
			float num = (float)Radius / 3f;
			float num2 = 2f * num * num;
			float num3 = num2 * 3.1415925f;
			double num4 = 0.0;
			int num5 = 0;
			for (int i = -Radius; i <= Radius; i++)
			{
				int num6 = i * i;
				int num7 = -Radius;
				while (num7 <= Radius)
				{
					Kernel[num5] = (float)(Math.Exp((0.0 - (double)(num6 + num7 * num7)) / (double)num2) / (double)num3);
					num4 += (double)Kernel[num5];
					num7++;
					num5++;
				}
			}
			int num8 = 0;
			for (int j = -Radius; j <= Radius; j++)
			{
				int num9 = -Radius;
				while (num9 <= Radius)
				{
					Kernel[num8] = (float)((double)Kernel[num8] / num4);
					num9++;
					num8++;
				}
			}
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked && !Busy)
			{
				Busy = true;
				float* ptr = (float*)(void*)Marshal.AllocHGlobal(262144);
				float num = 30f;
				float num2 = 1f / (2f * num * num);
				for (int i = 0; i < 256; i++)
				{
					int num3 = i * 256;
					for (int j = 0; j < 256; j++)
					{
						ptr[num3 + j] = (float)Math.Exp((float)(-(i - j) * (i - j)) * num2);
					}
				}
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				int num4 = 1;
				if (ChkSpeed.Checked)
				{
					num4 = 100;
				}
				TimeUse.Text = "æ­£å¨è¿è¡" + num4 + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
				TimeUse.GetCurrentParent().Refresh();
				for (int k = 0; k < num4; k++)
				{
					if (OptPureC.Checked)
					{
						if (Text.Equals("æ¹æ¡æ¨¡ç³"))
						{
							IM_BoxBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("derivate_gauss"))
						{
							IM_Derivate_Gauss_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f, CmbDirection.SelectedIndex);
						}
						else if (Text.Equals("ä¿å®å¹³æ»"))
						{
							IM_ConservativeDenoising_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ç»å¯¹ä¸­ä½å·®"))
						{
							IM_GetMedianAbsoluteDeviation_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å»é¤å½©è²æç¹"))
						{
							IM_Deinterlace_Enhance(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("æ·»å åªé³"))
						{
							int num5 = 0;
							IM_AddNoise_PureC(NoiseType: (!Opt4x4.Checked) ? (opt8x8.Checked ? 1 : 2) : 0, Src: Clone, Dest: canvas.ImageData, Width: canvas.Image.Width, Height: canvas.Image.Height, Stride: canvas.Stride, Amount: Radius.Value, Homochromy: ChkImproved.Checked);
						}
						else if (Text.Equals("åé¡¹å¼æ§æ©æ£"))
						{
							IM_AnisotropicDiffusion3X3_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("RadiusSharpen"))
						{
							IM_RadiusSharpen3X3_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("åºäºå¯¼åæ»¤æ³¢çè²è°æ å°"))
						{
							IM_TonemapGuidedFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä½ç§åº¦å¢å¼º"))
						{
							IM_ALTM_Retinex_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.001f);
						}
						else if (Text.Equals("ææ°æ¨¡ç³"))
						{
							IM_ExpBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¤å°ºåº¦éå"))
						{
							IM_MultiScaleSharpen_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä¿è¾¹éå"))
						{
							IM_EdgePreservedSharpen_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¼æä½"))
						{
							IM_Open_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é­æä½"))
						{
							IM_Close_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é«åå·®ä¿ç"))
						{
							IM_HighPass_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é«åå·®ä¿çéå"))
						{
							IM_HighPassSharpen_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ç¢éåº"))
						{
							IM_ShowVectorField_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("ç­é«çº¿"))
						{
							IM_TraceContour_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("æ²¹ç»"))
						{
							IM_OilPainting_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("å±é¨æ¹å·®"))
						{
							label1.Text = "åå¾";
							if (!ChkImproved.Checked)
							{
								IM_StdFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
							else
							{
								IM_ImprovedStdFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
						}
						else if (Text.Equals("æå¤§å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MaxFilter_Round_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MaxFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("æå°å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MinFilter_Round_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MinFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("DCTå»åª"))
						{
							if (opt8x8.Checked)
							{
								IM_DCT_Denoising_8x8_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f, ChkImproved.Checked);
							}
							else
							{
								IM_DCT_Denoising_4x4_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f);
							}
						}
						else
						{
							if (!Text.Equals("é«æ¯æ¨¡ç³"))
							{
								continue;
							}
							if (!ChkImproved.Checked)
							{
								if (CmbDirection.SelectedIndex == 0)
								{
									IM_GaussBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 1)
								{
									IM_BinomialFilter2_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 2)
								{
									IM_BinomialFilter4_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 3)
								{
									IM_FastGaussBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
							}
							else
							{
								IM_Gauss_Filter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex * 2 + 3);
							}
						}
					}
					else if (OptAvx.Checked)
					{
						if (Text.Equals("æ¹æ¡æ¨¡ç³"))
						{
							IM_BoxBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("åé¡¹å¼æ§æ©æ£"))
						{
							IM_AnisotropicDiffusion3X3_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("æ²¹ç»"))
						{
							IM_OilPainting_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("RadiusSharpen"))
						{
							IM_RadiusSharpen3X3_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä½ç§åº¦å¢å¼º"))
						{
							IM_ALTM_Retinex_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.001f);
						}
						else if (Text.Equals("ææ°æ¨¡ç³"))
						{
							IM_ExpBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¤å°ºåº¦éå"))
						{
							IM_MultiScaleSharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ç»å¯¹ä¸­ä½å·®"))
						{
							IM_GetMedianAbsoluteDeviation_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä¿è¾¹éå"))
						{
							IM_EdgePreservedSharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¼æä½"))
						{
							IM_Open_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é­æä½"))
						{
							IM_Close_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é«åå·®ä¿ç"))
						{
							IM_HighPass_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é«åå·®ä¿çéå"))
						{
							IM_HighPassSharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ç¢éåº"))
						{
							IM_ShowVectorField_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("ç­é«çº¿"))
						{
							IM_TraceContour_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("å±é¨æ¹å·®"))
						{
							label1.Text = "åå¾";
							if (!ChkImproved.Checked)
							{
								IM_StdFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
							else
							{
								IM_ImprovedStdFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
						}
						else if (Text.Equals("æå¤§å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MaxFilter_Round_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MaxFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("æå°å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MinFilter_Round_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MinFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("DCTå»åª"))
						{
							if (opt8x8.Checked)
							{
								IM_DCT_Denoising_8x8_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f, ChkImproved.Checked);
							}
							else
							{
								IM_DCT_Denoising_4x4_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f);
							}
						}
						else if (Text.Equals("åºäºå¯¼åæ»¤æ³¢çè²è°æ å°"))
						{
							IM_TonemapGuidedFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else
						{
							if (!Text.Equals("é«æ¯æ¨¡ç³"))
							{
								continue;
							}
							if (!ChkImproved.Checked)
							{
								if (CmbDirection.SelectedIndex == 0)
								{
									IM_GaussBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 1)
								{
									IM_BinomialFilter2_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 2)
								{
									IM_BinomialFilter4_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 3)
								{
									IM_FastGaussBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
							}
							else
							{
								IM_Gauss_Filter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex * 2 + 3);
							}
						}
					}
					else
					{
						if (!OptSSE.Checked)
						{
							continue;
						}
						if (Text.Equals("æ¹æ¡æ¨¡ç³"))
						{
							IM_BoxBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä¿å®å¹³æ»"))
						{
							IM_ConservativeDenoising_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¯¹ç§°æ§"))
						{
							IM_Symmetry(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 0.5f);
						}
						else if (Text.Equals("ç§»é¤èæ¯"))
						{
							if (!ChkImproved.Checked)
							{
								IM_RemoveBackground(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_RemoveBackground_MinMax(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("Edge_Sobel"))
						{
							IM_Edge_Sobel(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex);
						}
						else if (Text.Equals("èªå¨è²é¶"))
						{
							IM_AutoLevel(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.0001f, ChkImproved.Checked);
						}
						else if (Text.Equals("èªå¨å¯¹æ¯åº¦"))
						{
							IM_AutoContrast(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.0001f, ChkImproved.Checked);
						}
						else if (Text.Equals("Edge_HighPass"))
						{
							IM_Edge_Highpass_Image(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("Edge_Laplace_of_Gauss"))
						{
							IM_Edge_Laplace_of_Gauss(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex * 2 + 3);
						}
						else if (Text.Equals("ç»å¯¹ä¸­ä½å·®"))
						{
							IM_GetMedianAbsoluteDeviation_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ææ°æ¨¡ç³"))
						{
							IM_ExpBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é«æ¯æ¨¡ç³"))
						{
							if (!ChkImproved.Checked)
							{
								if (CmbDirection.SelectedIndex == 0)
								{
									IM_GaussBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 1)
								{
									IM_BinomialFilter2_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 2)
								{
									IM_BinomialFilter4_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
								else if (CmbDirection.SelectedIndex == 3)
								{
									IM_FastGaussBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
								}
							}
							else
							{
								IM_Gauss_Filter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex * 2 + 3);
							}
						}
						else if (Text.Equals("ç´æ¹å¾åè¡¡"))
						{
							IM_HistEqualize(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, !ChkImproved.Checked, Radius.Value);
						}
						else if (Text.Equals("é«åå·®ä¿ç"))
						{
							IM_HighPass_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("RadiusSharpen"))
						{
							IM_RadiusSharpen3X3_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("Dericheè¾¹ç¼"))
						{
							IM_Edge_Deriche(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f, 2);
						}
						else if (Text.Equals("å¡«åå­æ´"))
						{
							IM_FillHole(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, FillBackColor: false, Radius.Value);
						}
						else if (Text.Equals("ç´æ¹å¾æµè¯"))
						{
							IM_HistgramDoding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¾åæ½å"))
						{
							IM_ImageExtraction(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (!Opt4x4.Checked) ? 1 : 0, Radius.Value, CmbDirection.SelectedIndex);
						}
						else if (Text.Equals("é¡¶å¸½åæ¢"))
						{
							IM_TopHat(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked ? 1 : 0);
						}
						else if (Text.Equals("é»å¸½åæ¢"))
						{
							IM_BlackHat(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked ? 1 : 0);
						}
						else if (Text.Equals("é«åå·®ä¿çéå"))
						{
							IM_HighPassSharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("HCMåå²"))
						{
							IM_Seg_HCM(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("æå¤§å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MaxFilter_Round_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MaxFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("æå°å¼"))
						{
							if (ChkImproved.Checked)
							{
								IM_MinFilter_Round_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MinFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("å¼æä½"))
						{
							IM_Open_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("é­æä½"))
						{
							IM_Close_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å½¢æå­¦å¢å¼º"))
						{
							IM_EnhanceContrastBasedonTopBotHat(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("å¾åææ°åå"))
						{
							IM_Arithmetic_Pow_Image(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f);
						}
						else if (Text.Equals("å¾åå¯¹æ°åå"))
						{
							IM_Arithmetic_Log_Image(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f);
						}
						else if (Text.Equals("ç­é«çº¿"))
						{
							IM_TraceContour_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("åç§è¡¥å¿"))
						{
							IM_LightCompensation(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å¤å°ºåº¦éå"))
						{
							IM_MultiScaleSharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("å æä¸­å¼æ¨¡ç³"))
						{
							IM_WeightedMedianBlur(Clone, Clone, ptr, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ç°åº¦ä¸çç½å¹³è¡¡"))
						{
							IM_AWB_GrayWorld(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("BernsenVar Threshold"))
						{
							IM_BernsenLocalThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("ä½ç§åº¦å¢å¼º"))
						{
							IM_ALTM_Retinex_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.001f);
						}
						else if (Text.Equals("Butterworthä½éæ»¤æ³¢"))
						{
							IM_ButterworthLowPass(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("èªç¶é¥±ååº¦"))
						{
							IM_Vibrance(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("MLAAæé¯é½¿"))
						{
							IM_MorphologicalAntialiasing(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("MASKåå"))
						{
							IM_MaskDodging(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("Edge_Laplace"))
						{
							IM_Edge_Laplace(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (!Opt4x4.Checked) ? 1 : 0, CmbDirection.SelectedIndex);
						}
						else if (Text.Equals("æ¸é¤å­¤ç¹"))
						{
							IM_ClearIsolatePoint(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Opt4x4.Checked ? 1 : 0);
						}
						else if (Text.Equals("æ²¹ç»"))
						{
							IM_OilPainting_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("Kuwaharaæ»¤æ³¢"))
						{
							if (Opt4x4.Checked)
							{
								IM_KuwaharaFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else if (opt8x8.Checked)
							{
								IM_MeanofLeastVarianceFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
							else
							{
								IM_MinCoefficientofVariationFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
							}
						}
						else if (Text.Equals("ä¿è¾¹éå"))
						{
							IM_EdgePreservedSharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("DCTå»åª"))
						{
							if (opt8x8.Checked)
							{
								IM_DCT_Denoising_8x8_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f, ChkImproved.Checked);
							}
							else
							{
								IM_DCT_Denoising_4x4_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.1f);
							}
						}
						else if (Text.Equals("èè"))
						{
							IM_Erode(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, opt8x8.Checked);
						}
						else if (Text.Equals("åé¡¹å¼æ§æ©æ£"))
						{
							IM_AnisotropicDiffusion3X3_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("FrankleMccann Retinex"))
						{
							IM_FrankleMccannRetinex(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("è¨è"))
						{
							IM_Dilate(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.5f, opt8x8.Checked);
						}
						else if (Text.Equals("FFTå·ç§¯"))
						{
							float* ptr2 = (float*)(void*)Marshal.AllocHGlobal((Radius.Value * 2 + 1) * (Radius.Value * 2 + 1) * 4);
							GetGaussKernel(ptr2, Radius.Value);
							IM_FFTConv2(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, ptr2, Radius.Value * 2 + 1, Radius.Value * 2 + 1);
							Marshal.FreeHGlobal((IntPtr)ptr2);
						}
						else if (Text.Equals("å±é¨æ¹å·®"))
						{
							label1.Text = "åå¾";
							if (!ChkImproved.Checked)
							{
								IM_StdFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
							else
							{
								IM_ImprovedStdFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 4f);
							}
						}
						else if (Text.Equals("åºäºå¯¼åæ»¤æ³¢çè²è°æ å°"))
						{
							IM_TonemapGuidedFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("æ¸é¤è¾¹ç"))
						{
							IM_ClearBorder(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Opt4x4.Checked ? 4 : 8);
						}
						else if (Text.Equals("Edge_Roberts"))
						{
							IM_Edge_Roberts(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex);
						}
						else if (Text.Equals("èåä¿®å¤"))
						{
							IM_BacklightRepair(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked ? 1 : 0);
						}
						else if (Text.Equals("ç¢éåº"))
						{
							IM_ShowVectorField_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, ChkImproved.Checked);
						}
						else if (Text.Equals("çº¿æ§æ¨¡ç³"))
						{
							IM_LinearBlur(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value);
						}
						else if (Text.Equals("Morph"))
						{
							IM_BW_MorphologicalOperations(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, CmbDirection.SelectedIndex, Radius.Value);
						}
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num4, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				Busy = false;
				Marshal.FreeHGlobal((IntPtr)ptr);
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Busy = true;
			if (Text.Equals("æ¹æ¡æ¨¡ç³") || Text.Equals("ææ°æ¨¡ç³") || Text.Equals("å¼æä½") || Text.Equals("é­æä½") || Text.Equals("Range") || Text.Equals("é«åå·®ä¿ç") || Text.Equals("é«åå·®ä¿çéå"))
			{
				Optimization.Enabled = true;
			}
			else if (Text.Equals("åºäºå¯¼åæ»¤æ³¢çè²è°æ å°"))
			{
				Optimization.Enabled = true;
			}
			else if (Text.Equals("FFTå·ç§¯"))
			{
				Radius.Maximum = 24;
				RadiusUpDown.Maximum = 24m;
			}
			else if (Text.Equals("derivate_gauss"))
			{
				Radius.Minimum = 1;
				Radius.Maximum = 100;
				RadiusUpDown.Minimum = 0.1m;
				RadiusUpDown.Maximum = 10m;
				label1.Text = "Sigma";
				Optimization.Enabled = false;
				RadiusUpDown.Increment = 0.1m;
				RadiusUpDown.DecimalPlaces = 1;
				Radius.Value = 10;
				RadiusUpDown.Value = 1.0m;
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("First derivative along x");
				CmbDirection.Items.Add("First derivative along y");
				CmbDirection.Items.Add("Absolute value of the gradient");
				CmbDirection.Items.Add("Gradient direction in radians");
				CmbDirection.Items.Add("Second derivative along x");
				CmbDirection.Items.Add("Second derivative along y");
				CmbDirection.Items.Add("Second derivative along x and y");
				CmbDirection.Items.Add("Determinant of the Hessian matrix");
				CmbDirection.Items.Add("Laplace operator (trace of the Hessian matrix)");
				CmbDirection.Items.Add("Mean curvature H");
				CmbDirection.Items.Add("Gaussian curvature K");
				CmbDirection.Items.Add("Differential Area A");
				CmbDirection.Items.Add("First eigenvalue");
				CmbDirection.Items.Add("Second eigenvalue");
				CmbDirection.Items.Add("Second derivative perpendicular to the gradient");
				CmbDirection.Items.Add("Normalized second derivative perpendicular to the gradient");
				CmbDirection.Items.Add("Second derivative along the gradient");
				CmbDirection.Items.Add("Second derivative along and perpendicular to the gradient");
				LBLD.Left = 10;
				LBLD.Visible = true;
				CmbDirection.Left = 85;
				CmbDirection.Width = 325;
				CmbDirection.SelectedIndex = 0;
				CmbDirection.Visible = true;
				OptPureC.Checked = true;
			}
			else if (Text.Equals("å»é¤ç«ç´æ¡çº¹"))
			{
				Radius.Maximum = 256;
				RadiusUpDown.Maximum = 256m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
			}
			else if (Text.Equals("ç§»é¤èæ¯"))
			{
				ChkImproved.Text = "åºäºå±é¨æå¼";
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("HCMåå²"))
			{
				Radius.Maximum = 16;
				RadiusUpDown.Maximum = 16m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				Radius.Minimum = 2;
				RadiusUpDown.Minimum = 2m;
				label1.Text = "åç±»æ°";
			}
			else if (Text.Equals("ä¿å®å¹³æ»"))
			{
				Radius.Maximum = 16;
				RadiusUpDown.Maximum = 16m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				label1.Text = "è¿­ä»£æ¬¡æ°";
				Optimization.Enabled = true;
				OptAvx.Enabled = false;
			}
			else if (Text.Equals("æ·»å åªé³"))
			{
				OptPureC.Checked = true;
				Radius.Maximum = 1000;
				RadiusUpDown.Maximum = 1000m;
				Radius.Value = 50;
				RadiusUpDown.Value = 50m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				label1.Text = "åªé³æ°é";
				RadioButton opt4x = Opt4x4;
				bool visible = (Opt16.Visible = true);
				opt4x.Visible = visible;
				Opt4x4.Text = "å¹³ååå¸";
				opt8x8.Text = "é«æ¯åå¸";
				Opt16.Text = "æ¤çåªé³";
				Opt4x4.Checked = true;
				ChkImproved.Visible = true;
				ChkImproved.Text = "åè²";
				opt8x8.Visible = true;
				if (canvas.Image.PixelFormat == PixelFormat.Format8bppIndexed)
				{
					ChkImproved.Enabled = false;
				}
				else
				{
					ChkImproved.Enabled = true;
				}
			}
			else if (Text.Equals("å»é¤å½©è²æç¹"))
			{
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 40;
				RadiusUpDown.Value = 40m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				label1.Text = "å»é¤ç¨åº¦";
				Optimization.Enabled = true;
				OptAvx.Enabled = false;
				OptSSE.Enabled = false;
				OptPureC.Enabled = true;
				OptPureC.Checked = true;
			}
			else if (Text.Equals("æå¤§å¼") || Text.Equals("æå°å¼") || Text.Equals("é¡¶å¸½åæ¢") || Text.Equals("é»å¸½åæ¢"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 16;
				RadiusUpDown.Value = 16m;
				if (Text.Equals("æå¤§å¼") || Text.Equals("æå°å¼"))
				{
					ChkImproved.Text = "åå½¢åå¾";
				}
				else
				{
					ChkImproved.Text = "éæ";
				}
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("æ¸é¤è¾¹ç"))
			{
				label1.Enabled = false;
				Radius.Enabled = false;
				RadiusUpDown.Enabled = false;
				ChkImproved.Visible = false;
				Opt4x4.Text = "4é¢å";
				opt8x8.Text = "8é¢å";
				Opt4x4.Visible = true;
				opt8x8.Visible = true;
				Opt16.Visible = false;
			}
			else if (Text.Equals("Edge_Roberts"))
			{
				label1.Enabled = false;
				Radius.Enabled = false;
				RadiusUpDown.Enabled = false;
				ChkImproved.Visible = false;
				LBLD.Text = "æ»¤æ³¢å¨ç±»å";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("roberts_max");
				CmbDirection.Items.Add("gradient_max");
				CmbDirection.Items.Add("gradient_sum");
				CmbDirection.SelectedIndex = 0;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
			}
			else if (Text.Equals("Edge_Sobel"))
			{
				label1.Enabled = false;
				Radius.Enabled = false;
				RadiusUpDown.Enabled = false;
				ChkImproved.Visible = false;
				LBLD.Text = "æ»¤æ³¢å¨ç±»å";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("sum_sqrt");
				CmbDirection.Items.Add("sum_abs");
				CmbDirection.Items.Add("thin_sum_abs");
				CmbDirection.Items.Add("thin_max_abs");
				CmbDirection.Items.Add("x'");
				CmbDirection.Items.Add("y'");
				CmbDirection.SelectedIndex = 0;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
			}
			else if (Text.Equals("Edge_Laplace"))
			{
				label1.Enabled = false;
				Radius.Enabled = false;
				RadiusUpDown.Enabled = false;
				ChkImproved.Visible = false;
				LBLD.Text = "æ»¤æ³¢å¨ç±»å";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("n_4");
				CmbDirection.Items.Add("n_8");
				CmbDirection.Items.Add("n_8_isotropic");
				CmbDirection.SelectedIndex = 0;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
				Opt4x4.Text = "absolute";
				opt8x8.Text = "signed_clipped";
				Opt4x4.Visible = true;
				opt8x8.Visible = true;
			}
			else if (Text.Equals("Edge_Laplace_of_Gauss"))
			{
				label1.Enabled = false;
				Radius.Enabled = false;
				RadiusUpDown.Enabled = false;
				ChkImproved.Visible = false;
				LBLD.Text = "æ»¤æ³¢å¨å¤§å°";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("3");
				CmbDirection.Items.Add("5");
				CmbDirection.Items.Add("7");
				CmbDirection.Items.Add("9");
				CmbDirection.SelectedIndex = 0;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
			}
			else if (Text.Equals("å¾åæ½å"))
			{
				label1.Text = "æ½ååå¾";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				Opt4x4.Text = "æ½åæé¨";
				opt8x8.Text = "æ½åæé¨";
				Label lBLD = LBLD;
				bool visible = (CmbDirection.Visible = true);
				lBLD.Visible = visible;
				CmbDirection.SelectedIndex = 2;
				opt8x8.Visible = true;
				Opt4x4.Visible = true;
				Opt16.Visible = false;
			}
			else if (Text.Equals("èªå¨è²é¶") || Text.Equals("èªå¨å¯¹æ¯åº¦"))
			{
				label1.Text = "è£åªä¸åæ¯";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 16;
				RadiusUpDown.Value = 16m;
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("é«æ¯æ¨¡ç³"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 256;
				RadiusUpDown.Maximum = 256m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 16;
				RadiusUpDown.Value = 16m;
				ChkImproved.Visible = false;
				LBLD.Text = "æ»¤æ³¢å¨";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("Deriche");
				CmbDirection.Items.Add("2é¶Binomial");
				CmbDirection.Items.Add("4é¶Binomial");
				CmbDirection.Items.Add("ä¸æ¬¡åå¼æ¨¡æ");
				CmbDirection.SelectedIndex = 0;
				ChkImproved.Text = "ç¹ä¾ä¼å";
				ChkImproved.Checked = false;
				ChkImproved.Visible = true;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å½¢æå­¦å¢å¼º"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				ChkImproved.Text = "æ´å å¹³æ»";
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("ç»å¯¹ä¸­ä½å·®"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 127;
				RadiusUpDown.Maximum = 127m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				ChkImproved.Text = "æ´å å¹³æ»";
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("åé¡¹å¼æ§æ©æ£"))
			{
				label1.Text = "å¼ºåº¦";
				Radius.Maximum = 20;
				RadiusUpDown.Maximum = 20m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 4;
				RadiusUpDown.Value = 4m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å¡«åå­æ´"))
			{
				label1.Text = "å­æ´çæå°é¢ç§¯";
				Radius.Maximum = 65535;
				RadiusUpDown.Maximum = 65535m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 1000;
				RadiusUpDown.Value = 1000m;
			}
			else if (Text.Equals("èåä¿®å¤"))
			{
				label1.Text = "æå¤§æ¾å¤§å å­";
				Radius.Maximum = 20;
				RadiusUpDown.Maximum = 20m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 8;
				RadiusUpDown.Value = 8m;
				ChkImproved.Text = "å¢å¼ºç";
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("å¤å°ºåº¦éå"))
			{
				Radius.Maximum = 32;
				RadiusUpDown.Maximum = 32m;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("åç§è¡¥å¿"))
			{
				Radius.Maximum = 32;
				RadiusUpDown.Maximum = 32m;
			}
			else if (Text.Equals("å±é¨æ¹å·®"))
			{
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("MASKåå"))
			{
				Radius.Value = 32;
				RadiusUpDown.Value = 32m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("ä¿è¾¹éå"))
			{
				Radius.Value = 100;
				RadiusUpDown.Value = 100m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("RadiusSharpen"))
			{
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 50;
				RadiusUpDown.Value = 50m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("ç´æ¹å¾åè¡¡"))
			{
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 75;
				RadiusUpDown.Value = 75m;
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("æ¸é¤å­¤ç¹"))
			{
				Radius.Maximum = 10000;
				RadiusUpDown.Maximum = 10000m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 256;
				RadiusUpDown.Value = 256m;
				ChkImproved.Visible = false;
				label1.Text = "å­¤ç¹æ°";
				Opt4x4.Text = "æ¸é¤é»ç¹";
				opt8x8.Text = "æ¸é¤ç½ç¹";
				Opt4x4.Visible = true;
				opt8x8.Visible = true;
			}
			else if (Text.Equals("å æä¸­å¼æ¨¡ç³"))
			{
				Radius.Maximum = 64;
				RadiusUpDown.Maximum = 64m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("ç°åº¦ä¸çç½å¹³è¡¡"))
			{
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 50;
				RadiusUpDown.Value = 50m;
				ChkImproved.Visible = false;
				label1.Text = "éå¼";
			}
			else if (Text.Equals("ç­é«çº¿"))
			{
				Radius.Maximum = 255;
				RadiusUpDown.Maximum = 255m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 127;
				RadiusUpDown.Value = 127m;
				ChkImproved.Visible = true;
				ChkImproved.Text = "æ´ä½";
				label1.Text = "è²é¶";
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å¾åææ°åå") || Text.Equals("å¾åå¯¹æ°åå"))
			{
				Radius.Maximum = 400;
				RadiusUpDown.Maximum = 400m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 100;
				RadiusUpDown.Value = 100m;
				label1.Text = "ææ°";
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("MLAAæé¯é½¿"))
			{
				Radius.Maximum = 64;
				RadiusUpDown.Maximum = 64m;
				Radius.Minimum = 8;
				RadiusUpDown.Minimum = 8m;
				Radius.Value = 24;
				RadiusUpDown.Value = 24m;
				label1.Text = "éå¼";
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("FrankleMccann Retinex"))
			{
				Radius.Maximum = 12;
				RadiusUpDown.Maximum = 12m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 4;
				RadiusUpDown.Value = 4m;
				label1.Text = "è¿­ä»£æ¬¡æ°";
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("æ²¹ç»"))
			{
				label1.Text = "å¼ºåº¦";
				Radius.Maximum = 32;
				RadiusUpDown.Maximum = 32m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 32;
				RadiusUpDown.Value = 16m;
				ChkImproved.Visible = true;
				ChkImproved.Checked = false;
				ChkImproved.Text = "æ´ç²¾ç¡®";
				Optimization.Enabled = true;
			}
			else if (Text.Equals("ä½ç§åº¦å¢å¼º"))
			{
				label1.Text = "å¯¹æ¯åº¦";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å¾åçµ"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				ChkImproved.Text = "å¿«éç";
				Optimization.Enabled = true;
				ChkImproved.Visible = true;
			}
			else if (Text.Equals("Kuwaharaæ»¤æ³¢"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Opt4x4.Text = "åé¢å";
				opt8x8.Text = "Mean of Least Variance";
				Opt16.Text = "Min Cof of Variation";
				opt8x8.Visible = true;
				Opt4x4.Visible = true;
				Opt16.Visible = true;
			}
			else if (Text.Equals("Butterworthä½éæ»¤æ³¢"))
			{
				label1.Text = "éå¼";
				Radius.Maximum = 256;
				RadiusUpDown.Maximum = 256m;
				Radius.Minimum = 10;
				RadiusUpDown.Minimum = 10m;
				Radius.Value = 100;
				RadiusUpDown.Value = 100m;
			}
			else if (Text.Equals("DCTå»åª"))
			{
				label1.Text = "Sigma";
				Radius.Maximum = 500;
				RadiusUpDown.Maximum = 500m;
				Radius.Value = 200;
				RadiusUpDown.Value = 200m;
				opt8x8.Visible = true;
				Opt4x4.Visible = true;
				ChkImproved.Visible = true;
				ChkImproved.Text = "æ´å¿«";
				Optimization.Enabled = true;
			}
			else if (Text.Equals("ç¢éåº"))
			{
				label1.Text = "æµçº¿é¿åº¦";
				Radius.Maximum = 32;
				RadiusUpDown.Maximum = 32m;
				Radius.Value = 16;
				RadiusUpDown.Value = 16m;
				opt8x8.Visible = false;
				Opt4x4.Visible = false;
				ChkImproved.Visible = true;
				ChkImproved.Checked = false;
				ChkImproved.Text = "æ´ç²¾ç¡®";
				Optimization.Enabled = true;
			}
			else if (Text.Equals("èè") || Text.Equals("è¨è"))
			{
				label1.Text = "åå¾";
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				Opt4x4.Text = "ç©å½¢åå¾";
				opt8x8.Text = "åºäºEDM";
				opt8x8.Visible = true;
				Opt4x4.Visible = true;
				Opt4x4.Checked = true;
			}
			else if (Text.Equals("Morph"))
			{
				label1.Text = "éå¤è®¡ç®æ¬¡æ°";
				Radius.Minimum = 1;
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				LBLD.Text = "æä½ç¬¦";
				CmbDirection.Items.Clear();
				CmbDirection.Items.Add("Remove");
				CmbDirection.Items.Add("Fill");
				CmbDirection.Items.Add("Clean");
				CmbDirection.Items.Add("Hbreak");
				CmbDirection.Items.Add("Majority");
				CmbDirection.Items.Add("Bridge");
				CmbDirection.Items.Add("Diag");
				CmbDirection.Items.Add("Perim4");
				CmbDirection.Items.Add("Perim8");
				CmbDirection.Items.Add("Skeleton");
				CmbDirection.Items.Add("Erode");
				CmbDirection.Items.Add("Dialte");
				CmbDirection.Items.Add("EndPoint");
				CmbDirection.Items.Add("Thin");
				CmbDirection.Items.Add("Open");
				CmbDirection.Items.Add("Close");
				CmbDirection.Items.Add("Fatten");
				CmbDirection.SelectedIndex = 0;
				LBLD.Visible = true;
				CmbDirection.Visible = true;
			}
			Busy = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			if (Text.Equals("derivate_gauss"))
			{
				Radius.Value = (int)(RadiusUpDown.Value * 10m);
			}
			else
			{
				Radius.Value = (int)RadiusUpDown.Value;
			}
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			if (Text.Equals("derivate_gauss"))
			{
				RadiusUpDown.Value = (decimal)((double)Radius.Value * 0.1);
			}
			else
			{
				RadiusUpDown.Value = Radius.Value;
			}
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			if (Text.Equals("é«æ¯æ¨¡ç³"))
			{
				if (!ChkImproved.Checked)
				{
					CmbDirection.Items.Clear();
					CmbDirection.Items.Add("Deriche");
					CmbDirection.Items.Add("2é¶Binomial");
					CmbDirection.Items.Add("4é¶Binomial");
					CmbDirection.Items.Add("ä¸æ¬¡åå¼æ¨¡æ");
					CmbDirection.SelectedIndex = 0;
					TrackBar radius = Radius;
					bool enabled = (RadiusUpDown.Enabled = true);
					radius.Enabled = enabled;
				}
				else
				{
					CmbDirection.Items.Clear();
					CmbDirection.Items.Add("3/Sigma = 0.600");
					CmbDirection.Items.Add("5/Sigma = 1.075");
					CmbDirection.Items.Add("7/Sigma = 1.550");
					CmbDirection.Items.Add("9/Sigma = 2.025");
					CmbDirection.Items.Add("11/Sigma = 2.550");
					CmbDirection.SelectedIndex = 0;
					TrackBar radius2 = Radius;
					bool enabled = (RadiusUpDown.Enabled = false);
					radius2.Enabled = enabled;
				}
			}
			UpdateCanvas();
		}

		private void opt8x8_CheckedChanged(object sender, EventArgs e)
		{
			if (Text == "DCTå»åª")
			{
				ChkImproved.Enabled = opt8x8.Checked;
				if (opt8x8.Checked)
				{
					OptAvx.Enabled = true;
				}
			}
			UpdateCanvas();
		}

		private void Opt4x4_CheckedChanged(object sender, EventArgs e)
		{
			if (Text == "DCTå»åª")
			{
				ChkImproved.Enabled = opt8x8.Checked;
				if (Opt4x4.Checked)
				{
					OptAvx.Enabled = false;
				}
			}
			UpdateCanvas();
		}

		private void ChkAVX_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbDirection_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkAVX_CheckedChanged_1(object sender, EventArgs e)
		{
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Opt16_CheckedChanged(object sender, EventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmbDirection = new System.Windows.Forms.ComboBox();
			this.LBLD = new System.Windows.Forms.Label();
			this.Opt16 = new System.Windows.Forms.RadioButton();
			this.opt8x8 = new System.Windows.Forms.RadioButton();
			this.Opt4x4 = new System.Windows.Forms.RadioButton();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkImproved = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(704, 100);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(138, 40);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(704, 39);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(138, 40);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.CmbDirection);
			this.groupBox.Controls.Add(this.LBLD);
			this.groupBox.Controls.Add(this.Opt16);
			this.groupBox.Controls.Add(this.opt8x8);
			this.groupBox.Controls.Add(this.Opt4x4);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(14, 18);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(651, 184);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.CmbDirection.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbDirection.FormattingEnabled = true;
			this.CmbDirection.Items.AddRange(new object[3] { "X", "Y", "XY" });
			this.CmbDirection.Location = new System.Drawing.Point(448, 136);
			this.CmbDirection.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmbDirection.Name = "CmbDirection";
			this.CmbDirection.Size = new System.Drawing.Size(192, 26);
			this.CmbDirection.TabIndex = 38;
			this.CmbDirection.Visible = false;
			this.CmbDirection.SelectedIndexChanged += new System.EventHandler(CmbDirection_SelectedIndexChanged);
			this.LBLD.AutoSize = true;
			this.LBLD.Location = new System.Drawing.Point(346, 141);
			this.LBLD.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.LBLD.Name = "LBLD";
			this.LBLD.Size = new System.Drawing.Size(98, 18);
			this.LBLD.TabIndex = 24;
			this.LBLD.Text = "æ½åæ¹åï¼";
			this.LBLD.Visible = false;
			this.Opt16.AutoSize = true;
			this.Opt16.Checked = true;
			this.Opt16.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.Opt16.Location = new System.Drawing.Point(242, 140);
			this.Opt16.Name = "Opt16";
			this.Opt16.Size = new System.Drawing.Size(78, 22);
			this.Opt16.TabIndex = 23;
			this.Opt16.TabStop = true;
			this.Opt16.Text = "8 x 8";
			this.Opt16.UseVisualStyleBackColor = true;
			this.Opt16.Visible = false;
			this.Opt16.CheckedChanged += new System.EventHandler(Opt16_CheckedChanged);
			this.opt8x8.AutoSize = true;
			this.opt8x8.Checked = true;
			this.opt8x8.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.opt8x8.Location = new System.Drawing.Point(132, 140);
			this.opt8x8.Name = "opt8x8";
			this.opt8x8.Size = new System.Drawing.Size(78, 22);
			this.opt8x8.TabIndex = 22;
			this.opt8x8.TabStop = true;
			this.opt8x8.Text = "8 x 8";
			this.opt8x8.UseVisualStyleBackColor = true;
			this.opt8x8.Visible = false;
			this.opt8x8.CheckedChanged += new System.EventHandler(opt8x8_CheckedChanged);
			this.Opt4x4.AutoSize = true;
			this.Opt4x4.Location = new System.Drawing.Point(12, 138);
			this.Opt4x4.Name = "Opt4x4";
			this.Opt4x4.Size = new System.Drawing.Size(78, 22);
			this.Opt4x4.TabIndex = 21;
			this.Opt4x4.Text = "4 x 4";
			this.Opt4x4.UseVisualStyleBackColor = true;
			this.Opt4x4.Visible = false;
			this.Opt4x4.CheckedChanged += new System.EventHandler(Opt4x4_CheckedChanged);
			this.RadiusUpDown.Location = new System.Drawing.Point(526, 46);
			this.RadiusUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 512, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(116, 28);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 12, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(12, 82);
			this.Radius.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Radius.Maximum = 512;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(630, 39);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 12;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(9, 44);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(62, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(704, 159);
			this.ChkPreview.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(70, 22);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkImproved.AutoSize = true;
			this.ChkImproved.Checked = true;
			this.ChkImproved.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkImproved.Location = new System.Drawing.Point(704, 248);
			this.ChkImproved.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkImproved.Name = "ChkImproved";
			this.ChkImproved.Size = new System.Drawing.Size(88, 22);
			this.ChkImproved.TabIndex = 20;
			this.ChkImproved.Text = "æ¹è¿ç";
			this.ChkImproved.UseVisualStyleBackColor = true;
			this.ChkImproved.Visible = false;
			this.ChkImproved.CheckedChanged += new System.EventHandler(ChkImproved_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(18, 225);
			this.Optimization.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Name = "Optimization";
			this.Optimization.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Size = new System.Drawing.Size(638, 111);
			this.Optimization.TabIndex = 21;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(483, 51);
			this.OptAvx.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(132, 22);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(308, 51);
			this.OptSSE.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(132, 22);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(33, 51);
			this.OptPureC.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(240, 22);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(704, 204);
			this.ChkSpeed.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(106, 22);
			this.ChkSpeed.TabIndex = 22;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(860, 350);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkImproved);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "BlurBasedDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "BlurBasedDialog";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class ResampleDialog : Form
	{
		private bool Locked;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private int OldWidth;

		private int OldHeight;

		private int PixeFormat;

		private Color C = Color.White;

		private IContainer components;

		private NumericUpDown DstHUpDown;

		private TrackBar DstH;

		private Label label2;

		private NumericUpDown DstWUpDown;

		private TrackBar DstW;

		private Label label1;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Button CmdRefresh;

		private ComboBox CmbMethod;

		private Label label6;

		private Label label3;

		private Label label4;

		private TrackBar ParaA;

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe ResampleDialog()
		{
			InitializeComponent();
		}

		public unsafe ResampleDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			OldWidth = Parent.Image.Width;
			OldHeight = Parent.Image.Height;
			PixeFormat = (int)Parent.Image.PixelFormat;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int IM_Resample(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD, int InterpolationMode, float Para = -1f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int TP_DownSample8U(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private static extern int TP_DownSample8(IntPtr Src, IntPtr Dest, int SrcW, int SrcH, int StrideS, int DstW, int DstH, int StrideD);

		private void RotateDialog_Load(object sender, EventArgs e)
		{
			Locked = true;
			CmbMethod.Items.Add("æè¿é»æå¼");
			CmbMethod.Items.Add("åçº¿æ§æå¼");
			CmbMethod.Items.Add("ä¸æ¬¡ç«æ¹æå¼");
			CmbMethod.Items.Add("å°ç´¢æ¯æå¼");
			CmbMethod.SelectedIndex = 2;
			DstW.Minimum = canvas.Image.Width / 8;
			DstW.Maximum = canvas.Image.Width * 4;
			DstW.Value = canvas.Image.Width;
			DstWUpDown.Minimum = canvas.Image.Width / 8;
			DstWUpDown.Maximum = canvas.Image.Width * 4;
			DstWUpDown.Value = canvas.Image.Width;
			DstH.Minimum = canvas.Image.Height / 8;
			DstH.Maximum = canvas.Image.Height * 4;
			DstH.Value = canvas.Image.Height;
			DstHUpDown.Minimum = canvas.Image.Height / 8;
			DstHUpDown.Maximum = canvas.Image.Height * 4;
			DstHUpDown.Value = canvas.Image.Height;
			UpdateCanvas();
			canvas.Refresh();
			Locked = false;
		}

		private unsafe void UpdateCanvas()
		{
			if (!Locked)
			{
				BitmapData bitmapData = canvas.Image.LockBits(new Rectangle(0, 0, canvas.Image.Width, canvas.Image.Height), ImageLockMode.ReadWrite, canvas.Image.PixelFormat);
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				IM_Resample((IntPtr)Clone, bitmapData.Scan0, OldWidth, OldHeight, Stride, canvas.Image.Width, canvas.Image.Height, bitmapData.Stride, CmbMethod.SelectedIndex, Convert.ToSingle((float)(-(32 - ParaA.Value)) * 0.1f + 0.2f));
				QueryPerformanceCounter(ref lpPerformanceCount2);
				TimeUse.Text = "è®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency, 2) + "ms.  ";
				canvas.Image.UnlockBits(bitmapData);
				canvas.Refresh();
			}
		}

		private void DstW_Scroll(object sender, EventArgs e)
		{
			DstWUpDown.Value = DstW.Value;
		}

		private void DstWUpDown_ValueChanged(object sender, EventArgs e)
		{
			DstW.Value = (int)DstWUpDown.Value;
		}

		private void DstH_Scroll(object sender, EventArgs e)
		{
			DstHUpDown.Value = DstH.Value;
		}

		private void DstHUpDown_ValueChanged(object sender, EventArgs e)
		{
			DstH.Value = (int)DstHUpDown.Value;
		}

		private unsafe void RotateDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				Bitmap bitmap = new Bitmap(OldWidth, OldHeight, (PixelFormat)PixeFormat);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
				{
					ColorPalette palette = bitmap.Palette;
					for (int i = 0; i < palette.Entries.Length; i++)
					{
						palette.Entries[i] = Color.FromArgb(255, i, i, i);
					}
					bitmap.Palette = palette;
				}
				CopyMemory((void*)bitmapData.Scan0, Clone, OldHeight * Stride);
				bitmap.UnlockBits(bitmapData);
				canvas.Image = bitmap;
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(OldWidth, OldHeight, (PixelFormat)PixeFormat);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			CopyMemory((void*)bitmapData.Scan0, Clone, OldHeight * Stride);
			bitmap.UnlockBits(bitmapData);
			canvas.Image = bitmap;
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdRefresh_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(DstW.Value, DstH.Value, (PixelFormat)PixeFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			canvas.Image = bitmap;
			UpdateCanvas();
		}

		private void CmbMethod_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void btnOk_Click(object sender, EventArgs e)
		{
			CmdRefresh_Click(sender, e);
		}

		private void CmbPara_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ParaA_Scroll(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmbMethod_SelectedIndexChanged_1(object sender, EventArgs e)
		{
			if (CmbMethod.SelectedIndex == 2)
			{
				label3.Enabled = true;
				label4.Enabled = true;
				ParaA.Enabled = true;
			}
			else
			{
				label3.Enabled = false;
				label4.Enabled = false;
				ParaA.Enabled = false;
			}
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.DstHUpDown = new System.Windows.Forms.NumericUpDown();
			this.DstH = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.DstWUpDown = new System.Windows.Forms.NumericUpDown();
			this.DstW = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.label3 = new System.Windows.Forms.Label();
			this.CmbMethod = new System.Windows.Forms.ComboBox();
			this.label6 = new System.Windows.Forms.Label();
			this.CmdRefresh = new System.Windows.Forms.Button();
			this.ParaA = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			((System.ComponentModel.ISupportInitialize)this.DstHUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstH).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstWUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstW).BeginInit();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.ParaA).BeginInit();
			base.SuspendLayout();
			this.DstHUpDown.Location = new System.Drawing.Point(250, 124);
			this.DstHUpDown.Margin = new System.Windows.Forms.Padding(4);
			this.DstHUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.DstHUpDown.Minimum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.DstHUpDown.Name = "DstHUpDown";
			this.DstHUpDown.Size = new System.Drawing.Size(75, 28);
			this.DstHUpDown.TabIndex = 8;
			this.DstHUpDown.Value = new decimal(new int[4] { 240, 0, 0, 0 });
			this.DstHUpDown.ValueChanged += new System.EventHandler(DstHUpDown_ValueChanged);
			this.DstH.AutoSize = false;
			this.DstH.LargeChange = 2;
			this.DstH.Location = new System.Drawing.Point(12, 166);
			this.DstH.Margin = new System.Windows.Forms.Padding(4);
			this.DstH.Maximum = 255;
			this.DstH.Minimum = 200;
			this.DstH.Name = "DstH";
			this.DstH.Size = new System.Drawing.Size(313, 39);
			this.DstH.TabIndex = 7;
			this.DstH.TickFrequency = 0;
			this.DstH.Value = 240;
			this.DstH.Scroll += new System.EventHandler(DstH_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(9, 126);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(116, 18);
			this.label2.TabIndex = 6;
			this.label2.Text = "ç®æ å¾é«åº¦ï¼";
			this.DstWUpDown.Location = new System.Drawing.Point(250, 42);
			this.DstWUpDown.Margin = new System.Windows.Forms.Padding(4);
			this.DstWUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.DstWUpDown.Minimum = new decimal(new int[4] { 2, 0, 0, 0 });
			this.DstWUpDown.Name = "DstWUpDown";
			this.DstWUpDown.Size = new System.Drawing.Size(75, 28);
			this.DstWUpDown.TabIndex = 4;
			this.DstWUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.DstWUpDown.ValueChanged += new System.EventHandler(DstWUpDown_ValueChanged);
			this.DstW.AutoSize = false;
			this.DstW.LargeChange = 2;
			this.DstW.Location = new System.Drawing.Point(12, 82);
			this.DstW.Margin = new System.Windows.Forms.Padding(4);
			this.DstW.Maximum = 50;
			this.DstW.Minimum = 2;
			this.DstW.Name = "DstW";
			this.DstW.Size = new System.Drawing.Size(313, 39);
			this.DstW.TabIndex = 3;
			this.DstW.TickFrequency = 0;
			this.DstW.Value = 10;
			this.DstW.Scroll += new System.EventHandler(DstW_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(9, 44);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(116, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "ç®æ å¾å®½åº¦ï¼";
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(443, 93);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(100, 40);
			this.btnCancel.TabIndex = 23;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(443, 27);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(100, 40);
			this.btnOk.TabIndex = 22;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.btnOk.Click += new System.EventHandler(btnOk_Click);
			this.groupBox.Controls.Add(this.label4);
			this.groupBox.Controls.Add(this.ParaA);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.CmbMethod);
			this.groupBox.Controls.Add(this.label6);
			this.groupBox.Controls.Add(this.CmdRefresh);
			this.groupBox.Controls.Add(this.DstHUpDown);
			this.groupBox.Controls.Add(this.DstH);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.DstWUpDown);
			this.groupBox.Controls.Add(this.DstW);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(13, 13);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4);
			this.groupBox.Size = new System.Drawing.Size(408, 315);
			this.groupBox.TabIndex = 24;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "ç®æ å¾å¤§å°";
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(9, 269);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(44, 18);
			this.label3.TabIndex = 35;
			this.label3.Text = "éå©";
			this.CmbMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbMethod.FormattingEnabled = true;
			this.CmbMethod.Location = new System.Drawing.Point(168, 217);
			this.CmbMethod.Name = "CmbMethod";
			this.CmbMethod.Size = new System.Drawing.Size(208, 26);
			this.CmbMethod.TabIndex = 34;
			this.CmbMethod.SelectedIndexChanged += new System.EventHandler(CmbMethod_SelectedIndexChanged_1);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(9, 220);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(98, 18);
			this.label6.TabIndex = 33;
			this.label6.Text = "ç¼©æ¾æ¹æ³ï¼";
			this.CmdRefresh.Location = new System.Drawing.Point(354, 42);
			this.CmdRefresh.Margin = new System.Windows.Forms.Padding(4);
			this.CmdRefresh.Name = "CmdRefresh";
			this.CmdRefresh.Size = new System.Drawing.Size(36, 116);
			this.CmdRefresh.TabIndex = 23;
			this.CmdRefresh.Text = "æ´  æ°";
			this.CmdRefresh.UseVisualStyleBackColor = true;
			this.CmdRefresh.Click += new System.EventHandler(CmdRefresh_Click);
			this.ParaA.AutoSize = false;
			this.ParaA.LargeChange = 2;
			this.ParaA.Location = new System.Drawing.Point(70, 261);
			this.ParaA.Margin = new System.Windows.Forms.Padding(4);
			this.ParaA.Maximum = 30;
			this.ParaA.Name = "ParaA";
			this.ParaA.Size = new System.Drawing.Size(255, 39);
			this.ParaA.TabIndex = 37;
			this.ParaA.TickFrequency = 0;
			this.ParaA.Value = 15;
			this.ParaA.Scroll += new System.EventHandler(ParaA_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(332, 269);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(44, 18);
			this.label4.TabIndex = 38;
			this.label4.Text = "å¹³æ»";
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(559, 362);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "ResampleDialog";
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "ç¼©æ¾";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(RotateDialog_FormClosing);
			base.Load += new System.EventHandler(RotateDialog_Load);
			((System.ComponentModel.ISupportInitialize)this.DstHUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstH).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstWUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstW).EndInit();
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.ParaA).EndInit();
			base.ResumeLayout(false);
		}
	}
	public class RotateDialog : Form
	{
		private bool Locked;

		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private int OldWidth;

		private int OldHeight;

		private int PixeFormat;

		private Color C = Color.White;

		private IContainer components;

		private NumericUpDown ZoomYUpDown;

		private TrackBar ZoomY;

		private Label label6;

		private NumericUpDown ZoomXUpDown;

		private TrackBar ZoomX;

		private GroupBox groupBox3;

		private Label label7;

		private NumericUpDown CenterYUpDown;

		private TrackBar CenterY;

		private Label label4;

		private NumericUpDown CenterXUpDown;

		private TrackBar CenterX;

		private Label label5;

		private GroupBox groupBox2;

		private ComboBox CmbEdge;

		private Label label3;

		private ComboBox CmbMethod;

		private Label label9;

		private NumericUpDown AngleUpDown;

		private TrackBar Angle;

		private Label label10;

		private NumericUpDown DstHUpDown;

		private TrackBar DstH;

		private Label label2;

		private NumericUpDown DstWUpDown;

		private TrackBar DstW;

		private Label label1;

		private GroupBox groupBox1;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private Button CmdRefresh;

		private GroupBox groupBox4;

		private NumericUpDown OffsetYUpDown;

		private TrackBar OffsetY;

		private Label label8;

		private NumericUpDown OffsetXUpDown;

		private TrackBar OffsetX;

		private Label label11;

		private Button CmdSymmetrical;

		private CheckBox ChkSpeed;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe RotateDialog()
		{
			InitializeComponent();
		}

		public unsafe RotateDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			OldWidth = Parent.Image.Width;
			OldHeight = Parent.Image.Height;
			PixeFormat = (int)Parent.Image.PixelFormat;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RotateAndResample_PureC(byte* Src, byte* Dest, int SrcW, int SrcH, int SrcScan, int DstW, int DstH, int DstScan, float Angle, float ZoomX, float ZoomY, int CenterX, int CenterY, int OffsetX, int OffsetY, int Blue, int Green, int Red, int Alpha, int InterpolationMode, int EdgeBehavior);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RotateAndResample_SSE(byte* Src, byte* Dest, int SrcW, int SrcH, int SrcScan, int DstW, int DstH, int DstScan, float Angle, float ZoomX, float ZoomY, int CenterX, int CenterY, int OffsetX, int OffsetY, int Blue, int Green, int Red, int Alpha, int InterpolationMode, int EdgeBehavior);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RotateAndResample_AVX(byte* Src, byte* Dest, int SrcW, int SrcH, int SrcScan, int DstW, int DstH, int DstScan, float Angle, float ZoomX, float ZoomY, int CenterX, int CenterY, int OffsetX, int OffsetY, int Blue, int Green, int Red, int Alpha, int InterpolationMode, int EdgeBehavior);

		private void RotateDialog_Load(object sender, EventArgs e)
		{
			Locked = true;
			CmbMethod.Items.Add("æè¿é»æå¼");
			CmbMethod.Items.Add("åçº¿æ§æå¼");
			CmbMethod.SelectedIndex = 1;
			CmbEdge.Items.Add("çº¯è²èæ¯");
			CmbEdge.Items.Add("éå¤è¾¹ç¼åç´ ");
			CmbEdge.Items.Add("å¹³éº");
			CmbEdge.SelectedIndex = 0;
			DstW.Minimum = canvas.Image.Width / 2;
			DstW.Maximum = canvas.Image.Width * 2;
			DstW.Value = canvas.Image.Width;
			DstWUpDown.Minimum = canvas.Image.Width / 2;
			DstWUpDown.Maximum = canvas.Image.Width * 2;
			DstWUpDown.Value = canvas.Image.Width;
			DstH.Minimum = canvas.Image.Height / 2;
			DstH.Maximum = canvas.Image.Height * 2;
			DstH.Value = canvas.Image.Height;
			DstHUpDown.Minimum = canvas.Image.Height / 2;
			DstHUpDown.Maximum = canvas.Image.Height * 2;
			DstHUpDown.Value = canvas.Image.Height;
			CenterX.Minimum = 0;
			CenterX.Maximum = canvas.Image.Width;
			CenterX.Value = canvas.Image.Width / 2;
			CenterXUpDown.Minimum = 0m;
			CenterXUpDown.Maximum = canvas.Image.Width;
			CenterXUpDown.Value = canvas.Image.Width / 2;
			CenterY.Minimum = 0;
			CenterY.Maximum = canvas.Image.Width;
			CenterY.Value = canvas.Image.Width / 2;
			CenterYUpDown.Minimum = 0m;
			CenterYUpDown.Maximum = canvas.Image.Width;
			CenterYUpDown.Value = canvas.Image.Width / 2;
			OffsetX.Minimum = 0;
			OffsetX.Maximum = canvas.Image.Width;
			OffsetX.Value = 0;
			OffsetXUpDown.Minimum = 0m;
			OffsetXUpDown.Maximum = canvas.Image.Width;
			OffsetXUpDown.Value = 0m;
			OffsetY.Minimum = 0;
			OffsetY.Maximum = canvas.Image.Width;
			OffsetY.Value = 0;
			OffsetYUpDown.Minimum = 0m;
			OffsetYUpDown.Maximum = canvas.Image.Width;
			OffsetYUpDown.Value = 0m;
			canvas.Refresh();
			Locked = false;
			CmdSymmetrical_Click(sender, e);
		}

		private unsafe void UpdateCanvas()
		{
			if (Locked)
			{
				return;
			}
			BitmapData bitmapData = canvas.Image.LockBits(new Rectangle(0, 0, canvas.Image.Width, canvas.Image.Height), ImageLockMode.ReadWrite, canvas.Image.PixelFormat);
			long PerformanceFrequency = 0L;
			long lpPerformanceCount = 0L;
			long lpPerformanceCount2 = 0L;
			QueryPerformanceFrequency(ref PerformanceFrequency);
			QueryPerformanceCounter(ref lpPerformanceCount);
			int num = 1;
			if (ChkSpeed.Checked)
			{
				num = 100;
			}
			TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
			TimeUse.GetCurrentParent().Refresh();
			for (int i = 0; i < num; i++)
			{
				if (OptPureC.Checked)
				{
					IM_RotateAndResample_PureC(Clone, (byte*)(void*)bitmapData.Scan0, OldWidth, OldHeight, Stride, canvas.Image.Width, canvas.Image.Height, bitmapData.Stride, Angle.Value, (float)ZoomX.Value * 0.1f, (float)ZoomY.Value * 0.1f, CenterX.Value, CenterY.Value, OffsetX.Value, OffsetY.Value, C.B, C.G, C.R, C.A, CmbMethod.SelectedIndex, CmbEdge.SelectedIndex);
				}
				else if (OptSSE.Checked)
				{
					IM_RotateAndResample_SSE(Clone, (byte*)(void*)bitmapData.Scan0, OldWidth, OldHeight, Stride, canvas.Image.Width, canvas.Image.Height, bitmapData.Stride, Angle.Value, (float)ZoomX.Value * 0.1f, (float)ZoomY.Value * 0.1f, CenterX.Value, CenterY.Value, OffsetX.Value, OffsetY.Value, C.B, C.G, C.R, C.A, CmbMethod.SelectedIndex, CmbEdge.SelectedIndex);
				}
				else if (OptAvx.Checked)
				{
					IM_RotateAndResample_AVX(Clone, (byte*)(void*)bitmapData.Scan0, OldWidth, OldHeight, Stride, canvas.Image.Width, canvas.Image.Height, bitmapData.Stride, Angle.Value, (float)ZoomX.Value * 0.1f, (float)ZoomY.Value * 0.1f, CenterX.Value, CenterY.Value, OffsetX.Value, OffsetY.Value, C.B, C.G, C.R, C.A, CmbMethod.SelectedIndex, CmbEdge.SelectedIndex);
				}
			}
			QueryPerformanceCounter(ref lpPerformanceCount2);
			TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms.  ";
			canvas.Image.UnlockBits(bitmapData);
			canvas.Refresh();
		}

		private void DstW_Scroll(object sender, EventArgs e)
		{
			DstWUpDown.Value = DstW.Value;
		}

		private void DstWUpDown_ValueChanged(object sender, EventArgs e)
		{
			DstW.Value = (int)DstWUpDown.Value;
		}

		private void DstH_Scroll(object sender, EventArgs e)
		{
			DstHUpDown.Value = DstH.Value;
		}

		private void DstHUpDown_ValueChanged(object sender, EventArgs e)
		{
			DstH.Value = (int)DstHUpDown.Value;
		}

		private void CenterX_Scroll(object sender, EventArgs e)
		{
			CenterXUpDown.Value = CenterX.Value;
		}

		private void CenterXUpDown_ValueChanged(object sender, EventArgs e)
		{
			CenterX.Value = (int)CenterXUpDown.Value;
			UpdateCanvas();
		}

		private void CenterY_Scroll(object sender, EventArgs e)
		{
			CenterYUpDown.Value = CenterY.Value;
		}

		private void CenterYUpDown_ValueChanged(object sender, EventArgs e)
		{
			CenterY.Value = (int)CenterYUpDown.Value;
			UpdateCanvas();
		}

		private void Angle_Scroll(object sender, EventArgs e)
		{
			AngleUpDown.Value = Angle.Value;
		}

		private void AngleUpDown_ValueChanged(object sender, EventArgs e)
		{
			Angle.Value = (int)AngleUpDown.Value;
			UpdateCanvas();
		}

		private void ZoomX_Scroll(object sender, EventArgs e)
		{
			ZoomXUpDown.Value = ZoomX.Value;
		}

		private void ZoomXUpDown_ValueChanged(object sender, EventArgs e)
		{
			ZoomX.Value = (int)ZoomXUpDown.Value;
			UpdateCanvas();
		}

		private void ZoomY_Scroll(object sender, EventArgs e)
		{
			ZoomYUpDown.Value = ZoomY.Value;
		}

		private void ZoomYUpDown_ValueChanged(object sender, EventArgs e)
		{
			ZoomY.Value = (int)ZoomYUpDown.Value;
			UpdateCanvas();
		}

		private void OffsetX_Scroll(object sender, EventArgs e)
		{
			OffsetXUpDown.Value = OffsetX.Value;
		}

		private void OffsetXUpDown_ValueChanged(object sender, EventArgs e)
		{
			OffsetX.Value = (int)OffsetXUpDown.Value;
			UpdateCanvas();
		}

		private void OffsetYUpDown_ValueChanged(object sender, EventArgs e)
		{
			OffsetY.Value = (int)OffsetYUpDown.Value;
			UpdateCanvas();
		}

		private void OffsetY_Scroll(object sender, EventArgs e)
		{
			OffsetYUpDown.Value = OffsetY.Value;
		}

		private unsafe void RotateDialog_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				Bitmap bitmap = new Bitmap(OldWidth, OldHeight, (PixelFormat)PixeFormat);
				BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
				if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
				{
					ColorPalette palette = bitmap.Palette;
					for (int i = 0; i < palette.Entries.Length; i++)
					{
						palette.Entries[i] = Color.FromArgb(255, i, i, i);
					}
					bitmap.Palette = palette;
				}
				CopyMemory((void*)bitmapData.Scan0, Clone, OldHeight * Stride);
				bitmap.UnlockBits(bitmapData);
				canvas.Image = bitmap;
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(OldWidth, OldHeight, (PixelFormat)PixeFormat);
			BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			CopyMemory((void*)bitmapData.Scan0, Clone, OldHeight * Stride);
			bitmap.UnlockBits(bitmapData);
			canvas.Image = bitmap;
			canvas.Refresh();
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void CmdRefresh_Click(object sender, EventArgs e)
		{
			Bitmap bitmap = new Bitmap(DstW.Value, DstH.Value, (PixelFormat)PixeFormat);
			if (bitmap.PixelFormat == PixelFormat.Format8bppIndexed)
			{
				ColorPalette palette = bitmap.Palette;
				for (int i = 0; i < palette.Entries.Length; i++)
				{
					palette.Entries[i] = Color.FromArgb(255, i, i, i);
				}
				bitmap.Palette = palette;
			}
			canvas.Image = bitmap;
			UpdateCanvas();
		}

		private void CmbMethod_SelectedIndexChanged(object sender, EventArgs e)
		{
			Optimization.Enabled = CmbMethod.SelectedIndex == 1 && CmbEdge.SelectedIndex == 0;
			UpdateCanvas();
		}

		private void CmbEdge_SelectedIndexChanged(object sender, EventArgs e)
		{
			Optimization.Enabled = CmbMethod.SelectedIndex == 1 && CmbEdge.SelectedIndex == 0;
			if (Locked)
			{
				return;
			}
			if (CmbEdge.SelectedIndex == 0)
			{
				ColorDialog colorDialog = new ColorDialog();
				if (colorDialog.ShowDialog() == DialogResult.OK)
				{
					C = colorDialog.Color;
				}
			}
			UpdateCanvas();
		}

		private void CmdSymmetrical_Click(object sender, EventArgs e)
		{
			Locked = true;
			CenterX.Value = OldWidth / 2;
			CenterXUpDown.Value = OldWidth / 2;
			CenterY.Value = OldHeight / 2;
			CenterYUpDown.Value = OldHeight / 2;
			OffsetX.Value = (canvas.Image.Width - OldWidth) / 2;
			OffsetXUpDown.Value = (canvas.Image.Width - OldWidth) / 2;
			OffsetY.Value = (canvas.Image.Height - OldHeight) / 2;
			OffsetYUpDown.Value = (canvas.Image.Height - OldHeight) / 2;
			Locked = false;
			UpdateCanvas();
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void btnOk_Click(object sender, EventArgs e)
		{
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.ZoomYUpDown = new System.Windows.Forms.NumericUpDown();
			this.ZoomY = new System.Windows.Forms.TrackBar();
			this.label6 = new System.Windows.Forms.Label();
			this.ZoomXUpDown = new System.Windows.Forms.NumericUpDown();
			this.ZoomX = new System.Windows.Forms.TrackBar();
			this.groupBox3 = new System.Windows.Forms.GroupBox();
			this.label7 = new System.Windows.Forms.Label();
			this.CenterYUpDown = new System.Windows.Forms.NumericUpDown();
			this.CenterY = new System.Windows.Forms.TrackBar();
			this.label4 = new System.Windows.Forms.Label();
			this.CenterXUpDown = new System.Windows.Forms.NumericUpDown();
			this.CenterX = new System.Windows.Forms.TrackBar();
			this.label5 = new System.Windows.Forms.Label();
			this.groupBox2 = new System.Windows.Forms.GroupBox();
			this.CmbEdge = new System.Windows.Forms.ComboBox();
			this.label3 = new System.Windows.Forms.Label();
			this.CmbMethod = new System.Windows.Forms.ComboBox();
			this.label9 = new System.Windows.Forms.Label();
			this.AngleUpDown = new System.Windows.Forms.NumericUpDown();
			this.Angle = new System.Windows.Forms.TrackBar();
			this.label10 = new System.Windows.Forms.Label();
			this.DstHUpDown = new System.Windows.Forms.NumericUpDown();
			this.DstH = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.DstWUpDown = new System.Windows.Forms.NumericUpDown();
			this.DstW = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.CmdRefresh = new System.Windows.Forms.Button();
			this.groupBox4 = new System.Windows.Forms.GroupBox();
			this.OffsetYUpDown = new System.Windows.Forms.NumericUpDown();
			this.OffsetY = new System.Windows.Forms.TrackBar();
			this.label8 = new System.Windows.Forms.Label();
			this.OffsetXUpDown = new System.Windows.Forms.NumericUpDown();
			this.OffsetX = new System.Windows.Forms.TrackBar();
			this.label11 = new System.Windows.Forms.Label();
			this.CmdSymmetrical = new System.Windows.Forms.Button();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			((System.ComponentModel.ISupportInitialize)this.ZoomYUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomXUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomX).BeginInit();
			this.groupBox3.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.CenterYUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.CenterY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.CenterXUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.CenterX).BeginInit();
			this.groupBox2.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.AngleUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Angle).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstHUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstH).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstWUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.DstW).BeginInit();
			this.groupBox1.SuspendLayout();
			this.groupBox.SuspendLayout();
			this.groupBox4.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.OffsetYUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetY).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetXUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetX).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.ZoomYUpDown.Location = new System.Drawing.Point(292, 126);
			this.ZoomYUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ZoomYUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.ZoomYUpDown.Minimum = new decimal(new int[4] { 50, 0, 0, -2147483648 });
			this.ZoomYUpDown.Name = "ZoomYUpDown";
			this.ZoomYUpDown.Size = new System.Drawing.Size(75, 28);
			this.ZoomYUpDown.TabIndex = 8;
			this.ZoomYUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.ZoomYUpDown.ValueChanged += new System.EventHandler(ZoomYUpDown_ValueChanged);
			this.ZoomY.AutoSize = false;
			this.ZoomY.LargeChange = 2;
			this.ZoomY.Location = new System.Drawing.Point(12, 166);
			this.ZoomY.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ZoomY.Maximum = 50;
			this.ZoomY.Minimum = -50;
			this.ZoomY.Name = "ZoomY";
			this.ZoomY.Size = new System.Drawing.Size(375, 39);
			this.ZoomY.TabIndex = 7;
			this.ZoomY.TickFrequency = 0;
			this.ZoomY.Value = 10;
			this.ZoomY.Scroll += new System.EventHandler(ZoomY_Scroll);
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(9, 126);
			this.label6.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(107, 18);
			this.label6.TabIndex = 6;
			this.label6.Text = "Yæ¹åç¼©æ¾ï¼";
			this.ZoomXUpDown.Location = new System.Drawing.Point(292, 44);
			this.ZoomXUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ZoomXUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.ZoomXUpDown.Minimum = new decimal(new int[4] { 50, 0, 0, -2147483648 });
			this.ZoomXUpDown.Name = "ZoomXUpDown";
			this.ZoomXUpDown.Size = new System.Drawing.Size(75, 28);
			this.ZoomXUpDown.TabIndex = 4;
			this.ZoomXUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.ZoomXUpDown.ValueChanged += new System.EventHandler(ZoomXUpDown_ValueChanged);
			this.ZoomX.AutoSize = false;
			this.ZoomX.LargeChange = 2;
			this.ZoomX.Location = new System.Drawing.Point(12, 82);
			this.ZoomX.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ZoomX.Maximum = 50;
			this.ZoomX.Minimum = -50;
			this.ZoomX.Name = "ZoomX";
			this.ZoomX.Size = new System.Drawing.Size(375, 39);
			this.ZoomX.TabIndex = 3;
			this.ZoomX.TickFrequency = 0;
			this.ZoomX.Value = 10;
			this.ZoomX.Scroll += new System.EventHandler(ZoomX_Scroll);
			this.groupBox3.Controls.Add(this.ZoomYUpDown);
			this.groupBox3.Controls.Add(this.ZoomY);
			this.groupBox3.Controls.Add(this.label6);
			this.groupBox3.Controls.Add(this.ZoomXUpDown);
			this.groupBox3.Controls.Add(this.ZoomX);
			this.groupBox3.Controls.Add(this.label7);
			this.groupBox3.Location = new System.Drawing.Point(440, 246);
			this.groupBox3.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox3.Name = "groupBox3";
			this.groupBox3.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox3.Size = new System.Drawing.Size(398, 224);
			this.groupBox3.TabIndex = 28;
			this.groupBox3.TabStop = false;
			this.groupBox3.Text = "ç¼©æ¾";
			this.label7.AutoSize = true;
			this.label7.Location = new System.Drawing.Point(9, 44);
			this.label7.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label7.Name = "label7";
			this.label7.Size = new System.Drawing.Size(107, 18);
			this.label7.TabIndex = 5;
			this.label7.Text = "Xæ¹åç¼©æ¾ï¼";
			this.CenterYUpDown.Location = new System.Drawing.Point(292, 126);
			this.CenterYUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CenterYUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.CenterYUpDown.Minimum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.CenterYUpDown.Name = "CenterYUpDown";
			this.CenterYUpDown.Size = new System.Drawing.Size(75, 28);
			this.CenterYUpDown.TabIndex = 8;
			this.CenterYUpDown.Value = new decimal(new int[4] { 240, 0, 0, 0 });
			this.CenterYUpDown.ValueChanged += new System.EventHandler(CenterYUpDown_ValueChanged);
			this.CenterY.AutoSize = false;
			this.CenterY.LargeChange = 2;
			this.CenterY.Location = new System.Drawing.Point(12, 166);
			this.CenterY.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CenterY.Maximum = 255;
			this.CenterY.Minimum = 200;
			this.CenterY.Name = "CenterY";
			this.CenterY.Size = new System.Drawing.Size(375, 39);
			this.CenterY.TabIndex = 7;
			this.CenterY.TickFrequency = 0;
			this.CenterY.Value = 240;
			this.CenterY.Scroll += new System.EventHandler(CenterY_Scroll);
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(9, 126);
			this.label4.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(107, 18);
			this.label4.TabIndex = 6;
			this.label4.Text = "ä¸­å¿Yåæ ï¼";
			this.CenterXUpDown.Location = new System.Drawing.Point(292, 44);
			this.CenterXUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CenterXUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.CenterXUpDown.Minimum = new decimal(new int[4] { 2, 0, 0, 0 });
			this.CenterXUpDown.Name = "CenterXUpDown";
			this.CenterXUpDown.Size = new System.Drawing.Size(75, 28);
			this.CenterXUpDown.TabIndex = 4;
			this.CenterXUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.CenterXUpDown.ValueChanged += new System.EventHandler(CenterXUpDown_ValueChanged);
			this.CenterX.AutoSize = false;
			this.CenterX.LargeChange = 2;
			this.CenterX.Location = new System.Drawing.Point(12, 82);
			this.CenterX.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CenterX.Maximum = 50;
			this.CenterX.Minimum = 2;
			this.CenterX.Name = "CenterX";
			this.CenterX.Size = new System.Drawing.Size(375, 39);
			this.CenterX.TabIndex = 3;
			this.CenterX.TickFrequency = 0;
			this.CenterX.Value = 10;
			this.CenterX.Scroll += new System.EventHandler(CenterX_Scroll);
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(9, 44);
			this.label5.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(107, 18);
			this.label5.TabIndex = 5;
			this.label5.Text = "ä¸­å¿Xåæ ï¼";
			this.groupBox2.Controls.Add(this.CenterYUpDown);
			this.groupBox2.Controls.Add(this.CenterY);
			this.groupBox2.Controls.Add(this.label4);
			this.groupBox2.Controls.Add(this.CenterXUpDown);
			this.groupBox2.Controls.Add(this.CenterX);
			this.groupBox2.Controls.Add(this.label5);
			this.groupBox2.Location = new System.Drawing.Point(14, 244);
			this.groupBox2.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox2.Name = "groupBox2";
			this.groupBox2.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox2.Size = new System.Drawing.Size(398, 224);
			this.groupBox2.TabIndex = 27;
			this.groupBox2.TabStop = false;
			this.groupBox2.Text = "æè½¬ä¸­å¿";
			this.CmbEdge.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbEdge.FormattingEnabled = true;
			this.CmbEdge.Location = new System.Drawing.Point(158, 166);
			this.CmbEdge.Name = "CmbEdge";
			this.CmbEdge.Size = new System.Drawing.Size(208, 26);
			this.CmbEdge.TabIndex = 9;
			this.CmbEdge.SelectedIndexChanged += new System.EventHandler(CmbEdge_SelectedIndexChanged);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(9, 166);
			this.label3.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(98, 18);
			this.label3.TabIndex = 8;
			this.label3.Text = "è¾¹ç¼å¡«åï¼";
			this.CmbMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.CmbMethod.FormattingEnabled = true;
			this.CmbMethod.Location = new System.Drawing.Point(158, 122);
			this.CmbMethod.Name = "CmbMethod";
			this.CmbMethod.Size = new System.Drawing.Size(208, 26);
			this.CmbMethod.TabIndex = 7;
			this.CmbMethod.SelectedIndexChanged += new System.EventHandler(CmbMethod_SelectedIndexChanged);
			this.label9.AutoSize = true;
			this.label9.Location = new System.Drawing.Point(9, 126);
			this.label9.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label9.Name = "label9";
			this.label9.Size = new System.Drawing.Size(98, 18);
			this.label9.TabIndex = 6;
			this.label9.Text = "æè½¬æ¹æ³ï¼";
			this.AngleUpDown.Location = new System.Drawing.Point(292, 44);
			this.AngleUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.AngleUpDown.Maximum = new decimal(new int[4] { 360, 0, 0, 0 });
			this.AngleUpDown.Name = "AngleUpDown";
			this.AngleUpDown.Size = new System.Drawing.Size(75, 28);
			this.AngleUpDown.TabIndex = 4;
			this.AngleUpDown.Value = new decimal(new int[4] { 45, 0, 0, 0 });
			this.AngleUpDown.ValueChanged += new System.EventHandler(AngleUpDown_ValueChanged);
			this.Angle.AutoSize = false;
			this.Angle.LargeChange = 2;
			this.Angle.Location = new System.Drawing.Point(12, 82);
			this.Angle.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Angle.Maximum = 360;
			this.Angle.Name = "Angle";
			this.Angle.Size = new System.Drawing.Size(375, 39);
			this.Angle.TabIndex = 3;
			this.Angle.TickFrequency = 0;
			this.Angle.Value = 45;
			this.Angle.Scroll += new System.EventHandler(Angle_Scroll);
			this.label10.AutoSize = true;
			this.label10.Location = new System.Drawing.Point(9, 44);
			this.label10.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label10.Name = "label10";
			this.label10.Size = new System.Drawing.Size(152, 18);
			this.label10.TabIndex = 5;
			this.label10.Text = "è§åº¦ï¼éæ¶éï¼ï¼";
			this.DstHUpDown.Location = new System.Drawing.Point(250, 124);
			this.DstHUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.DstHUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.DstHUpDown.Minimum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.DstHUpDown.Name = "DstHUpDown";
			this.DstHUpDown.Size = new System.Drawing.Size(75, 28);
			this.DstHUpDown.TabIndex = 8;
			this.DstHUpDown.Value = new decimal(new int[4] { 240, 0, 0, 0 });
			this.DstHUpDown.ValueChanged += new System.EventHandler(DstHUpDown_ValueChanged);
			this.DstH.AutoSize = false;
			this.DstH.LargeChange = 2;
			this.DstH.Location = new System.Drawing.Point(12, 166);
			this.DstH.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.DstH.Maximum = 255;
			this.DstH.Minimum = 200;
			this.DstH.Name = "DstH";
			this.DstH.Size = new System.Drawing.Size(314, 39);
			this.DstH.TabIndex = 7;
			this.DstH.TickFrequency = 0;
			this.DstH.Value = 240;
			this.DstH.Scroll += new System.EventHandler(DstH_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(9, 126);
			this.label2.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(116, 18);
			this.label2.TabIndex = 6;
			this.label2.Text = "ç®æ å¾é«åº¦ï¼";
			this.DstWUpDown.Location = new System.Drawing.Point(250, 42);
			this.DstWUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.DstWUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.DstWUpDown.Minimum = new decimal(new int[4] { 2, 0, 0, 0 });
			this.DstWUpDown.Name = "DstWUpDown";
			this.DstWUpDown.Size = new System.Drawing.Size(75, 28);
			this.DstWUpDown.TabIndex = 4;
			this.DstWUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.DstWUpDown.ValueChanged += new System.EventHandler(DstWUpDown_ValueChanged);
			this.DstW.AutoSize = false;
			this.DstW.LargeChange = 2;
			this.DstW.Location = new System.Drawing.Point(12, 82);
			this.DstW.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.DstW.Maximum = 50;
			this.DstW.Minimum = 2;
			this.DstW.Name = "DstW";
			this.DstW.Size = new System.Drawing.Size(314, 39);
			this.DstW.TabIndex = 3;
			this.DstW.TickFrequency = 0;
			this.DstW.Value = 10;
			this.DstW.Scroll += new System.EventHandler(DstW_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(9, 44);
			this.label1.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(116, 18);
			this.label1.TabIndex = 5;
			this.label1.Text = "ç®æ å¾å®½åº¦ï¼";
			this.groupBox1.Controls.Add(this.CmbEdge);
			this.groupBox1.Controls.Add(this.label3);
			this.groupBox1.Controls.Add(this.CmbMethod);
			this.groupBox1.Controls.Add(this.label9);
			this.groupBox1.Controls.Add(this.AngleUpDown);
			this.groupBox1.Controls.Add(this.Angle);
			this.groupBox1.Controls.Add(this.label10);
			this.groupBox1.Location = new System.Drawing.Point(440, 14);
			this.groupBox1.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox1.Size = new System.Drawing.Size(398, 224);
			this.groupBox1.TabIndex = 26;
			this.groupBox1.TabStop = false;
			this.groupBox1.Text = "æè½¬";
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(868, 105);
			this.btnCancel.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(100, 40);
			this.btnCancel.TabIndex = 23;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(868, 39);
			this.btnOk.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(100, 40);
			this.btnOk.TabIndex = 22;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.btnOk.Click += new System.EventHandler(btnOk_Click);
			this.groupBox.Controls.Add(this.CmdRefresh);
			this.groupBox.Controls.Add(this.DstHUpDown);
			this.groupBox.Controls.Add(this.DstH);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.DstWUpDown);
			this.groupBox.Controls.Add(this.DstW);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(14, 14);
			this.groupBox.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Name = "groupBox";
			this.groupBox.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox.Size = new System.Drawing.Size(398, 224);
			this.groupBox.TabIndex = 24;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "ç®æ å¾å¤§å°";
			this.CmdRefresh.Location = new System.Drawing.Point(346, 60);
			this.CmdRefresh.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.CmdRefresh.Name = "CmdRefresh";
			this.CmdRefresh.Size = new System.Drawing.Size(36, 116);
			this.CmdRefresh.TabIndex = 23;
			this.CmdRefresh.Text = "æ´  æ°";
			this.CmdRefresh.UseVisualStyleBackColor = true;
			this.CmdRefresh.Click += new System.EventHandler(CmdRefresh_Click);
			this.groupBox4.Controls.Add(this.OffsetYUpDown);
			this.groupBox4.Controls.Add(this.OffsetY);
			this.groupBox4.Controls.Add(this.label8);
			this.groupBox4.Controls.Add(this.OffsetXUpDown);
			this.groupBox4.Controls.Add(this.OffsetX);
			this.groupBox4.Controls.Add(this.label11);
			this.groupBox4.Location = new System.Drawing.Point(14, 472);
			this.groupBox4.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox4.Name = "groupBox4";
			this.groupBox4.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.groupBox4.Size = new System.Drawing.Size(825, 142);
			this.groupBox4.TabIndex = 30;
			this.groupBox4.TabStop = false;
			this.groupBox4.Text = "åç§»";
			this.OffsetYUpDown.Location = new System.Drawing.Point(718, 42);
			this.OffsetYUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OffsetYUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.OffsetYUpDown.Minimum = new decimal(new int[4] { 50, 0, 0, -2147483648 });
			this.OffsetYUpDown.Name = "OffsetYUpDown";
			this.OffsetYUpDown.Size = new System.Drawing.Size(75, 28);
			this.OffsetYUpDown.TabIndex = 8;
			this.OffsetYUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.OffsetYUpDown.ValueChanged += new System.EventHandler(OffsetYUpDown_ValueChanged);
			this.OffsetY.AutoSize = false;
			this.OffsetY.LargeChange = 2;
			this.OffsetY.Location = new System.Drawing.Point(440, 82);
			this.OffsetY.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OffsetY.Maximum = 50;
			this.OffsetY.Minimum = -50;
			this.OffsetY.Name = "OffsetY";
			this.OffsetY.Size = new System.Drawing.Size(375, 39);
			this.OffsetY.TabIndex = 7;
			this.OffsetY.TickFrequency = 0;
			this.OffsetY.Value = 10;
			this.OffsetY.Scroll += new System.EventHandler(OffsetY_Scroll);
			this.label8.AutoSize = true;
			this.label8.Location = new System.Drawing.Point(436, 42);
			this.label8.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label8.Name = "label8";
			this.label8.Size = new System.Drawing.Size(107, 18);
			this.label8.TabIndex = 6;
			this.label8.Text = "Yæ¹ååç§»ï¼";
			this.OffsetXUpDown.Location = new System.Drawing.Point(292, 44);
			this.OffsetXUpDown.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OffsetXUpDown.Maximum = new decimal(new int[4] { 50, 0, 0, 0 });
			this.OffsetXUpDown.Minimum = new decimal(new int[4] { 50, 0, 0, -2147483648 });
			this.OffsetXUpDown.Name = "OffsetXUpDown";
			this.OffsetXUpDown.Size = new System.Drawing.Size(75, 28);
			this.OffsetXUpDown.TabIndex = 4;
			this.OffsetXUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.OffsetXUpDown.ValueChanged += new System.EventHandler(OffsetXUpDown_ValueChanged);
			this.OffsetX.AutoSize = false;
			this.OffsetX.LargeChange = 2;
			this.OffsetX.Location = new System.Drawing.Point(12, 82);
			this.OffsetX.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OffsetX.Maximum = 50;
			this.OffsetX.Minimum = -50;
			this.OffsetX.Name = "OffsetX";
			this.OffsetX.Size = new System.Drawing.Size(375, 39);
			this.OffsetX.TabIndex = 3;
			this.OffsetX.TickFrequency = 0;
			this.OffsetX.Value = 10;
			this.OffsetX.Scroll += new System.EventHandler(OffsetX_Scroll);
			this.label11.AutoSize = true;
			this.label11.Location = new System.Drawing.Point(9, 44);
			this.label11.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.label11.Name = "label11";
			this.label11.Size = new System.Drawing.Size(107, 18);
			this.label11.TabIndex = 5;
			this.label11.Text = "Xæ¹ååç§»ï¼";
			this.CmdSymmetrical.Location = new System.Drawing.Point(868, 170);
			this.CmdSymmetrical.Name = "CmdSymmetrical";
			this.CmdSymmetrical.Size = new System.Drawing.Size(100, 40);
			this.CmdSymmetrical.TabIndex = 31;
			this.CmdSymmetrical.Text = "å±ä¸­æ¾ç¤º";
			this.CmdSymmetrical.UseVisualStyleBackColor = true;
			this.CmdSymmetrical.Click += new System.EventHandler(CmdSymmetrical_Click);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(868, 246);
			this.ChkSpeed.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(106, 22);
			this.ChkSpeed.TabIndex = 33;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Location = new System.Drawing.Point(14, 624);
			this.Optimization.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Name = "Optimization";
			this.Optimization.Padding = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.Optimization.Size = new System.Drawing.Size(824, 111);
			this.Optimization.TabIndex = 32;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(660, 51);
			this.OptAvx.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(132, 22);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(378, 51);
			this.OptSSE.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(132, 22);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(33, 51);
			this.OptPureC.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(240, 22);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(9f, 18f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(992, 755);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.CmdSymmetrical);
			base.Controls.Add(this.groupBox4);
			base.Controls.Add(this.groupBox3);
			base.Controls.Add(this.groupBox2);
			base.Controls.Add(this.groupBox1);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "RotateDialog";
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "æè½¬åç¼©æ¾";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(RotateDialog_FormClosing);
			base.Load += new System.EventHandler(RotateDialog_Load);
			((System.ComponentModel.ISupportInitialize)this.ZoomYUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomXUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.ZoomX).EndInit();
			this.groupBox3.ResumeLayout(false);
			this.groupBox3.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.CenterYUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.CenterY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.CenterXUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.CenterX).EndInit();
			this.groupBox2.ResumeLayout(false);
			this.groupBox2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.AngleUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Angle).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstHUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstH).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstWUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.DstW).EndInit();
			this.groupBox1.ResumeLayout(false);
			this.groupBox1.PerformLayout();
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			this.groupBox4.ResumeLayout(false);
			this.groupBox4.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.OffsetYUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetY).EndInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetXUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.OffsetX).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class USMSharpenFilterDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Locked;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private NumericUpDown AmountUpDown;

		private TrackBar Amount;

		private Label label2;

		private CheckBox ChkPreview;

		private NumericUpDown ThresholdUpDown;

		private TrackBar Threshold;

		private Label label3;

		private CheckBox ChkImproved;

		private CheckBox ChkSpeed;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkHSV;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeBlocking(byte* Src, byte* Dest, int Width, int Height, int Stride, int Quantity, int OffsetA, int OffsetB);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelectiveBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelectiveBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelectiveBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SurfaceBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SurfaceBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SurfaceBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_PS_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_PS_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_UnsharpMask_PS_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Retinex_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxScale, int ScaleAmount, float CutLimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Retinex_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxScale, int ScaleAmount, float CutLimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Retinex_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int MaxScale, int ScaleAmount, float CutLimit);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GlowingEdges_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int EdgeWidth, int EdgeBrightness, int SmoothRadius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GlowingEdges_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int EdgeWidth, int EdgeBrightness, int SmoothRadius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GlowingEdges_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int EdgeWidth, int EdgeBrightness, int SmoothRadius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdaptHistgramEqualize_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int ColorCorrection, int Adaptation, int CutLimit, bool ClassicEqualization);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdaptHistgramEqualize_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int ColorCorrection, int Adaptation, int CutLimit, bool ClassicEqualization);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdaptHistgramEqualize_HSV(byte* Src, byte* Dest, int Width, int Height, int Stride, int ColorCorrection, int Adaptation, int CutLimit, bool ClassicEqualization);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdaptHistgramEqualize_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int ColorCorrection, int Adaptation, int CutLimit, bool ClassicEqualization);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LSD_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LSD_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LSD_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Improved_LSD_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Improved_LSD_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Improved_LSD_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount, float MaxCG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_NLM_Denoising_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int SearchRadius, int PatchRadius, float Delta);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe USMSharpenFilterDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (ChkPreview.Checked)
			{
				long PerformanceFrequency = 0L;
				long lpPerformanceCount = 0L;
				long lpPerformanceCount2 = 0L;
				QueryPerformanceFrequency(ref PerformanceFrequency);
				QueryPerformanceCounter(ref lpPerformanceCount);
				int num = 1;
				if (ChkSpeed.Checked)
				{
					num = 100;
				}
				TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
				TimeUse.GetCurrentParent().Refresh();
				for (int i = 0; i < num; i++)
				{
					if (OptPureC.Checked)
					{
						if (Text.Equals("Retinex"))
						{
							IM_Retinex_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, (float)Threshold.Value * 0.001f);
						}
						else if (Text.Equals("GlowingEdges"))
						{
							IM_GlowingEdges_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("å¼ºåçCLAHE"))
						{
							IM_AdaptHistgramEqualize_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value, !ChkImproved.Checked);
						}
						else if (Text.Equals("USMéå"))
						{
							if (!ChkImproved.Checked)
							{
								IM_UnsharpMask_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_UnsharpMask_PS_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
						else if (Text.Equals("å±é¨åæ¹å·®å¾åå¢å¼º"))
						{
							if (!ChkImproved.Checked)
							{
								IM_LSD_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_Improved_LSD_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
						else if (Text.Equals("éæ©æ§æ¨¡ç³"))
						{
							IM_SelectiveBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("è¡¨é¢æ¨¡ç³"))
						{
							IM_SurfaceBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
					}
					else if (OptAvx.Checked)
					{
						if (Text.Equals("Retinex"))
						{
							IM_Retinex_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, (float)Threshold.Value * 0.001f);
						}
						else if (Text.Equals("GlowingEdges"))
						{
							IM_GlowingEdges_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("å¼ºåçCLAHE"))
						{
							IM_AdaptHistgramEqualize_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value, !ChkImproved.Checked);
						}
						else if (Text.Equals("éæ©æ§æ¨¡ç³"))
						{
							IM_SelectiveBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("è¡¨é¢æ¨¡ç³"))
						{
							IM_SurfaceBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("USMéå"))
						{
							if (!ChkImproved.Checked)
							{
								IM_UnsharpMask_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_UnsharpMask_PS_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
						else if (Text.Equals("å±é¨åæ¹å·®å¾åå¢å¼º"))
						{
							if (!ChkImproved.Checked)
							{
								IM_LSD_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_Improved_LSD_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
					}
					else
					{
						if (!OptSSE.Checked)
						{
							continue;
						}
						if (Text.Equals("USMéå"))
						{
							if (!ChkImproved.Checked)
							{
								IM_UnsharpMask_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_UnsharpMask_PS_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
						else if (Text.Equals("Retinex"))
						{
							IM_Retinex_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, (float)Threshold.Value * 0.001f);
						}
						else if (Text.Equals("GlowingEdges"))
						{
							IM_GlowingEdges_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("éæ©æ§æ¨¡ç³"))
						{
							IM_SelectiveBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("éå±é¨åå¼æ»¤æ³¢"))
						{
							IM_NLM_Denoising_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("è¡¨é¢æ¨¡ç³"))
						{
							IM_SurfaceBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("å¼ºåçCLAHE"))
						{
							if (!ChkHSV.Checked)
							{
								IM_AdaptHistgramEqualize_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value, !ChkImproved.Checked);
							}
							else
							{
								IM_AdaptHistgramEqualize_HSV(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value, !ChkImproved.Checked);
							}
						}
						else if (Text.Equals("DeBlocking"))
						{
							IM_DeBlocking(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
						}
						else if (Text.Equals("å±é¨åæ¹å·®å¾åå¢å¼º"))
						{
							if (!ChkImproved.Checked)
							{
								IM_LSD_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
							else
							{
								IM_Improved_LSD_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, Amount.Value, Threshold.Value);
							}
						}
					}
				}
				QueryPerformanceCounter(ref lpPerformanceCount2);
				float PSNR = 0f;
				float MSE = 0f;
				float Mutual = 0f;
				IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
				IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
				IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
				TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
			}
			else
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			}
			Application.DoEvents();
			canvas.Refresh();
			Application.DoEvents();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void Amount_Scroll(object sender, EventArgs e)
		{
			AmountUpDown.Value = Amount.Value;
		}

		private void AmountUpDown_ValueChanged(object sender, EventArgs e)
		{
			Amount.Value = (int)AmountUpDown.Value;
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private void Threshold_Scroll(object sender, EventArgs e)
		{
			ThresholdUpDown.Value = Threshold.Value;
		}

		private void ThresholdUpDown_ValueChanged(object sender, EventArgs e)
		{
			Threshold.Value = (int)ThresholdUpDown.Value;
			if (!Locked)
			{
				UpdateCanvas();
			}
		}

		private void USMSharpenFilterDialog_Load(object sender, EventArgs e)
		{
			if (Text.Equals("å¼ºåçCLAHE"))
			{
				Locked = true;
				label1.Text = "é¢è²å¹³è¡¡";
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 75;
				RadiusUpDown.Value = 75m;
				label2.Text = "å±é¨ç³»æ°";
				Amount.Minimum = 0;
				AmountUpDown.Minimum = 0m;
				Amount.Maximum = 100;
				AmountUpDown.Maximum = 100m;
				Amount.Value = 50;
				AmountUpDown.Value = 50m;
				label3.Text = "è£åªååæ¯";
				Threshold.Maximum = 0;
				Threshold.Maximum = 100;
				ThresholdUpDown.Minimum = 0m;
				ThresholdUpDown.Maximum = 100m;
				Threshold.Value = 20;
				ThresholdUpDown.Value = 20m;
				ChkImproved.Text = "åç¼©ç´æ¹å¾";
				ChkImproved.Visible = true;
				ChkHSV.Visible = true;
				Locked = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("éå±é¨åå¼æ»¤æ³¢"))
			{
				Locked = true;
				label1.Text = "æç´¢åå¾";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 32;
				RadiusUpDown.Maximum = 32m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				label2.Text = "ååå¾";
				Amount.Minimum = 1;
				AmountUpDown.Minimum = 1m;
				Amount.Maximum = 100;
				AmountUpDown.Maximum = 100m;
				Amount.Value = 2;
				AmountUpDown.Value = 2m;
				label3.Text = "Delta";
				Threshold.Maximum = 5;
				Threshold.Maximum = 100;
				ThresholdUpDown.Minimum = 5m;
				ThresholdUpDown.Maximum = 100m;
				Threshold.Value = 20;
				ThresholdUpDown.Value = 20m;
				Locked = false;
				ChkImproved.Visible = false;
				Optimization.Enabled = false;
			}
			else if (Text.Equals("éæ©æ§æ¨¡ç³"))
			{
				Locked = true;
				label1.Text = "åå¾";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				label2.Text = "éå¼";
				Amount.Minimum = 0;
				AmountUpDown.Minimum = 0m;
				Amount.Maximum = 255;
				AmountUpDown.Maximum = 255m;
				Amount.Value = 32;
				AmountUpDown.Value = 32m;
				label3.Text = "ç²¾åº¦ç­çº§";
				Threshold.Maximum = 0;
				Threshold.Maximum = 4;
				ThresholdUpDown.Minimum = 0m;
				ThresholdUpDown.Maximum = 4m;
				Threshold.Value = 2;
				ThresholdUpDown.Value = 2m;
				Locked = false;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("è¡¨é¢æ¨¡ç³"))
			{
				Locked = true;
				label1.Text = "åå¾";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				label2.Text = "éå¼";
				Amount.Minimum = 2;
				AmountUpDown.Minimum = 2m;
				Amount.Maximum = 255;
				AmountUpDown.Maximum = 255m;
				Amount.Value = 32;
				AmountUpDown.Value = 32m;
				label3.Text = "ç²¾åº¦ç­çº§";
				Threshold.Maximum = 0;
				Threshold.Maximum = 4;
				ThresholdUpDown.Minimum = 0m;
				ThresholdUpDown.Maximum = 4m;
				Threshold.Value = 2;
				ThresholdUpDown.Value = 2m;
				Locked = false;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å±é¨åæ¹å·®å¾åå¢å¼º"))
			{
				Locked = true;
				label1.Text = "åå¾";
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				label2.Text = "æ°é";
				Amount.Minimum = 0;
				AmountUpDown.Minimum = 0m;
				Amount.Maximum = 500;
				AmountUpDown.Maximum = 500m;
				Amount.Value = 200;
				AmountUpDown.Value = 200m;
				label3.Text = "æå¤§å¢ç";
				Threshold.Maximum = 0;
				Threshold.Maximum = 10;
				ThresholdUpDown.Minimum = 0m;
				ThresholdUpDown.Maximum = 10m;
				Threshold.Value = 4;
				ThresholdUpDown.Value = 4m;
				Locked = false;
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("DeBlocking"))
			{
				Locked = true;
				label1.Text = "æ°é";
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Maximum = 60;
				RadiusUpDown.Maximum = 60m;
				Radius.Value = 30;
				RadiusUpDown.Value = 30m;
				label2.Text = "è¾¹ç¼ä¿ç";
				Amount.Minimum = 0;
				AmountUpDown.Minimum = 0m;
				Amount.Maximum = 60;
				AmountUpDown.Maximum = 60m;
				Amount.Value = 30;
				AmountUpDown.Value = 30m;
				label3.Text = "åæ£æµ";
				Threshold.Minimum = 0;
				Threshold.Maximum = 60;
				ThresholdUpDown.Minimum = 0m;
				ThresholdUpDown.Maximum = 60m;
				Threshold.Value = 30;
				ThresholdUpDown.Value = 30m;
				Locked = false;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("Retinex"))
			{
				Locked = true;
				label1.Text = "æå¤§å°ºåº¦";
				Radius.Minimum = 10;
				RadiusUpDown.Minimum = 10m;
				Radius.Maximum = 256;
				RadiusUpDown.Maximum = 256m;
				Radius.Value = 100;
				RadiusUpDown.Value = 100m;
				label2.Text = "å°ºåº¦æ°é";
				Amount.Minimum = 1;
				AmountUpDown.Minimum = 1m;
				Amount.Maximum = 8;
				AmountUpDown.Maximum = 8m;
				Amount.Value = 3;
				AmountUpDown.Value = 3m;
				label3.Text = "è£åª";
				Threshold.Minimum = 1;
				Threshold.Maximum = 100;
				ThresholdUpDown.Minimum = 1m;
				ThresholdUpDown.Maximum = 100m;
				Threshold.Value = 10;
				ThresholdUpDown.Value = 10m;
				Locked = false;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("GlowingEdges"))
			{
				Locked = true;
				label1.Text = "è¾¹ç¼å®½åº¦";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 20;
				RadiusUpDown.Maximum = 20m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				label2.Text = "è¾¹ç¼äº®åº¦";
				Amount.Minimum = 1;
				AmountUpDown.Minimum = 1m;
				Amount.Maximum = 20;
				AmountUpDown.Maximum = 20m;
				Amount.Value = 5;
				AmountUpDown.Value = 5m;
				label3.Text = "å¹³æ»åº¦";
				Threshold.Minimum = 1;
				Threshold.Maximum = 15;
				ThresholdUpDown.Minimum = 1m;
				ThresholdUpDown.Maximum = 15m;
				Threshold.Value = 5;
				ThresholdUpDown.Value = 5m;
				Locked = false;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("USMéå"))
			{
				ChkImproved.Visible = true;
				ChkImproved.Text = "PSç®æ³";
				Optimization.Enabled = true;
			}
			UpdateCanvas();
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged_1(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkHSV_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.ThresholdUpDown = new System.Windows.Forms.NumericUpDown();
			this.Threshold = new System.Windows.Forms.TrackBar();
			this.label3 = new System.Windows.Forms.Label();
			this.AmountUpDown = new System.Windows.Forms.NumericUpDown();
			this.Amount = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkImproved = new System.Windows.Forms.CheckBox();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkHSV = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.ThresholdUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Threshold).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.AmountUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Amount).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(455, 67);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(85, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(455, 34);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(85, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.ThresholdUpDown);
			this.groupBox.Controls.Add(this.Threshold);
			this.groupBox.Controls.Add(this.label3);
			this.groupBox.Controls.Add(this.AmountUpDown);
			this.groupBox.Controls.Add(this.Amount);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(425, 201);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.ThresholdUpDown.Location = new System.Drawing.Point(354, 134);
			this.ThresholdUpDown.Maximum = new decimal(new int[4] { 255, 0, 0, 0 });
			this.ThresholdUpDown.Name = "ThresholdUpDown";
			this.ThresholdUpDown.Size = new System.Drawing.Size(50, 21);
			this.ThresholdUpDown.TabIndex = 11;
			this.ThresholdUpDown.ValueChanged += new System.EventHandler(ThresholdUpDown_ValueChanged);
			this.Threshold.AutoSize = false;
			this.Threshold.LargeChange = 2;
			this.Threshold.Location = new System.Drawing.Point(8, 161);
			this.Threshold.Maximum = 255;
			this.Threshold.Name = "Threshold";
			this.Threshold.Size = new System.Drawing.Size(396, 26);
			this.Threshold.TabIndex = 10;
			this.Threshold.TickFrequency = 0;
			this.Threshold.Scroll += new System.EventHandler(Threshold_Scroll);
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 140);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(41, 12);
			this.label3.TabIndex = 9;
			this.label3.Text = "éå¼ï¼";
			this.AmountUpDown.Location = new System.Drawing.Point(356, 75);
			this.AmountUpDown.Maximum = new decimal(new int[4] { 1000, 0, 0, 0 });
			this.AmountUpDown.Name = "AmountUpDown";
			this.AmountUpDown.Size = new System.Drawing.Size(50, 21);
			this.AmountUpDown.TabIndex = 8;
			this.AmountUpDown.Value = new decimal(new int[4] { 200, 0, 0, 0 });
			this.AmountUpDown.ValueChanged += new System.EventHandler(AmountUpDown_ValueChanged);
			this.Amount.AutoSize = false;
			this.Amount.LargeChange = 2;
			this.Amount.Location = new System.Drawing.Point(10, 100);
			this.Amount.Maximum = 1000;
			this.Amount.Name = "Amount";
			this.Amount.Size = new System.Drawing.Size(394, 26);
			this.Amount.TabIndex = 7;
			this.Amount.TickFrequency = 0;
			this.Amount.Value = 200;
			this.Amount.Scroll += new System.EventHandler(Amount_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(8, 78);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(41, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "æ°éï¼";
			this.RadiusUpDown.Location = new System.Drawing.Point(356, 23);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 200, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 10, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(10, 47);
			this.Radius.Maximum = 200;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(394, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 10;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(8, 23);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(455, 116);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkImproved.AutoSize = true;
			this.ChkImproved.Checked = true;
			this.ChkImproved.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkImproved.Location = new System.Drawing.Point(455, 167);
			this.ChkImproved.Name = "ChkImproved";
			this.ChkImproved.Size = new System.Drawing.Size(60, 16);
			this.ChkImproved.TabIndex = 19;
			this.ChkImproved.Text = "ä¿®æ¹ç";
			this.ChkImproved.UseVisualStyleBackColor = true;
			this.ChkImproved.Visible = false;
			this.ChkImproved.CheckedChanged += new System.EventHandler(ChkImproved_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(455, 142);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(72, 16);
			this.ChkSpeed.TabIndex = 25;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(12, 219);
			this.Optimization.Name = "Optimization";
			this.Optimization.Size = new System.Drawing.Size(425, 74);
			this.Optimization.TabIndex = 24;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(315, 34);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(89, 16);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged_1);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(208, 34);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(89, 16);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(22, 34);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(161, 16);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkHSV.AutoSize = true;
			this.ChkHSV.Location = new System.Drawing.Point(455, 197);
			this.ChkHSV.Name = "ChkHSV";
			this.ChkHSV.Size = new System.Drawing.Size(90, 16);
			this.ChkHSV.TabIndex = 26;
			this.ChkHSV.Text = "ä½¿ç¨HSVç©ºé´";
			this.ChkHSV.UseVisualStyleBackColor = true;
			this.ChkHSV.Visible = false;
			this.ChkHSV.CheckedChanged += new System.EventHandler(ChkHSV_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(552, 304);
			base.Controls.Add(this.ChkHSV);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.ChkImproved);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "USMSharpenFilterDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "USM";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.Load += new System.EventHandler(USMSharpenFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.ThresholdUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Threshold).EndInit();
			((System.ComponentModel.ISupportInitialize)this.AmountUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Amount).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
	public class GuidedFilterDialog : Form
	{
		private Canvas canvas;

		private unsafe byte* Clone = null;

		private ToolStripStatusLabel TimeUse;

		private int Stride;

		private bool Locked;

		private IContainer components;

		private Button btnCancel;

		private Button btnOk;

		private GroupBox groupBox;

		private NumericUpDown RadiusUpDown;

		private TrackBar Radius;

		private Label label1;

		private NumericUpDown SubSampleUpDown;

		private TrackBar SubSample;

		private Label label2;

		private CheckBox ChkPreview;

		private CheckBox ChkImproved;

		private GroupBox Optimization;

		private RadioButton OptAvx;

		private RadioButton OptSSE;

		private RadioButton OptPureC;

		private CheckBox ChkSpeed;

		private ComboBox Cmb1;

		private Label Lbcmb;

		private RadioButton Opt1;

		private RadioButton Opt2;

		[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = true)]
		public unsafe static extern void CopyMemory(void* Dest, void* Src, int Length);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SelfGuidedFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GuidedFilter_SSE(byte* Src, byte* Guide, byte* Dest, int Width, int Height, int Stride, int Radius, int Ratio = 20, float eps = 0.01f);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LeeAdditvieNoiseFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LeeAdditvieNoiseFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LeeAdditvieNoiseFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetImageEntropy_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetImageEntropy_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetImageEntropy_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Shift);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdaptiveMedianFilter(byte* Src, byte* Dest, int Width, int Height, int Stride, int MinRadius, int MaxRadius);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveOutliers_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int RemovePart, int MedianBased, int FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveOutliers_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int RemovePart, int MedianBased, int FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RemoveOutliers_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold, int RemovePart, int MedianBased, int FastMode);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedLeeAdditvieNoiseFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedLeeAdditvieNoiseFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ImprovedLeeAdditvieNoiseFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_LeeAdditvieNoiseFilter_WithEdgePreserved(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int SpaceError);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapDrago_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Bias, float Saturation);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapDrago_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Bias, float Saturation);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_TonemapDrago_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Bias, float Saturation);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DualThreshold(byte* Src, byte* Dest, int Width, int Height, int Stride, int B, int C);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MotionBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Length, int Angle);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_AdjustBrightnessAndContrast(byte* Src, byte* Dest, int Width, int Height, int Stride, int B, int C);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetPSNR(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float PSNR);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ZoomBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int Quality, int CenterX, int CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ZoomBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int Quality, int CenterX, int CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ZoomBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Amount, int Quality, int CenterX, int CenterY);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MultiScaleContrastEnhancement(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_IlluminateImage_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_IlluminateImage_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_IlluminateImage_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Emphasize_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Emphasize_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Emphasize_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Factor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlurFast_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Hori_MedianBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Vert_MedianBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianBlur_Separate(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeHazeBasedonContrastEnhancement(byte* Src, byte* Dest, int Width, int Height, int Stride, int Lamda, int Gamma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_PhotoCopy_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int BackColor, int ForeColor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_PhotoCopy_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int BackColor, int ForeColor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_PhotoCopy_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Brightness, int BackColor, int ForeColor);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RangeFilter_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int EdgeBrightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RangeFilter_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int EdgeBrightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_RangeFilter_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int EdgeBrightness);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DustAndScratches_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DustAndScratches_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DustAndScratches_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Level);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SmartBlur(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianSharpen_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianSharpen_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_MedianSharpen_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Amount);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussLaplacianPyramidEnhancement(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, int Strength);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DualTVDenoising_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, float Lamda, int Iteration, int Condition);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DualTVDenoising_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, float Lamda, int Iteration, int Condition);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DualTVDenoising_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, float Lamda, int Iteration, int Condition);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DoubleThresholding(byte* Src, byte* Dest, int Width, int Height, int Stride, int Low, int High);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_BW_Majority(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, int Percent);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeHazeBasedOnBoxblur_PureC(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Omega);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeHazeBasedOnBoxblur_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Omega);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_DeHazeBasedOnBoxblur_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Radius, float Omega);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WaveletDenoise_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, float Noise, bool Soft);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WaveletDenoise_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, float Noise, bool Soft);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussLaplacianPyramid_Denoise_SSE(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, float Noise, bool Soft);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GaussLaplacianPyramid_Denoise_AVX(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, float Noise, bool Soft);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_WaveletDenoise_SSEF(byte* Src, byte* Dest, int Width, int Height, int Stride, int Level, float Noise);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetSumSquareError(byte* Src1, byte* Src2, int Width, int Height, int Stride, out float MSE);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_ACE(byte* Src, byte* Dest, int Width, int Height, int Stride, int distance, float Sigma);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_SpecularityRemoval(byte* Src, byte* Dest, int Width, int Height, int Stride, float nu, int Threshold);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Monkey(byte* Src, byte* Dest, byte* Mask, int Width, int Height, int Stride, int StrideM, int RadiusH, int RadiusG);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_Destripe(byte* Src, byte* Dest, int Width, int Height, int Stride, int VertLength, int BlurWidth);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMaxHessianNorm_SSE(byte* Src, int Width, int Height, int Stride, int Thickness, ref float MaxHessianNorm);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMaxHessianNorm_Fast_SSE(byte* Src, int Width, int Height, int Stride, int Thickness, ref float MaxHessianNorm);

		[DllImport("ImageMaster.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true)]
		private unsafe static extern int IM_GetMutualInfo(byte* Src, byte* Dest, int Width, int Height, int Stride, out float Mutual);

		[DllImport("kernel32.dll ")]
		private static extern bool QueryPerformanceCounter(ref long lpPerformanceCount);

		[DllImport("kernel32")]
		private static extern bool QueryPerformanceFrequency(ref long PerformanceFrequency);

		private int WIDTHBYTES(int bytes)
		{
			return (bytes * 8 + 31) / 32 * 4;
		}

		public unsafe GuidedFilterDialog(Canvas Parent, ToolStripStatusLabel Label, string Caption)
		{
			InitializeComponent();
			canvas = Parent;
			Text = Caption;
			TimeUse = Label;
			Stride = WIDTHBYTES(canvas.Image.Width * canvas.Channel);
			Clone = (byte*)(void*)Marshal.AllocHGlobal(canvas.Image.Height * Stride);
			CopyMemory(Clone, Parent.ImageData, canvas.Image.Height * Stride);
		}

		private unsafe void UpdateCanvas()
		{
			if (!Locked)
			{
				if (ChkPreview.Checked)
				{
					long PerformanceFrequency = 0L;
					long lpPerformanceCount = 0L;
					long lpPerformanceCount2 = 0L;
					QueryPerformanceFrequency(ref PerformanceFrequency);
					QueryPerformanceCounter(ref lpPerformanceCount);
					int num = 1;
					if (ChkSpeed.Checked)
					{
						num = 100;
					}
					TimeUse.Text = "æ­£å¨è¿è¡" + num + "æ¬¡éå¤è®¡ç®,è¯·èå¿ç­å¾......";
					TimeUse.GetCurrentParent().Refresh();
					for (int i = 0; i < num; i++)
					{
						if (OptPureC.Checked)
						{
							if (Text.Equals("ä¸­é´å¼"))
							{
								IM_MedianBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("è¾¹ç¼å¼ºè°"))
							{
								IM_Emphasize_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("TVå»åª"))
							{
								IM_DualTVDenoising_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 0);
							}
							else if (Text.Equals("Dragoè²è°æ å°"))
							{
								IM_TonemapDrago_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f, (float)SubSample.Value * 0.01f);
							}
							else if (Text.Equals("ç§äº®å¾å"))
							{
								IM_IlluminateImage_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("åºäºåå¼çå»é¾"))
							{
								IM_DeHazeBasedOnBoxblur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.01f + 1f);
							}
							else if (Text.Equals("ä¸­å¼éå"))
							{
								IM_MedianSharpen_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ç¼©æ¾æ¨¡ç³"))
							{
								IM_ZoomBlur_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, canvas.Image.Width / 2, canvas.Image.Height / 2);
							}
							else if (Text.Equals("èå°ååç"))
							{
								IM_DustAndScratches_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("Range"))
							{
								IM_RangeFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("å½±å°"))
							{
								IM_PhotoCopy_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 16777215, 0);
							}
							else if (Text.Equals("Leeåæ¹å·®æ»¤æ³¢"))
							{
								if (!ChkImproved.Checked)
								{
									IM_LeeAdditvieNoiseFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
								else
								{
									IM_ImprovedLeeAdditvieNoiseFilter_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
							}
							else if (Text.Equals("ç§»é¤å¼å¸¸å¼"))
							{
								IM_RemoveOutliers_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, Cmb1.SelectedIndex, (!Opt1.Checked) ? 1 : 0, ChkImproved.Checked ? 1 : 0);
							}
							else if (Text.Equals("å¾åçµ"))
							{
								IM_GetImageEntropy_PureC(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
						}
						else if (OptAvx.Checked)
						{
							if (Text.Equals("ä¸­é´å¼"))
							{
								IM_MedianBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("è¾¹ç¼å¼ºè°"))
							{
								IM_Emphasize_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("TVå»åª"))
							{
								IM_DualTVDenoising_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 0);
							}
							else if (Text.Equals("Dragoè²è°æ å°"))
							{
								IM_TonemapDrago_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f, (float)SubSample.Value * 0.01f);
							}
							else if (Text.Equals("ç§äº®å¾å"))
							{
								IM_IlluminateImage_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("åºäºåå¼çå»é¾"))
							{
								IM_DeHazeBasedOnBoxblur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.01f + 1f);
							}
							else if (Text.Equals("ä¸­å¼éå"))
							{
								IM_MedianSharpen_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ç¼©æ¾æ¨¡ç³"))
							{
								IM_ZoomBlur_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, canvas.Image.Width / 2, canvas.Image.Height / 2);
							}
							else if (Text.Equals("èå°ååç"))
							{
								IM_DustAndScratches_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("Range"))
							{
								IM_RangeFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("å½±å°"))
							{
								IM_PhotoCopy_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 16777215, 0);
							}
							else if (Text.Equals("å¾åçµ"))
							{
								IM_GetImageEntropy_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("Leeåæ¹å·®æ»¤æ³¢"))
							{
								if (!ChkImproved.Checked)
								{
									IM_LeeAdditvieNoiseFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
								else
								{
									IM_ImprovedLeeAdditvieNoiseFilter_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
							}
							else if (Text.Equals("ç§»é¤å¼å¸¸å¼"))
							{
								IM_RemoveOutliers_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, Cmb1.SelectedIndex, (!Opt1.Checked) ? 1 : 0, ChkImproved.Checked ? 1 : 0);
							}
							else if (Text.Equals("å°æ³¢å»åª"))
							{
								if (Opt1.Checked)
								{
									IM_WaveletDenoise_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.05f, ChkImproved.Checked);
								}
								else
								{
									IM_GaussLaplacianPyramid_Denoise_AVX(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.05f, ChkImproved.Checked);
								}
							}
						}
						else
						{
							if (!OptSSE.Checked)
							{
								continue;
							}
							if (Text.Equals("å¯¼åæ»¤æ³¢"))
							{
								IM_SelfGuidedFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 5f);
							}
							else if (Text.Equals("Leeåæ¹å·®æ»¤æ³¢"))
							{
								if (!ChkImproved.Checked)
								{
									IM_LeeAdditvieNoiseFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
								else
								{
									IM_ImprovedLeeAdditvieNoiseFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value * 2);
								}
							}
							else if (Text.Equals("Dragoè²è°æ å°"))
							{
								IM_TonemapDrago_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f, (float)SubSample.Value * 0.01f);
							}
							else if (Text.Equals("å¤å°ºåº¦å¯¹æ¯åº¦å¢å¼º"))
							{
								IM_MultiScaleContrastEnhancement(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, 2000 + 2 * (100 - SubSample.Value) * (100 - SubSample.Value));
							}
							else if (Text.Equals("èªéåºä¸­å¼æ»¤æ³¢"))
							{
								IM_AdaptiveMedianFilter(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("å°æ³¢å»åª"))
							{
								if (Opt1.Checked)
								{
									IM_WaveletDenoise_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.05f, ChkImproved.Checked);
								}
								else
								{
									IM_GaussLaplacianPyramid_Denoise_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.05f, ChkImproved.Checked);
								}
							}
							else if (Text.Equals("åéå¼äºå¼å"))
							{
								IM_DoubleThresholding(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("å»é¤æ¡çº¹"))
							{
								IM_Destripe(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("é«ä½éå¼äºå¼å"))
							{
								IM_DualThreshold(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("å¾åçµ"))
							{
								IM_GetImageEntropy_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("æºè½æ¨¡ç³"))
							{
								IM_SmartBlur(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ç§»é¤å¼å¸¸å¼"))
							{
								IM_RemoveOutliers_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, Cmb1.SelectedIndex, (!Opt1.Checked) ? 1 : 0, ChkImproved.Checked ? 1 : 0);
							}
							else if (Text.Equals("äº®åº¦å¯¹æ¯åº¦"))
							{
								IM_AdjustBrightnessAndContrast(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ä¸­å¼éå"))
							{
								IM_MedianSharpen_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ç§äº®å¾å"))
							{
								IM_IlluminateImage_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("è¾¹ç¼å¼ºè°"))
							{
								IM_Emphasize_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("è¿å¨æ¨¡ç³"))
							{
								IM_MotionBlur(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("ä¸»æå"))
							{
								IM_BW_Majority(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("åºäºåå¼çå»é¾"))
							{
								IM_DeHazeBasedOnBoxblur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.01f + 1f);
							}
							else if (Text.Equals("ç¾é¢"))
							{
								Bitmap bitmap = (Bitmap)Image.FromFile(Environment.CurrentDirectory + "\\Skin.BMP");
								BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
								IM_Monkey(Clone, canvas.ImageData, (byte*)(void*)bitmapData.Scan0, canvas.Image.Width, canvas.Image.Height, canvas.Stride, bitmapData.Stride, Radius.Value, SubSample.Value);
								bitmap.UnlockBits(bitmapData);
								bitmap.Dispose();
							}
							else if (Text.Equals("ç¼©æ¾æ¨¡ç³"))
							{
								IM_ZoomBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, canvas.Image.Width / 2, canvas.Image.Height / 2);
							}
							else if (Text.Equals("å¯¹æ¯åº¦å¢å¼ºå»é¾"))
							{
								IM_DeHazeBasedonContrastEnhancement(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("é«åå»é¤"))
							{
								IM_SpecularityRemoval(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, (float)Radius.Value * 0.01f, SubSample.Value);
							}
							else if (Text.Equals("ä¸­é´å¼"))
							{
								if (!ChkImproved.Checked)
								{
									IM_MedianBlur_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
								}
								else
								{
									IM_MedianBlur_Separate(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
								}
							}
							else if (Text.Equals("å½±å°"))
							{
								IM_PhotoCopy_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 16777215, 0);
							}
							else if (Text.Equals("Range"))
							{
								IM_RangeFilter_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("èå°ååç"))
							{
								IM_DustAndScratches_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
							else if (Text.Equals("TVå»åª"))
							{
								IM_DualTVDenoising_SSE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value, 0);
							}
							else if (Text.Equals("ACE"))
							{
								IM_ACE(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, (float)SubSample.Value * 0.33f);
							}
							else if (Text.Equals("MUSICAå¢å¼º"))
							{
								IM_GaussLaplacianPyramidEnhancement(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, Radius.Value, SubSample.Value);
							}
						}
					}
					QueryPerformanceCounter(ref lpPerformanceCount2);
					float PSNR = 0f;
					float MSE = 0f;
					float Mutual = 0f;
					IM_GetPSNR(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out PSNR);
					IM_GetSumSquareError(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out MSE);
					IM_GetMutualInfo(Clone, canvas.ImageData, canvas.Image.Width, canvas.Image.Height, canvas.Stride, out Mutual);
					TimeUse.Text = "å¹³åè®¡ç®ç¨æ¶: " + Math.Round((double)((lpPerformanceCount2 - lpPerformanceCount) * 1000) / (double)PerformanceFrequency / (double)num, 2) + "ms/  PSNR: " + PSNR + "/  MSE:" + MSE + "/  Mutual:" + Mutual;
				}
				else
				{
					CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				}
			}
			canvas.Refresh();
		}

		private unsafe void btnCancel_Click(object sender, EventArgs e)
		{
			CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
			canvas.Refresh();
		}

		private unsafe void AdjustShadowAndHighlight_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (base.DialogResult != DialogResult.OK)
			{
				CopyMemory(canvas.ImageData, Clone, canvas.Image.Height * Stride);
				canvas.Refresh();
			}
			if (Clone != null)
			{
				Marshal.FreeHGlobal((IntPtr)Clone);
			}
		}

		private void GuidedFilterDialog_Load(object sender, EventArgs e)
		{
			Locked = true;
			if (Text.Equals("ä¸­å¼éå") || Text.Equals("ç§äº®å¾å"))
			{
				label1.Text = "åå¾";
				label2.Text = "æ°é";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 200;
				SubSampleUpDown.Maximum = 200m;
				SubSample.Value = 50;
				SubSampleUpDown.Value = 50m;
				ChkImproved.Text = "å¿«éè¿ä¼¼ç";
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å¤å°ºåº¦å¯¹æ¯åº¦å¢å¼º"))
			{
				label1.Text = "åå¾";
				label2.Text = "å¢å¼ºç³»æ°";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 12;
				RadiusUpDown.Value = 12m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 20;
				SubSampleUpDown.Value = 20m;
				ChkImproved.Visible = false;
				Optimization.Enabled = false;
			}
			else if (Text.Equals("èªéåºä¸­å¼æ»¤æ³¢"))
			{
				label1.Text = "æå°åå¾";
				label2.Text = "æå¤§åå¾";
				Radius.Maximum = 5;
				RadiusUpDown.Maximum = 5m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 1;
				RadiusUpDown.Value = 1m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 50;
				SubSampleUpDown.Maximum = 50m;
				SubSample.Value = 5;
				SubSampleUpDown.Value = 5m;
				ChkImproved.Visible = false;
				Optimization.Enabled = false;
			}
			else if (Text.Equals("å¾åçµ"))
			{
				label1.Text = "åå¾";
				label2.Text = "ç²¾åº¦ç­çº§";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 12;
				RadiusUpDown.Value = 12m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 4;
				SubSampleUpDown.Maximum = 4m;
				SubSample.Value = 3;
				SubSampleUpDown.Value = 3m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å»é¤æ¡çº¹"))
			{
				label1.Text = "é«åº¦æ¹ååå¤§å°";
				label2.Text = "æ°´å¹³æ¨¡ç³ç¨åº¦";
				Radius.Maximum = 500;
				RadiusUpDown.Maximum = 500m;
				Radius.Minimum = 5;
				RadiusUpDown.Minimum = 5m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 500;
				SubSampleUpDown.Maximum = 500m;
				SubSample.Value = 10;
				SubSampleUpDown.Value = 10m;
				ChkImproved.Visible = false;
				Optimization.Enabled = false;
			}
			else if (Text.Equals("å°æ³¢å»åª"))
			{
				label1.Text = "Scale";
				label2.Text = "åªé³ ";
				Radius.Maximum = 10;
				RadiusUpDown.Maximum = 10m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 20;
				SubSampleUpDown.Value = 20m;
				ChkImproved.Visible = true;
				ChkImproved.Text = "è½¯éå¼";
				Opt1.Text = "åºäºå°æ³¢åè§£";
				Opt2.Text = "åºäºé«æ¯ææ®ææ¯éå­å¡åè§£";
				Opt1.Visible = true;
				Opt2.Visible = true;
				Optimization.Enabled = true;
				OptPureC.Enabled = false;
			}
			else if (Text.Equals("ç§»é¤å¼å¸¸å¼"))
			{
				label1.Text = "åå¾";
				label2.Text = "éå¼";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 255;
				SubSampleUpDown.Maximum = 255m;
				SubSample.Value = 50;
				SubSampleUpDown.Value = 50m;
				ChkImproved.Visible = true;
				ChkImproved.Text = "å¿«éçæ¬";
				Cmb1.Items.Add("å»é¤äº®é¨å¹²æ°");
				Cmb1.Items.Add("å»é¤æé¨å¹²æ°");
				Cmb1.Items.Add("å»é¤äº®é¨åæé¨å¹²æ°");
				Cmb1.SelectedIndex = 0;
				RadioButton opt = Opt1;
				RadioButton opt2 = Opt2;
				ComboBox cmb = Cmb1;
				bool flag2 = (Lbcmb.Visible = true);
				bool flag4 = (cmb.Visible = flag2);
				bool visible = (opt2.Visible = flag4);
				opt.Visible = visible;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("è¾¹ç¼å¼ºè°"))
			{
				label1.Text = "åå¾";
				label2.Text = "æ°é";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 2;
				RadiusUpDown.Value = 2m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 2000;
				SubSampleUpDown.Maximum = 2000m;
				SubSample.Value = 500;
				SubSampleUpDown.Value = 500m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("åºäºåå¼çå»é¾"))
			{
				label1.Text = "åå¾";
				label2.Text = "å»é¾ç¨åº¦";
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Minimum = 5;
				RadiusUpDown.Minimum = 5m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 80;
				SubSampleUpDown.Value = 80m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("ä¸»æå"))
			{
				label1.Text = "åå¾";
				label2.Text = "ç¾åæ¯";
				Radius.Maximum = 500;
				RadiusUpDown.Maximum = 500m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 50;
				SubSampleUpDown.Value = 50m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("ç¾é¢"))
			{
				label1.Text = "é«åå·®åå¾";
				label2.Text = "é«æ¯åå¾";
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 200;
				SubSampleUpDown.Maximum = 200m;
				SubSample.Value = 10;
				SubSampleUpDown.Value = 10m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("åéå¼äºå¼å") || Text.Equals("é«ä½éå¼äºå¼å"))
			{
				label1.Text = "ä½éå¼";
				label2.Text = "é«éå¼";
				Radius.Maximum = 255;
				RadiusUpDown.Maximum = 255m;
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Value = 100;
				RadiusUpDown.Value = 100m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 255;
				SubSampleUpDown.Maximum = 255m;
				SubSample.Value = 200;
				SubSampleUpDown.Value = 200m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("TVå»åª"))
			{
				label1.Text = "Lamda";
				label2.Text = "è¿­ä»£æ¬¡æ°";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 25;
				RadiusUpDown.Value = 25m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 16;
				SubSampleUpDown.Value = 16m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("ACE"))
			{
				label1.Text = "Distance";
				label2.Text = "Sigma";
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Value = 17;
				RadiusUpDown.Value = 17m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 20;
				SubSampleUpDown.Maximum = 20m;
				SubSample.Value = 9;
				SubSampleUpDown.Value = 9m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("æºè½æ¨¡ç³"))
			{
				label2.Text = "éå¼";
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				SubSample.Maximum = 255;
				SubSampleUpDown.Maximum = 255m;
				SubSample.Value = 25;
				SubSampleUpDown.Value = 25m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("é«åå»é¤"))
			{
				label1.Text = "nuå¼";
				label2.Text = "Threshold";
				Radius.Minimum = 0;
				RadiusUpDown.Minimum = 0m;
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 50;
				SubSampleUpDown.Maximum = 50m;
				SubSample.Value = 25;
				SubSampleUpDown.Value = 25m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("Leeåæ¹å·®æ»¤æ³¢"))
			{
				label2.Text = "æ¹å·®";
				Radius.Maximum = 63;
				RadiusUpDown.Maximum = 63m;
				SubSample.Maximum = 255;
				SubSampleUpDown.Maximum = 255m;
				SubSample.Value = 100;
				SubSampleUpDown.Value = 100m;
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("äº®åº¦å¯¹æ¯åº¦"))
			{
				label1.Text = "äº®åº¦";
				label2.Text = "å¯¹æ¯åº¦";
				Radius.Minimum = -100;
				RadiusUpDown.Minimum = -100m;
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 0;
				RadiusUpDown.Value = 0m;
				SubSample.Minimum = -100;
				SubSampleUpDown.Minimum = -100m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 0;
				SubSampleUpDown.Value = 0m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("Range"))
			{
				label1.Text = "åå¾";
				label2.Text = "äº®åº¦";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 500;
				SubSampleUpDown.Maximum = 500m;
				SubSample.Value = 100;
				SubSampleUpDown.Value = 100m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("èå°ååç"))
			{
				label1.Text = "åå¾";
				label2.Text = "éå¼";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 64;
				RadiusUpDown.Maximum = 64m;
				Radius.Value = 10;
				RadiusUpDown.Value = 10m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 255;
				SubSampleUpDown.Maximum = 255m;
				SubSample.Value = 0;
				SubSampleUpDown.Value = 0m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("å½±å°"))
			{
				label1.Text = "ç»è";
				label2.Text = "æåº¦";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 24;
				RadiusUpDown.Maximum = 24m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 50;
				SubSampleUpDown.Maximum = 50m;
				SubSample.Value = 10;
				SubSampleUpDown.Value = 10m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("Dragoè²è°æ å°"))
			{
				label1.Text = "åç½®å¼";
				label2.Text = "é¥±ååº¦";
				Radius.Minimum = 50;
				RadiusUpDown.Minimum = 50m;
				Radius.Maximum = 100;
				RadiusUpDown.Maximum = 100m;
				Radius.Value = 85;
				RadiusUpDown.Value = 85m;
				SubSample.Minimum = 50;
				SubSampleUpDown.Minimum = 50m;
				SubSample.Maximum = 150;
				SubSampleUpDown.Maximum = 150m;
				SubSample.Value = 100;
				SubSampleUpDown.Value = 100m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("è¿å¨æ¨¡ç³"))
			{
				label1.Text = "é¿åº¦";
				label2.Text = "è§åº¦";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 360;
				SubSampleUpDown.Maximum = 360m;
				SubSample.Value = 30;
				SubSampleUpDown.Value = 30m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("å¯¹æ¯åº¦å¢å¼ºå»é¾"))
			{
				label1.Text = "Lamda";
				label2.Text = "Gamma";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 50;
				SubSampleUpDown.Minimum = 50m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 70;
				SubSampleUpDown.Value = 70m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("ç¼©æ¾æ¨¡ç³"))
			{
				label1.Text = "æ°é";
				label2.Text = "è´¨é";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 200;
				RadiusUpDown.Maximum = 200m;
				Radius.Value = 20;
				RadiusUpDown.Value = 20m;
				SubSample.Minimum = 1;
				SubSampleUpDown.Minimum = 1m;
				SubSample.Maximum = 5;
				SubSampleUpDown.Maximum = 5m;
				SubSample.Value = 2;
				SubSampleUpDown.Value = 2m;
				ChkImproved.Visible = false;
				Optimization.Enabled = true;
			}
			else if (Text.Equals("MUSICAå¢å¼º"))
			{
				label1.Text = "éå­å¡å±æ°";
				label2.Text = "ç»èå¼ºåº¦";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 12;
				RadiusUpDown.Maximum = 12m;
				Radius.Value = 8;
				RadiusUpDown.Value = 8m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 100;
				SubSampleUpDown.Maximum = 100m;
				SubSample.Value = 50;
				SubSampleUpDown.Value = 50m;
				ChkImproved.Visible = false;
			}
			else if (Text.Equals("ä¸­é´å¼"))
			{
				label1.Text = "åå¾";
				label2.Text = "ç¾åæ¯";
				Radius.Minimum = 1;
				RadiusUpDown.Minimum = 1m;
				Radius.Maximum = 127;
				RadiusUpDown.Maximum = 127m;
				Radius.Value = 5;
				RadiusUpDown.Value = 5m;
				SubSample.Minimum = 0;
				SubSampleUpDown.Minimum = 0m;
				SubSample.Maximum = 99;
				SubSampleUpDown.Maximum = 99m;
				SubSample.Value = 50;
				SubSampleUpDown.Value = 50m;
				ChkImproved.Text = "åç¦»ç";
				ChkImproved.Visible = true;
				Optimization.Enabled = true;
			}
			Locked = false;
			UpdateCanvas();
		}

		private void GuidedFilterDialog_FormClosed(object sender, FormClosedEventArgs e)
		{
		}

		private void RadiusUpDown_ValueChanged(object sender, EventArgs e)
		{
			Radius.Value = (int)RadiusUpDown.Value;
			UpdateCanvas();
		}

		private void Radius_Scroll(object sender, EventArgs e)
		{
			RadiusUpDown.Value = Radius.Value;
		}

		private void SubSampleUpDown_ValueChanged(object sender, EventArgs e)
		{
			SubSample.Value = (int)SubSampleUpDown.Value;
			UpdateCanvas();
		}

		private void SubSample_Scroll(object sender, EventArgs e)
		{
			SubSampleUpDown.Value = SubSample.Value;
		}

		private void ChkPreview_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void ChkImproved_CheckedChanged(object sender, EventArgs e)
		{
			if (Text == "ä¸­å¼æ¨¡ç³")
			{
				if (ChkImproved.Checked)
				{
					Optimization.Enabled = false;
				}
				else
				{
					Optimization.Enabled = true;
				}
			}
			UpdateCanvas();
		}

		private void ChkSpeed_CheckedChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		private void OptPureC_CheckedChanged(object sender, EventArgs e)
		{
			if (OptPureC.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptSSE_CheckedChanged(object sender, EventArgs e)
		{
			if (OptSSE.Checked)
			{
				UpdateCanvas();
			}
		}

		private void OptAvx_CheckedChanged(object sender, EventArgs e)
		{
			if (OptAvx.Checked)
			{
				UpdateCanvas();
			}
		}

		private void Opt1_CheckedChanged(object sender, EventArgs e)
		{
			if (Opt1.Checked)
			{
				UpdateCanvas();
			}
		}

		private void Opt2_CheckedChanged(object sender, EventArgs e)
		{
			if (Opt2.Checked)
			{
				UpdateCanvas();
			}
		}

		private void Cmb1_SelectedIndexChanged(object sender, EventArgs e)
		{
			UpdateCanvas();
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		private void InitializeComponent()
		{
			this.btnCancel = new System.Windows.Forms.Button();
			this.btnOk = new System.Windows.Forms.Button();
			this.groupBox = new System.Windows.Forms.GroupBox();
			this.Opt1 = new System.Windows.Forms.RadioButton();
			this.Opt2 = new System.Windows.Forms.RadioButton();
			this.Cmb1 = new System.Windows.Forms.ComboBox();
			this.Lbcmb = new System.Windows.Forms.Label();
			this.SubSampleUpDown = new System.Windows.Forms.NumericUpDown();
			this.SubSample = new System.Windows.Forms.TrackBar();
			this.label2 = new System.Windows.Forms.Label();
			this.RadiusUpDown = new System.Windows.Forms.NumericUpDown();
			this.Radius = new System.Windows.Forms.TrackBar();
			this.label1 = new System.Windows.Forms.Label();
			this.ChkPreview = new System.Windows.Forms.CheckBox();
			this.ChkImproved = new System.Windows.Forms.CheckBox();
			this.Optimization = new System.Windows.Forms.GroupBox();
			this.OptAvx = new System.Windows.Forms.RadioButton();
			this.OptSSE = new System.Windows.Forms.RadioButton();
			this.OptPureC = new System.Windows.Forms.RadioButton();
			this.ChkSpeed = new System.Windows.Forms.CheckBox();
			this.groupBox.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)this.SubSampleUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.SubSample).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).BeginInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).BeginInit();
			this.Optimization.SuspendLayout();
			base.SuspendLayout();
			this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.btnCancel.Location = new System.Drawing.Point(448, 69);
			this.btnCancel.Name = "btnCancel";
			this.btnCancel.Size = new System.Drawing.Size(94, 27);
			this.btnCancel.TabIndex = 15;
			this.btnCancel.Text = "åæ¶";
			this.btnCancel.UseVisualStyleBackColor = true;
			this.btnCancel.Click += new System.EventHandler(btnCancel_Click);
			this.btnOk.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.btnOk.Location = new System.Drawing.Point(448, 26);
			this.btnOk.Name = "btnOk";
			this.btnOk.Size = new System.Drawing.Size(94, 27);
			this.btnOk.TabIndex = 14;
			this.btnOk.Text = "ç¡®å®";
			this.btnOk.UseVisualStyleBackColor = true;
			this.groupBox.Controls.Add(this.Opt1);
			this.groupBox.Controls.Add(this.Opt2);
			this.groupBox.Controls.Add(this.Cmb1);
			this.groupBox.Controls.Add(this.Lbcmb);
			this.groupBox.Controls.Add(this.SubSampleUpDown);
			this.groupBox.Controls.Add(this.SubSample);
			this.groupBox.Controls.Add(this.label2);
			this.groupBox.Controls.Add(this.RadiusUpDown);
			this.groupBox.Controls.Add(this.Radius);
			this.groupBox.Controls.Add(this.label1);
			this.groupBox.Location = new System.Drawing.Point(12, 12);
			this.groupBox.Name = "groupBox";
			this.groupBox.Size = new System.Drawing.Size(425, 179);
			this.groupBox.TabIndex = 16;
			this.groupBox.TabStop = false;
			this.groupBox.Text = "éé¡¹";
			this.Opt1.AutoSize = true;
			this.Opt1.Checked = true;
			this.Opt1.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.Opt1.Location = new System.Drawing.Point(22, 149);
			this.Opt1.Margin = new System.Windows.Forms.Padding(2);
			this.Opt1.Name = "Opt1";
			this.Opt1.Size = new System.Drawing.Size(59, 16);
			this.Opt1.TabIndex = 42;
			this.Opt1.TabStop = true;
			this.Opt1.Text = "ä¸­é´å¼";
			this.Opt1.UseVisualStyleBackColor = true;
			this.Opt1.Visible = false;
			this.Opt1.CheckedChanged += new System.EventHandler(Opt1_CheckedChanged);
			this.Opt2.AutoSize = true;
			this.Opt2.Checked = true;
			this.Opt2.Font = new System.Drawing.Font("å®ä½", 9f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 134);
			this.Opt2.Location = new System.Drawing.Point(124, 149);
			this.Opt2.Margin = new System.Windows.Forms.Padding(2);
			this.Opt2.Name = "Opt2";
			this.Opt2.Size = new System.Drawing.Size(59, 16);
			this.Opt2.TabIndex = 41;
			this.Opt2.TabStop = true;
			this.Opt2.Text = "å¹³åå¼";
			this.Opt2.UseVisualStyleBackColor = true;
			this.Opt2.Visible = false;
			this.Opt2.CheckedChanged += new System.EventHandler(Opt2_CheckedChanged);
			this.Cmb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
			this.Cmb1.FormattingEnabled = true;
			this.Cmb1.Location = new System.Drawing.Point(276, 147);
			this.Cmb1.Name = "Cmb1";
			this.Cmb1.Size = new System.Drawing.Size(129, 20);
			this.Cmb1.TabIndex = 40;
			this.Cmb1.Visible = false;
			this.Cmb1.SelectedIndexChanged += new System.EventHandler(Cmb1_SelectedIndexChanged);
			this.Lbcmb.AutoSize = true;
			this.Lbcmb.Location = new System.Drawing.Point(207, 151);
			this.Lbcmb.Name = "Lbcmb";
			this.Lbcmb.Size = new System.Drawing.Size(65, 12);
			this.Lbcmb.TabIndex = 39;
			this.Lbcmb.Text = "å¹²æ°ç±»åï¼";
			this.Lbcmb.Visible = false;
			this.SubSampleUpDown.Location = new System.Drawing.Point(353, 89);
			this.SubSampleUpDown.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
			this.SubSampleUpDown.Name = "SubSampleUpDown";
			this.SubSampleUpDown.Size = new System.Drawing.Size(50, 21);
			this.SubSampleUpDown.TabIndex = 8;
			this.SubSampleUpDown.Value = new decimal(new int[4] { 20, 0, 0, 0 });
			this.SubSampleUpDown.ValueChanged += new System.EventHandler(SubSampleUpDown_ValueChanged);
			this.SubSample.AutoSize = false;
			this.SubSample.LargeChange = 2;
			this.SubSample.Location = new System.Drawing.Point(8, 116);
			this.SubSample.Maximum = 100;
			this.SubSample.Minimum = 10;
			this.SubSample.Name = "SubSample";
			this.SubSample.Size = new System.Drawing.Size(395, 26);
			this.SubSample.TabIndex = 7;
			this.SubSample.TickFrequency = 0;
			this.SubSample.Value = 20;
			this.SubSample.Scroll += new System.EventHandler(SubSample_Scroll);
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 84);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(53, 12);
			this.label2.TabIndex = 6;
			this.label2.Text = "ä¸åæ ·ï¼";
			this.RadiusUpDown.Location = new System.Drawing.Point(353, 29);
			this.RadiusUpDown.Maximum = new decimal(new int[4] { 256, 0, 0, 0 });
			this.RadiusUpDown.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
			this.RadiusUpDown.Name = "RadiusUpDown";
			this.RadiusUpDown.Size = new System.Drawing.Size(50, 21);
			this.RadiusUpDown.TabIndex = 4;
			this.RadiusUpDown.Value = new decimal(new int[4] { 12, 0, 0, 0 });
			this.RadiusUpDown.ValueChanged += new System.EventHandler(RadiusUpDown_ValueChanged);
			this.Radius.AutoSize = false;
			this.Radius.LargeChange = 2;
			this.Radius.Location = new System.Drawing.Point(8, 55);
			this.Radius.Maximum = 256;
			this.Radius.Minimum = 1;
			this.Radius.Name = "Radius";
			this.Radius.Size = new System.Drawing.Size(395, 26);
			this.Radius.TabIndex = 3;
			this.Radius.TickFrequency = 0;
			this.Radius.Value = 12;
			this.Radius.Scroll += new System.EventHandler(Radius_Scroll);
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 29);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(41, 12);
			this.label1.TabIndex = 5;
			this.label1.Text = "åå¾ï¼";
			this.ChkPreview.AutoSize = true;
			this.ChkPreview.Checked = true;
			this.ChkPreview.CheckState = System.Windows.Forms.CheckState.Checked;
			this.ChkPreview.Location = new System.Drawing.Point(448, 116);
			this.ChkPreview.Name = "ChkPreview";
			this.ChkPreview.Size = new System.Drawing.Size(48, 16);
			this.ChkPreview.TabIndex = 17;
			this.ChkPreview.Text = "é¢è§";
			this.ChkPreview.UseVisualStyleBackColor = true;
			this.ChkPreview.CheckedChanged += new System.EventHandler(ChkPreview_CheckedChanged);
			this.ChkImproved.AutoSize = true;
			this.ChkImproved.Location = new System.Drawing.Point(448, 169);
			this.ChkImproved.Name = "ChkImproved";
			this.ChkImproved.Size = new System.Drawing.Size(60, 16);
			this.ChkImproved.TabIndex = 18;
			this.ChkImproved.Text = "æ¹è¿ç";
			this.ChkImproved.UseVisualStyleBackColor = true;
			this.ChkImproved.Visible = false;
			this.ChkImproved.CheckedChanged += new System.EventHandler(ChkImproved_CheckedChanged);
			this.Optimization.Controls.Add(this.OptAvx);
			this.Optimization.Controls.Add(this.OptSSE);
			this.Optimization.Controls.Add(this.OptPureC);
			this.Optimization.Enabled = false;
			this.Optimization.Location = new System.Drawing.Point(12, 205);
			this.Optimization.Name = "Optimization";
			this.Optimization.Size = new System.Drawing.Size(425, 74);
			this.Optimization.TabIndex = 22;
			this.Optimization.TabStop = false;
			this.Optimization.Text = "ä¼åéé¡¹";
			this.OptAvx.AutoSize = true;
			this.OptAvx.Location = new System.Drawing.Point(315, 34);
			this.OptAvx.Name = "OptAvx";
			this.OptAvx.Size = new System.Drawing.Size(89, 16);
			this.OptAvx.TabIndex = 2;
			this.OptAvx.Text = "AVXä¼åçæ¬";
			this.OptAvx.UseVisualStyleBackColor = true;
			this.OptAvx.CheckedChanged += new System.EventHandler(OptAvx_CheckedChanged);
			this.OptSSE.AutoSize = true;
			this.OptSSE.Checked = true;
			this.OptSSE.Location = new System.Drawing.Point(208, 34);
			this.OptSSE.Name = "OptSSE";
			this.OptSSE.Size = new System.Drawing.Size(89, 16);
			this.OptSSE.TabIndex = 1;
			this.OptSSE.TabStop = true;
			this.OptSSE.Text = "SSEä¼åçæ¬";
			this.OptSSE.UseVisualStyleBackColor = true;
			this.OptSSE.CheckedChanged += new System.EventHandler(OptSSE_CheckedChanged);
			this.OptPureC.AutoSize = true;
			this.OptPureC.Location = new System.Drawing.Point(22, 34);
			this.OptPureC.Name = "OptPureC";
			this.OptPureC.Size = new System.Drawing.Size(161, 16);
			this.OptPureC.TabIndex = 0;
			this.OptPureC.Text = "ç¼è¯å¨èªå¨åéåçCè¯­è¨";
			this.OptPureC.UseVisualStyleBackColor = true;
			this.OptPureC.CheckedChanged += new System.EventHandler(OptPureC_CheckedChanged);
			this.ChkSpeed.AutoSize = true;
			this.ChkSpeed.Location = new System.Drawing.Point(448, 143);
			this.ChkSpeed.Name = "ChkSpeed";
			this.ChkSpeed.Size = new System.Drawing.Size(72, 16);
			this.ChkSpeed.TabIndex = 23;
			this.ChkSpeed.Text = "æµéæ¨¡å¼";
			this.ChkSpeed.UseVisualStyleBackColor = true;
			this.ChkSpeed.CheckedChanged += new System.EventHandler(ChkSpeed_CheckedChanged);
			base.AutoScaleDimensions = new System.Drawing.SizeF(6f, 12f);
			base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			base.ClientSize = new System.Drawing.Size(551, 287);
			base.Controls.Add(this.ChkSpeed);
			base.Controls.Add(this.Optimization);
			base.Controls.Add(this.ChkImproved);
			base.Controls.Add(this.ChkPreview);
			base.Controls.Add(this.btnCancel);
			base.Controls.Add(this.btnOk);
			base.Controls.Add(this.groupBox);
			base.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			base.MaximizeBox = false;
			base.MinimizeBox = false;
			base.Name = "GuidedFilterDialog";
			base.Opacity = 0.9;
			base.ShowIcon = false;
			base.ShowInTaskbar = false;
			base.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "GuidedFilter";
			base.FormClosing += new System.Windows.Forms.FormClosingEventHandler(AdjustShadowAndHighlight_FormClosing);
			base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(GuidedFilterDialog_FormClosed);
			base.Load += new System.EventHandler(GuidedFilterDialog_Load);
			this.groupBox.ResumeLayout(false);
			this.groupBox.PerformLayout();
			((System.ComponentModel.ISupportInitialize)this.SubSampleUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.SubSample).EndInit();
			((System.ComponentModel.ISupportInitialize)this.RadiusUpDown).EndInit();
			((System.ComponentModel.ISupportInitialize)this.Radius).EndInit();
			this.Optimization.ResumeLayout(false);
			this.Optimization.PerformLayout();
			base.ResumeLayout(false);
			base.PerformLayout();
		}
	}
}

// PE file does not contain any managed metadata.

ICSharpCode.Decompiler.Metadata.MetadataFileNotSupportedException: PE file does not contain any managed metadata.
   at ICSharpCode.ILSpyX.LoadedAssembly.LoadAsync(Task`1 streamTask) in /_/ICSharpCode.ILSpyX/LoadedAssembly.cs:line 387
   at ICSharpCode.ILSpy.TreeNodes.AssemblyTreeNode.Decompile(Language language, ITextOutput output, DecompilationOptions options)